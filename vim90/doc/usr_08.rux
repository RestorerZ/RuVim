*usr_08.txt*	       для Vim version 9.0	      редакция от 11 авг 2017

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

			     Работа с окнами


Использование окон позволяет работать одновременно с несколькими файлами, либо
просматривать разные фрагменты одного и того же файла, а так же искать
различия в файлах.

|08.1|  Создание окна
|08.2|  Загрузка файла с созданием ещё одного окна
|08.3|  Размер окна
|08.4|  Расположение окон по вертикали
|08.5|  Перемещение окон
|08.6|  Применение команд ко всем окнам
|08.7|  Просмотр разночтений при помощи vimdiff
|08.8|  Дополнительно
|08.9|  Вкладки

 Следующая глава: |usr_09.txt|  Графический интерфейс программы
Предыдущая глава: |usr_07.txt|  Редактирование сразу нескольких файлов
      Содержание: |usr_toc.txt|

==============================================================================
*08.1*  Создание окна

Самый простой способ создать новое окно, это ввести следующую команду

>
	:split
<

По этой команде будет выполнено разделение по горизонтали отображаемого на
экране окна на две части и перемещение каретки в верхнее окно:

	+-----------------------------------+ ~
	|/* file one.c */		    | ~
	|~				    | ~
	|~				    | ~
	|one.c============================= | ~
	|/* file one.c */		    | ~
	|~				    | ~
	|one.c============================= | ~
	|				    | ~
	+-----------------------------------+ ~

Как видите, теперь отображается два окна, в каждом из которых открыт один и
тот же файл. На иллюстрации символами «====» показана строка состояния, в
которой выводится информация об окне, расположенном над ней (строка состояния,
как правило, отображается в инверсном видеорежиме).
    Наличие двух окон позволяет просматривать одновременно две разные части
одного и того же файла. Например, удобно, если в верхнем окне показаны
определения переменных в программе, а в нижнем, сам исходный код программы с
которым и ведётся работа.

Для перемещения между окнами можно использовать команду CTRL-W w. Например,
если каретка находитесь в верхнем окне, то по CTRL-W w каретка будет
перемещена в нижнее окно, а если каретка находитесь в нижнем окне, то она
будет перемещена в верхнее. (Тот же результат будет получен и по команде
CTRL-W CTRL-W).


ЗАКРЫТИЕ ОКНА

Чтобы закрыть текущее окно используйте команду

>
	:close
<

На самом деле можно применять любую команду, по которой прекращается работа
над файлом, например ":quit" или `ZZ`. Однако, ":close" предохраняет от выхода
из редактора в том случае, если выполняется попытка закрыть последнее из
открытых окон.


ЗАКРЫТИЕ ВСЕХ ОСТАЛЬНЫХ ОКОН

Если открыто несколько окон и теперь требуется оставить открытым только одно
окно, то будет полезна следующая команда:

>
	:only
<

С её помощью можно закрыть все окна, кроме текущего окна. Однако если в одном
из окон есть несохранённые изменения, то будет выведено сообщение об ошибке и
это окно не будет закрыто.

==============================================================================
*08.2*  Загрузка файла с созданием ещё одного окна


При вводе следующей команды, будет создано второе окно, с отображением в нём
указанного файла

>
	:split two.c
<

Если перед этим редактировался файл «one.c», то результат будет выглядеть так:

	+-----------------------------------+ ~
	|/* file two.c */		    | ~
	|~				    | ~
	|~				    | ~
	|two.c============================= | ~
	|/* file one.c */		    | ~
	|~				    | ~
	|one.c============================= | ~
	|				    | ~
	+-----------------------------------+ ~

Для того чтобы открыть окно с одновременным созданием нового пустого файла,
используйте команду

>
	:new
<

Можно повторно использовать команды ":split" и ":new", чтобы создать столько
окон, сколько потребуется.

==============================================================================
*08.3*  Размер окна

Команда ":split" может принимать числовой аргумент-приставку. Если перед
командой указано число, то оно устанавливает высоту нового окна. Например, по
следующей команде создаётся окно высотой в три строки и открытие в нём файла
«alpha.c»:

>
	:3split alpha.c
<

Размер уже существующих окон можно менять различными способами. Так, если к
компьютеру подключён манипулятор типа «мышь», то достаточно просто потянуть за
строку состояния, разделяющую два окна, вверх или вниз. Кроме того, можно
пользоваться клавиатурными командами.

Для увеличения размера окна команда

>
	CTRL-W +
<

Для уменьшения размера окна команда

>
	CTRL-W -
<

Обе команды могут принимать числовой аргумент, указывающий насколько именно
строк необходимо изменить размер окна. Так, по команде "4 CTRL-W +" будет
увеличен размер окна на 4 строки.

Чтобы установить высоту окна в определённое количество строк, используйте
следующую команду

>
	{height}CTRL-W _
<

(Символ подчёркивания «_» вводится при помощи клавиши с символом «-» с
одновременным нажатием клавиши SHIFT). Команда CTRL-W _ без числового
аргумента увеличит окно до максимально возможной высоты.


ИСПОЛЬЗОВАНИЕ «МЫШИ»

Многие вещи в редакторе Vim делаются гораздо быстрее при помощи клавиатуры,
но, к сожалению, изменение размеров окна не относится к числу таких операций,
поскольку требует довольно много нажатий на клавиши. Использование «мыши» для
изменения размеров окна намного эффективнее. Для этого достаточно просто
потянуть за строку состояния вверх или вниз.


ПАРАМЕТРЫ

Через параметр 'winheight' можно указать желаемую минимальную высоту окна, а
'winminheight' — абсолютную минимальную высоту. Аналогично, имеется параметр
'winwidth' для желаемой минимальной ширины окна и 'winminwidth' для абсолютной
минимальной ширины. Через установку параметра 'equalalways' выполняется
указание редактору Vim выполнять подгонку размеров окон при их открытии или
закрытии так, чтобы они были равных размеров.

==============================================================================
*08.4*  Расположение окон по вертикали

По команде ":split" создаётся новое окно над текущим окном, а для того чтобы
разместить новое окно слева от текущего окна, используйте команду

>
	:vsplit
<

или

>
	:vsplit two.c
<

Результат выполнения выглядит примерно так:

	+---------------------------------------+ ~
	|/* файл two.c */    |/* файл one.c */  | ~
	|~		     |~			| ~
	|~		     |~			| ~
	|~		     |~			| ~
	|two.c================one.c============ | ~
	|                                       | ~
	+---------------------------------------+ ~

Колонка, обозначенная на иллюстрации символом | между окнами, на экране будет
отображаться в инверсном видеорежиме и называется вертикальным разделителем.

Имеется также команда ":vnew", по которой создаётся вертикальное окно с новым
пустым файлом. Другой способ получить тот же результата:

>
	:vertical new
<

Вообще, команду ":vertical" можно использовать перед любой командой, по
которой выполняется разделению окна, что приведёт к раскрою текущего окна по
вертикали, а не по горизонтали. Если выполнение такой команды не приводит к
разделению окна, то она работает так, как если бы команда ":vertical" не
использовалась.


ПЕРЕМЕЩЕНИЕ МЕЖДУ ОКНАМИ

Поскольку окна можно разделять по вертикали и горизонтали в любом порядке, то
можно создавать любое расположение окон. Для перемещения между окнами
используйте следующие команды:

	CTRL-W h	переход в окно расположенное левее от текущего окна;
	CTRL-W j	переход в окно расположенное ниже от текущего окна;
	CTRL-W k	переход в окно расположенное выше от текущего окна;
	CTRL-W l	переход в окно расположенное правее от текущего окна;

	CTRL-W t	переход в самое верхнее окно;
	CTRL-W b	переход в самое нижнее окно.

Как видите, используются те же команды, что и для перемещения каретки в
тексте. Если уж так нравится, то можно пользоваться и клавишами перемещения
курсора. Более подробный список команд для перемещения между окнами здесь:
|Q_wi|.

==============================================================================
*08.5*  Перемещение окон

Допустим, что рабочая область разделена на несколько окон, и теперь необходимо
изменить их расположение. Например, если на экране это выглядит как-то так:

	+-----------------------------------+ ~
	|/* файл two.c */		    | ~
	|~				    | ~
	|~				    | ~
	|two.c============================= | ~
	|/* файл three.c */		    | ~
	|~				    | ~
	|~				    | ~
	|three.c=========================== | ~
	|/* файл one.c */		    | ~
	|~				    | ~
	|one.c============================= | ~
	|				    | ~
	+-----------------------------------+ ~

то, наверное, нижнее окно было бы лучше поместить наверху. Для этого
переместите каретку в это окно при помощи команды "CTRL-W w" и введите команду

>
	CTRL-W SHIFT-K
<

Все очень просто, не правда ли? Команда `k` используется для перемещения
каретки в окно расположенное выше текущего, а команда `K` (прописная латинская
буква K) для перемещения всего окна в верхнюю часть рабочей области.
    Если используется вертикальное расположение окон, то по команде "CTRL-W K"
текущее окно будет перенесено в верхнюю часть рабочей области и развёрнуто по
всей её ширине. Например, если окна расположены таким образом:

	+-------------------------------------------+ ~
	|/* two.c */    |/* three.c */  |/* one.c */| ~
	|~		|~		|~	    | ~
	|~		|~		|~	    | ~
	|~		|~		|~	    | ~
	|~		|~		|~	    | ~
	|~		|~		|~	    | ~
	|two.c=========three.c=========one.c======= | ~
	|					    | ~
	+-------------------------------------------+ ~

, то использование "CTRL-W K" в среднем окне (three.c) приведёт к следующему
результату:

	+-------------------------------------------+ ~
	|/* three.c */				    | ~
	|~					    | ~
	|~					    | ~
	|three.c=================================== | ~
	|/* two.c */		|/* one.c */	    | ~
	|~			|~		    | ~
	|two.c==================one.c============== | ~
	|					    | ~
	+-------------------------------------------+ ~

Три похожих команды используют аналогичную мнемонику:

	CTRL-W H	поместить текущее окно в левой части рабочей области;
	CTRL-W J	поместить текущее окно в нижней части рабочей области;
	CTRL-W L	поместить текущее окно в правой части рабочей области.

==============================================================================
*08.6*  Применение команд ко всем окнам

Если открыто несколько окон и необходимо завершить работу редактора Vim, то
придётся закрывать каждое окно отдельно. Более быстрый способ заключается в
использовании команды

>
	:qall
<

, что значит «quit all», выйти отовсюду. Конечно, если в каком-то окне
содержатся несохранённые изменения, то данное окно не будет закрыто, а каретка
будет помещён в это окно и выдано сообщение об ошибке. В этом случае
потребуется либо использовать команду ":write" для сохранения изменений, либо
команду ":quit!" для выхода без сохранения изменений.

Для сохранения изменений во всех окнах, можно использовать команду

>
	:wall
<

, что значит «write all», записать всё. Однако на самом деле по этой команде
будут записаны изменения только из тех окон, где они действительно не
сохранены. Наконец, имеется команда, по которой сохраняются изменения из всех
окон, где это требуется, и затем выполняется закрытие всех окон. Выглядит она
так:

>
	:wqall
<

Несложно догадаться, что это команда является сочетанием команд ":wall" и
":qall", т. е. «записать всё и выйти отовсюду». Кроме того, есть и команда, по
которой редактор закроет все окна, не сохраняя изменения

>
	:qall!
<

Будьте осторожны, эту команду нельзя отменить!


ОТКРЫТИЕ ФАЙЛОВ ИЗ СПИСКА АРГУМЕНТОВ В ОТДЕЛЬНЫХ ОКНАХ

Чтобы в редакторе Vim каждый файл из списка аргументов открывался в отдельном
окне, используйте при запуске программы аргумент "-o"

>
	vim -o one.txt two.txt three.txt
<

Результат будет выглядеть так:

	+-------------------------------+ ~
	|файл one.txt                   | ~
	|~                              | ~
	|one.txt======================= | ~
	|файл two.txt                   | ~
	|~                              | ~
	|two.txt======================= | ~
	|файл three.txt                 | ~
	|~                              | ~
	|three.txt===================== | ~
	|                               | ~
	+-------------------------------+ ~

Использование аргумента "-O" приводит к аналогичным результатам, но окна будут
расположены по вертикали. По команде ":all" в самом редакторе Vim, будут
открыты окна для каждого из заданных в списке аргументов файлов. По команде
":vertical all" делается то же самое, но с вертикальным расположением окон.

==============================================================================
*08.7*  Просмотр разночтений при помощи vimdiff

Существует специальный способ запуска программы Vim, при котором редактор
переключается в режим для наглядного отображения различий между двумя файлами.
Возьмём для примера файл «main.c» и добавим в одну из его строк несколько
символов. Теперь сохраним этот файл с включённым параметром 'backup', чтобы у
нас была также и предыдущая версия файла «main.c~». Наберите в командной
оболочке (не в программе Vim) следующую команду

>
	vimdiff main.c~ main.c
<

В редакторе Vim будет открыто два расположенных вертикально окна, в которых
отображаются указанные файлы. Из всего содержимого файлов будет показана
только строка, содержащая добавленные символы, плюс ещё несколько строк выше и
ниже этой строки.

	 VV                   VV
	+-----------------------------------------+
	|+ +--123 стр.: /* a |+ +--123 стр.: /* a |  <- свёрнутый блок текста
	|  текст             |  текст             |
	|  текст             |  текст             |
	|  текст             |  текст             |
	|  текст             |  изменённый текст  |  <- изменённая строка
	|  текст             |  текст             |
	|  текст             |  ------------------|  <- удалённая строка
	|  текст             |  текст             |
	|  текст             |  текст             |
	|  текст             |  текст             |
	|+ +--432 стр.: текст|+ +--432 стр.: текст|  <- свёрнутый блок текста
	|  ~                 |  ~                 |
	|  ~                 |  ~                 |
	|main.c~==============main.c==============|
	|                                         |
	+-----------------------------------------+

(Эта иллюстрация не отражает использование подсветки; попробуйте команду
vimdiff, чтобы увидеть результат её работы в самом лучшем виде)

Строки, которые повторяются в обоих файлах, были свёрнуты в одну строку,
которая называется «свёрнутым блоком» или «складкой». В данном примере это
закрытый блок. На иллюстрации блок отмечены текстом «<- свёрнутый блок текста».
Иными словами, строка со свёрнутым блоком вверху окна заменяет собой 123
строки текста, которые идентичны в обоих файлах.
    Строка, отмеченная на иллюстрации как «<- изменённая строка» выделяется
подсветкой, причём добавленный текст выделен другим цветом. Таким образом,
легко можно увидеть различия между файлами.
    Обратите внимание ни строку, отмеченную на иллюстрации текстом
«<- удалённая строка». В файле «main.c» она содержит символы «----», но в
действительности этих символов в файле нет, а в редакторе Vim используется
подобное заполнение, чтобы в обоих окнах было равное количество строк.


СТОЛБЕЦ ДЛЯ БЛОКА СВЁРНУТОГО ТЕКСТА

В левой части каждого окна имеется специальный столбец, цвет фона которого
должен несколько отличаться от цвета фона окна, на иллюстрации выше этот
столбец отмечен символами «VV». Обратите внимание, что в этом столбце,
напротив каждого закрытого блока имеется символ «+». Подведите к этому символу
курсор и нажмите левую кнопку «мыши» — блок развернётся и будет виден текст,
который в нём содержится.
    Теперь в столбце блока свёрнутого текста отображается символ «-»,
поскольку блок развёрнут. Если подвести курсор к этому символу «-» и нажать
левую кнопку «мыши», то блок будет свёрнут.
    Само собой, для этого требуется «мышь», но можно также использовать и
клавиатурные команды — по `zo` блок будет развёрнут, а по `zc` свёрнут.


СРАВНЕНИЕ ФАЙЛОВ В ПРОГРАММЕ VIM

Режим просмотра различий в файлах можно активировать и непосредственно из
самого редактора Vim. Отредактируйте файл «main.c», затем разделите окно с
включённым отображением различий:

>
	:edit main.c
	:vertical diffsplit main.c~
<

Команда ":vertical" используется для вертикального разделения окон. Если не
указывать ":vertical", то разделение экрана произойдёт по горизонтали.

Если имеется файл с исправлениями, также называемый diff-файлом, то можно
использовать ещё и третий способ перехода в режим сравнения. Для этого
откройте файл, к которому применяется исправление, а затем укажите редактору
Vim расположение и название файла с исправлениями:

>
	:edit main.c
	:vertical diffpatch main.c.diff
<

Внимание! Файл с исправлениями должен включать изменения только для того
файла, который открыт в данный момент. В противном случае можно получить массу
сообщений об ошибках и могут быть непредвиденные изменения некоторых файлов.
Данные изменения будут применены только к копии файла созданной редактором Vim
при открытии его на редактирование. Сам же файл на жёстком диске не будет
содержать этих исправлений до тех пор, пока не будет выполнена команда записи.


СИНХРОНИЗАЦИЯ ПРОКРУТКИ ТЕКСТА

Если в файлах содержится несколько изменений, то можно использовать прокрутку
текста в окне. В редакторе Vim будет выполняться синхронизация прокрутки в
обоих окнах, чтобы наглядно сравнивать имеющиеся различия. Если по каким-либо
причинам требуется временно отключить такое поведение, то используйте команду

>
	:set noscrollbind
<


ПЕРЕХОД К РАЗЛИЧАЮЩИМСЯ СТРОКАМ

В том случае, если блоки текста с совпадающим текстом развёрнуты, то может
быть сложно найти место в файле, где содержатся различия. Для быстрого
перехода к позиции следующих различий в файлах, воспользуйтесь командой

>
	]c
<

Или, для перемещения в обратном направлении — 

>
	[c
<

Кроме того, можно пользоваться числом-приставкой для перемещения сразу на
несколько позиций.


УСТРАНЕНИЕ РАЗЛИЧИЙ

Для устранения различий между файлами можно переносить текст из одного окна в
другое, убирая различающиеся строки, или, наоборот, внося новые. Редактор Vim
не во всех случаях отображает подсветку в соответствии с текущим состоянием.
Чтобы обновить подсветку различий после внесения изменений, используйте
команду

>
	:diffupdate
<

Текст можно свободно перемещать между окнами с различающимися файлами. Возьмём
предыдущий пример с файлами «main.c» и «main.c~». Переместите каретку в левом
окне к строке, которая была удалена в правом окне и введите команду

>
	dp
<

Теперь различие между файлами исчезло, потому что текст из текущего окна был
вставлен в соседнее окно. Команда `dp` это сокращение от «diff put» (передать
несовпадающие строки). Также можно провести и обратную операцию. Подведите
каретку в правом окне к изменённой строке и введите команду

>
	do
<

Теперь различие будет устранено, поскольку мы заменили отличающийся фрагмент
фрагментом из другого окна. Команда `do` это сокращение от «diff obtain»
(получить несовпадающие строки), наверное, для этой операции было бы лучшее
название команды "dg" (diff get), но на него уже назначена совсем другая
операция (по команде `dgg` выполняется удаление текста от текущей позиции
каретки до первой строки в файле). Обратите внимание, что поскольку между
файлами больше не осталось различий, то весь текст в обоих окнах помещается в
один большой свёрнутый блок.

Дополнительную информацию о режиме сравнения различий см. |vimdiff|.

==============================================================================
*08.8*  Дополнительно

Параметр 'laststatus' может использоваться для указания, в каких случаях в
единственном открытом окне отображается строка состояния:

	0	никогда
	1	только если экран разделён на несколько окон (по умолчанию)
	2	всегда

Многие команды, которые вызывают переход к редактированию другого файла, имеют
соответствующую команду, выполняющую разделению окон. Для команд режима
командной строки таки команды начинаются с приставки «s». Например, по команде
":tag" выполняется быстрый переход по индексу, а по команде ":stag" создание
нового окна и переход по индексу в новом окне. Для режима команд используется
команда CTRL-W перед набором требуемой команды. Так, CTRL-^ вызывает переход к
соседнему файлу из списка аргументов, то при такой последовательности команд
CTRL-W CTRL-^, создаётся новое окно и открывается соседний файл в этом
созданном окне.

При установленном параметре 'splitbelow' создание новых окон будет выполнятся
ниже текущего окна, а параметр 'splitright' указывает создавать новые окна, при
вертикальном расположении, справа от текущего окна.

Кроме того, при создании окна можно добавить команду-модификатор для указания,
где должно располагается новое окно:

	:leftabove {команда}    левее или выше от текущего окна;
	:aboveleft {команда}    то же;
	:rightbelow {команда}   правее или ниже от текущего окна;
	:belowright {команда}   то же;
	:topleft {команда}      вверху или слева в рабочей области редактора;
	:botright {команда}     внизу или справа в рабочей области редактора.

==============================================================================
*08.9* Вкладки

Как можно заметить, каждое создаваемое окно не перекрывает соседнее окно, а
располагается рядом с ними. При активной работе с окнами, свободное
пространство на экране в таком случае быстро заканчивается и использование,
как новых, так и имеющихся окон становится просто не удобным. И решением в
этой ситуации является одна удобная вещь, называемая вкладки.

Предположим, что необходимо отредактировать файл с названием «тот_файл». Чтобы
открыть его в новой вкладке на редактирование, используйте команду

>
	:tabedit тот_файл
<

По этой команде будет открыт на редактирование файл с названием «тот_файл» в
новом окне, занимающем всю рабочую область редактора Vim. В верхней части
будет отображаться панель с названиями двух файлов открытых в редакторе.

	+--------------------------------------+
	| этот_файл | /тот_файл/ _____________X| (название тот_файл выделено)
	|/* тот файл */                        |
	|тот                                   |
	|тот                                   |
	|~                                     |
	|~                                     |
	|~                                     |
	|                                      |
	+--------------------------------------+

Теперь есть две вкладки, где первая связана с окном файла «этот_файл», а
вторая с окном файла «тот_файл». Это похоже на два листа, лежащих один над
другим, с приклеенными ярлычками на которых написано название файлов.

Если установить указатель «мыши» на названии «этот_файл» и нажать левую кнопку
«мыши», то результат будет следующим:

	+--------------------------------------+
	| /этот_файл/ | тот_файл _____________X| (название этот_файл выделено)
	|/* этот файл */                       |
	|этот                                  |
	|этот                                  |
	|~                                     |
	|~                                     |
	|~                                     |
	|                                      |
	+--------------------------------------+

Щёлкая указателем «мыши» на названиях файлов в верхней панели можно
переключать вкладки. Если «мышь» отсутствует или вы понимаете, что правильней
пользоваться клавиатурой, то используйте команду `gt` («gt» это сокращение от
английского Goto Tab (перейти к вкладке)).

Теперь создадим ещё одну вкладку, для этого воспользуйтесь командой

>
	:tab split
<

По этой команде будет создана новая вкладка с одним окном, в котором будет
открыт тот же самый буфер, который был в изначальном окне.

	+--------------------------------------+
	| этот_файл | /этот_файл/ | тот_файл _X| (название этот_файл выделено)
	|/* этот файл */                       |
	|этот                                  |
	|этот                                  |
	|~                                     |
	|~                                     |
	|~                                     |
	|                                      |
	+--------------------------------------+

Команду ":tab" можно указывать в командной строке перед любой командой,
создающей новое окно, в этом случае окно будет создано в новой вкладке. Ещё
один пример,

>
	:tab help gt
<

Теперь справка по команде `gt` будет отображена в новой вкладке.

Вот ещё несколько приёмов, которые можно применять при работе с вкладками:

- Щёлкните указателем «мыши» на свободном месте панели вкладок после
  последнего названия файла и будет показано содержание следующей вкладки, как
  будто была выполнена команда `gt`.

- Щёлкните указателем «мыши» на значке «X» в правом углу панели вкладок и
  текущая вкладка будет закрыта. Если конечно нет несохранённых данных.

- Дважды щёлкните указателем «мыши» на свободном месте панели вкладок и будет
  создана новая пустая вкладка.

- Команда ":tabonly" закроет все вкладки за исключением текущей. Если конечно
  в них нет несохранённых данных.

Дополнительную информацию о вкладках см. в параграфе |tab-page|.

===============================================================================

Следующая глава: |usr_09.txt|  Графический интерфейс программы
Авторские права: см. |manual-copyright|
© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

vim:tw=78:ts=8:noet:ft=help:norl:
