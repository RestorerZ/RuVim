*usr_21.txt*	       для Vim version 9.0	      редакция от 25 апр 2019

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		  Быстрое возобновление работы с редактором Vim


Эта глава рассказывает об использовании редактора Vim совместно с другими
программами, в частности о запуске программ напрямую из редактора Vim, а также
о временном выходе из редактора для выполнения требуемых команд в командной
оболочке. Кроме того, в этой главе рассказывается о различных методах
сохранения состояния редактора перед выходом и последующего восстановления
состояний при запуске программы.

|21.1|  Приостановка и возобновление работы
|21.2|  Выполнение команд командной оболочки
|21.3|  Сохранение информации о редактировании. Файл viminfo
|21.4|  Сеансы
|21.5|  Представления
|21.6|  Режимная строка

 Следующая глава: |usr_22.txt|  Обнаружение требуемого файла для редактирования
Предыдущая глава: |usr_20.txt|  Удобная работа с командной строкой
      Содержание: |usr_toc.txt|

==============================================================================
*21.1*  Приостановка и возобновление работы

Как и для большинства программ в UNIX-подобных системах, работа редактора Vim
может быть временно прервана по команде CTRL-Z. При этом будет выполнен
возврат обратно в оболочку, откуда запускался редактор. Теперь можно выполнять
любые системные команды, пока не надоест, а затем вернуться в обожаемый
редактор с помощью команды "fg". Пример.

>
	CTRL-Z
	{любая последовательность команд оболочки}
	fg
<

Как видите, за это время в редакторе Vim ничего не изменилось, всё осталось
так, как было. Если по команде CTRL-Z это не работает, то используйте команду
":suspend". Только не забудьте вернуть редактор Vim назад в активное
состояние, иначе рискуете потерять сделанные ранее изменения!

Поддержка этой возможности есть только в UNIX-подобных системах. В других же
системах будет просто вызвана командная оболочка из редактора Vim, в которой
также можно выполнять требуемые команды. Однако это будет новая командная
оболочка, а не та, из которой была запущена программа Vim. Если работа
выполняется в графическом интерфейсе программы Vim, то возврат в командную
оболочку, из которой был запущен редактор, не будет выполнен. Вместо этого по
команде CTRL-Z будет свёрнуто окно, в котором выполняется программа.

==============================================================================
*21.2*  Выполнение команд командной оболочки

Для выполнения одной команды командной оболочки прямо из редактора Vim,
используйте оператор ":!{команда}". Например, чтобы посмотреть содержимое
каталога

>
	:!ls
<
или
>
	:!dir
<

Первый пример для UNIX-подобных систем, второй — для систем MS Windows. Будет
выполнена программа и после её вывода отображено приглашение нажать клавишу
<ENTER>. Это позволяет просмотреть вывод программы перед возвращением к
редактированию текста. Команда `!` (восклицательный знак) может использоваться
в различных комбинациях, когда требуется запуск внешней программы. Вот краткий
обзор имеющихся возможностей:

	:!{программа}		    Выполнить {программу}.
	:r !{программа}		    Выполнить {программу} и вставить результат
					выполнения в текст.
	:w !{программа}		    Выполнить {программу}, передав ей на вход
					текст из редактора.
	:[диапазон]!{программа}	    Обработать текст в {программе}.

Обратите внимание, что указание диапазона перед "!{программа}" существенно
влияет на результат. Если диапазон не указан, программа просто выполняется в
обычном порядке, а при указании диапазона, входящий в него текст будет
обработан во внешней программе.

Таким способом можно выполнять множество программ. Но конечно, командная
оболочка гораздо лучше справляется с этой задачей. Для запуска новой командной
оболочки используйте команду

>
	:shell
<

Это похоже на использование команды CTRL-Z для временной приостановки
программы Vim. Разница лишь в том, что в данном случае запускается новая
командная оболочка.

При работе в графическом интерфейсе, внешняя программа будет пользоваться для
ввода и вывода окном, в котором запущен редактор Vim. Поскольку программа Vim
не является эмулятором терминала, то могут возникнуть сложности. Обратите
внимание на параметр 'guipty', с помощью которого можно попробовать справиться
с такими ситуациями. Если и это не помогает, то запустите оболочку в новом
окне терминала. Например, так:

>
	:!xterm&
<

==============================================================================
*21.3*  Сохранение информации о редактировании. Файл viminfo

В процессе редактирования собирается целая коллекция полезных вещей:
сохранённый в регистрах текст, установленные в различных файлах закладки,
журнал командной строки с искусно созданными командами, и при выходе из
редактора Vim всё это оказывается утраченным. Но вы можете вернуть эту
информацию обратно!

Файл viminfo придуман для того, чтобы сохранить информацию о состоянии
следующих компонентах редактора:

	журнал командной строки и шаблонов поиска;
	текст в регистрах;
	закладки в различных файлах;
	список буферов;
	общие переменные.

Всякий раз, когда завершается работа с редактором, вся эта информация
сохраняется в файл viminfo. При следующем запуске редактора Vim, файл viminfo
считывается, и информация восстанавливается.

В параметре 'viminfo' по умолчанию задан довольно ограниченный набор
восстанавливаемой информации, но можно настроить редактор Vim на сохранение
намного большего объёма. Это делается следующей командой

>
	:set viminfo=строка
<

Здесь «строка» определяет то, что надо сохранять. Синтаксис этой строки
следующий: символ флага, за которым следует аргумент. Пары флаг-аргумент
разделяются запятыми. Попробуем задать свою строку для параметра 'viminfo'.
Во-первых, флаг ''' (прямая одиночная кавычка) служит для указания количества
файлов, для которых необходимо сохранять закладки (a-z). Выберите для значения
этого флага какое-нибудь круглое число, например 1000. Теперь команда выглядит
так:

>
	:set viminfo='1000
<

Флаг 'f' указывает на необходимость сохранения общих закладок (A-Z и 0-9).
Если его значение равно 0, то они не будут сохраняться. По умолчанию (если
флаг 'f' не указан) общие закладки сохраняются, можно также явно установить
его значение в 1. Поскольку нам это пригодится, включим этот флаг в нашу
команду:

>
	:set viminfo='1000,f1
<

Флаг '<' (знак меньше) указывает на количество строк, которое сохраняется для
каждого из регистров. Если его значение равно 0, то регистры вообще не
сохраняются. Чтобы избежать добавления тысяч строк в файл viminfo, ограничим
значение этого флага в 500 строк:

>
	:set viminfo='1000,f1,<500
<

Другие флаги, которые могут пригодиться:

	:	количество строк журнала командной строки;
	@	количество строк журнала строки ввода;
	/	количество строк журнала поисковых запросов;
	r	указание сменных носителей информации, для которых не будут
		 сохраняться закладки (флаг можно использовать несколько раз);
	!	общие переменные, начинающиеся с прописной буквы и не
		 содержащие строчных букв;
	h	сброс параметра подсветки 'hlsearch' при запуске;
	%	список буферов (восстанавливается только при запуске
		 редактора Vim без перечня файлов указанных как аргументы);
	c	перекодирование текста используя значение параметра 'encoding';
	n	название для файла viminfo (должен быть задан последним).

Дополнительную информацию см. здесь: параметр 'viminfo' и |файл_viminfo|.

Если работает нескольких экземпляров редактора Vim, только только при
завершении работы последнего их них, информация будет сохранена в файле
viminfo. По этой причине информация о правках в других экземплярах редактора
может быть потеряна. Каждый компонент информации может быть сохранён только
один раз.


ВОЗВРАТ К ПОЗИЦИИ В ФАЙЛЕ НА МОМЕНТ ЗАВЕРШЕНИЯ РАБОТЫ

Представьте, что уходите в отпуск и отложили все дела, в том числе правку в
редакторе какого-нибудь файла где-то посередине него. А спустя пару недель,
запустив редактор Vim, вводите команду

>
	'0
<

и оказываетесь в том самом месте, на котором закончили редактирование!
    Дело в том, что всякий раз при выходе из редактора автоматически создаётся
и сохраняется закладка. И эта завершающая закладка именуется как '0. При этом
значение той позиции, на которую указывала предыдущая закладка '0 переносится
в закладку '1, из закладки '1 переносится в значение закладки '2 и т. д.
Значение позиции из закладки '9 теряется.
    Для получения представления о том, на что указывают закладки с '0 по '9,
используйте команду ":marks".


ВОЗВРАТ К КАКОМУ-НИБУДЬ ПРЕЖНЕМУ ФАЙЛУ

Допустим, что необходимо вернуться к одному из когда-то редактируемых файлов,
но при этом останавливать или завершать работу с редактором Vim совсем не
хочется. Есть способ сделать это в пару шагов. Чтобы просмотреть список таких
файлов, наберите команду

>
	:oldfiles
<

    1: ~/.viminfo ~
    2: ~/text/resume.txt ~
    3: /tmp/draft ~

Теперь видно файл, который требовался и в списке он идёт, например, под
номером два. Далее вводим такую команду

>
	:e #<2
<

Вместо команды ":e" можно использовать любую другую команду, которая принимает
в качестве аргумента название файла. В данном случае аргумент "#<2" работает
аналогично таким специальным символам, как "%" (текущий файл) и "#" (соседний
файл). Таким же образом можно разделить окно для редактирования третьего файла

>
	:split #<3
<

В случае же когда номер файла переваливает за сотню, то дело немного
усложняется, если нужно просто отредактировать файл. К счастью есть более
удобный способ просмотреть перечень файлов

>
	:browse oldfiles
<

    1: ~/.viminfo ~
    2: ~/text/resume.txt ~
    3: /tmp/draft ~
    -- Далее --

Будет получен такой же список файлов, как и по команде ":oldfiles". Если
требуется отредактировать, например, файл «resume.txt», то сначала нажмите
клавишу "q", чтобы остановить дальнейший вывод списка. Будет выведен запрос:

    Введите номер и нажмите клавишу <ENTER> (если не указан, отмена): ~

В ответ наберите цифру 2 и нажмите клавишу <ENTER> для редактирования второго
файла.

Дополнительную информацию см. здесь: |:oldfiles|, |v:oldfiles| и |c_#<|.


ПЕРЕНОС ИНФОРМАЦИИ ИЗ ОДНОГО РЕДАКТОРА VIM В ДРУГОЙ

Команды ":wviminfo" и ":rviminfo" можно использовать для сохранения и
восстановления информации на лету. Это может быть полезно для обмена
содержимым регистров между двумя экземплярами редактора Vim. Наберите в первом
запущенном редакторе

>
	:wviminfo! ~/tmp/viminfo
<

Теперь, во втором редакторе Vim наберите

>
	:rviminfo! ~/tmp/viminfo
<

Конечно же, буква «w» в этой команде означает «write» (записать), а «r» —
«read» (считать).
    Модификатор ! используется в команде ":wviminfo" для того, чтобы
принудительно перезаписать существующий файл. Если модификатор ! не указан, и
файл уже существует, то в него будет занесена лишь та информация, которая до
этого отсутствовала.
    В команде ":rviminfo" модификатор ! используется для указания на то, что
нужно считать в редактор Vim всю информацию, содержащуюся в файле, даже если
это приведёт к потере уже существующей информации. Без модификатора ! будет
считана только отсутствующая информация.
    Эти же команды можно использовать и для сохранения информации о состоянии
редактора для последующего использования. Можно создать специальный каталог
для сохранения файлов viminfo на все случаи жизни.

==============================================================================
*21.4*  Сеансы

Предположим, что необходимо срочно куда-то уйти, но на следующий день
требуется продолжить работу в том же самом состоянии редактора, что и было.
Для этого существует возможность сохранения и восстановления сеансов
редактирования.
    Сохранённые сеансы работы с программой содержат всю информацию о том, что
редактируется. Сюда входят сведения о перечне файлов, расположении окон в
редакторе, глобальных переменных, значениях параметров и прочие данные
(что именно должно сохраняться, контролируется параметром 'sessionoptions',
который описан далее).
    Сохранение сеанса выполняется по следующей команде

>
	:mksession vimbook.vim
<

Для последующего восстановления сеанса, воспользуйтесь командой

>
	:source vimbook.vim
<

Чтобы восстановление сеанса происходило при запуске программы Vim, используйте
аргумент команды запуска -S

>
	vim -S vimbook.vim
<

Таким образом, даётся указание редактору Vim, что при запуске необходимо
считать заданный файл. Название аргумента «S» означает «session» («сеанс»). В
действительности, с помощью этого аргумента при запуске программы можно
считать любой командный файл Vim, так что «S» можно понимать и как «source» (в
данном контексте — «командный»).

Открытые при сохранении сеанса окна будут восстановлены с тем же расположением
и с теми же размерами, как и ранее. То же касается и значений параметров и
клавиатурных составных команд.
    Посредством параметра 'sessionoptions' указываетя какая информации о
сеансе сохраняется. Значение по умолчанию данного параметра следующее:

"blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal".

Где:
	blank		сохранять пустые окна;
	buffers		все буферы, а не только те, которые показаны в окнах;
	curdir		маршрут текущего рабочего каталога;
	folds		блоки свёрнутого текста, в том числе и вручную;
	help		окно справки;
	options		все параметры и составные клавиатурные команды;
	tabpages	все вкладки;
	winsize		размеры окон;
	terminal	окна термина, открытые внутри рабочей области программы.

Можно изменять этот перечень флагов по своему усмотрению. Для сохранения и
восстановления размера окна программы Vim, используйте команду

>
	:set sessionoptions+=resize
<


СЕАНС ЗДЕСЬ, СЕАНС ТАМ

Очевидный способ использования сохранённых сеансов — работа над различными
проектами. Предположим, файлы сеансов хранятся в каталоге "~/.vim". В данный
момент работа идёт над «секретным» проектом, но необходимо переключиться на
«скучный» проект. Пример.

>
	:wall :mksession! ~/.vim/секрет.vim
	:source ~/.vim/скука.vim
<

В приведённом выше примере вначале сохраняются все существующие изменения во
всех окнах по команде ":wall". Затем сохраняется текущий сеанс по команде
":mksession!", с заменой файла предыдущего сеанса. В следующий раз можно будет
продолжить с того места, в котором был сохранён «секретный» проект. И далее,
загружается «скучный» проект.

Если было открыто множество различных окон и раскрой рабочей области
перевернут вверх дном, то можно вернуться к предыдущему сохранённому сеансу

>
	:source ~/.vim/boring.vim
<

Таким образом, всегда есть полный контроль с какого момента продолжить в
следующий раз — от последнего состояния редактора, каждый раз сохраняя файл
сеанса в текущей точке, или от первоначально сохранённого состояния
записанного в файле сеанса. Другой способ использования сеансов — создание
такого расположения окон, которое хотелось бы использовать и в дальнейшем. Нет
ничего проще — сохраните его в виде сеанса и тогда сможете вернуться к этому
раскрою в любой момент. Вот пример раскроя, которым можно пользоваться:

	+----------------------------------------+
	|           VIM - основной файл справки  |
	|                                        |
	|Перемещение:  используйте клавиши курсор|
	|help.txt ===============================|
	|навигатор  |                            |
	|каталог    |~                           |
	|каталог    |~                           |
	|файл       |~                           |
	|файл       |~                           |
	|файл       |~                           |
	|файл       |~                           |
	|~/=========|[Нет файла]=================|
	|                                        |
	+----------------------------------------+

Здесь имеем следующие окна: окно справки сверху, навигатор по файловой системе
в узком окне слева (это на самом деле модуль редактора Vim, подробнее об этом
в следующей главе), в котором отображается содержимое каталога, и основное
окно справа. В только что запущенном редакторе Vim такой раскрой создать можно
так:

>
	:help
	CTRL-W w
	:vertical split ~/
<

Измените размер окон по своему усмотрению и затем сохраните сеанс при помощи
команды

>
	:mksession ~/.vim/mine.vim
<

Для того чтобы запустить редактор с этим раскроем окон, выполните команду

>
	vim -S ~/.vim/mine.vim
<

Совет.
Чтобы открыть файл из окна навигатора в пустом окне, подведите каретку к
названию файла и нажмите клавишу "O". Та же операция может быть выполнена и с
помощью двойного нажатия левой кнопки «мыши».


СИСТЕМЫ UNIX И MS WINDOWS

Некоторым людям приходится постоянно менять платформу и работать то в системе
MS Windows, то в UNIX-подобных системах. Если это относится и к вам, то
подумайте о добавлении флагов 'slash' и 'unix' в параметре 'sessionoptions'. В
этом случае сеансы будут записываться в формате, который можно будет
использовать в обеих системах. Вот команда, которую можно поместить прямо в
файл vimrc

>
	:set sessionoptions+=unix,slash
<

В редакторе Vim в этом случае будет использоваться формат UNIX-подобных
систем, поскольку в системе MS Windows редактор способен читать и записывать
файлы в формате UNIX, но в UNIX-подобных системах редактор Vim неспособен
читать файлы сеансов в формате MS Windows. Аналогично, в системе MS Windows
программа распознаёт разделители в виде прямой наклонной черты (/) для
маршрутов к файлам, но в UNIX-подобных системах, редактором не распознаются
разделители в виде обратной наклонной черты (\) для маршрутов к файлам.


ФАЙЛЫ СЕАНСА И ФАЙЛЫ VIMINFO

В файлах сеанса можно сохранять множество элементов, но в этот список не
входят расположение закладок в файле, содержимое регистров и журнал командной
строки. Для этих компонентов используются файлы viminfo. В большинстве
ситуаций потребуется пользоваться сеансами и viminfo независимо друг от друга.
Например, может потребоваться переключиться в другой сеанс, но при этом
сохранить журнал командной строки. Или, например, скопировать текст в регистры
в одном сеансе и вставить его в другом. Однако никто не мешает вручную
сохранять файлы viminfo вместе с файлами сеансов. Пример.

>
	:mksession! ~/.vim/secret.vim
	:wviminfo! ~/.vim/secret.viminfo
<

А для восстановления введите

>
	:source ~/.vim/secret.vim
	:rviminfo! ~/.vim/secret.viminfo
<

==============================================================================
*21.5*  Представления

В файлах сеанса сохраняется информация о состоянии редактора в целом. Если
необходимо сохранить настройки только для одного окна, то можно использовать
представление.
    Представление можно использовать в тех случаях, когда для редактирования
файла необходимы специфические настройки. Например, включены номера строк
посредством параметра 'number' и несколько блоков текста должно быть свёрнуто.
Точно так же, как и в случае с сеансами, можно сохранить представление файла в
рабочей области редактора Vim и восстановить его позднее. Более того, файл
сеанса это, в том числе, сохранённые вида каждого окна.
    Существует два способа пользоваться представлениями. При первом способе
обязанности по выбору названия представления для данного файла возлагаются на
редактор Vim. Когда позднее будет редактироваться этот же файл, то
представление можно будет восстановить в том состоянии, в котором оно было при
записи. Чтобы сохранить представление для текущего окна, введите

>
	:mkview
<

Редактором автоматически определяется, где и с каким названием будет сохранён
файл представления. Когда позднее будет редактироваться тот же самый файл,
можно будет загрузить представление при помощи следующей команды

>
	:loadview
<

Всё очень просто, не правда ли?
    Теперь при правке текста потребовалось, чтобы вид файла был без нумерации
строк, или без свёрнутых блоков текста, тогда установите все параметры окна
так, как требуется, и сохраните представление с помощью команды

>
	:mkview 1
<

Для загрузки этого представления нужно будет набрать команду

>
	:loadview 1
<

Между двумя представлениями файла можно переключаться, используя команду
":loadview" без аргумента и с аргументом 1, соответственно. Для одного файла
можно сохранить до 10 представлений, одно без номера и девять с номерами от 1
до 9.


ИМЕНОВАННЫЕ ПРЕДСТАВЛЕНИЯ

Второй способ сохранения представлений требует указания названия файла для
представления. В этом случае при редактировании совершенно другого файла можно
загрузить сохранённое представление и редактором Vim будет открыт файл,
связанный с этим представление со всеми сохранёнными настройками. Таким
образом, можно быстро переключаться между разными файлами для правки в уже
настроенном виде.
    Например, для сохранения представления текущего файла используйте команду

>
	:mkview ~/.vim/main.vim
<

Восстановить сохранённое таким способом представление можно командой

>
	:source ~/.vim/main.vim
<

==============================================================================
*21.6*  Режимная строка

При редактировании какого-нибудь определённого файла может потребоваться
установить некоторые параметры, специфичные именно для этого файла. Набирать
каждый раз требуемые команды может быть утомительно, а использование сеанса
или представления для редактирования этого файла не подходит в тех случаях,
когда файл используется совместно с другими людьми.
    Решением в данной ситуации может быть добавление в файл режимной строки.
Через режимную строку редактору указываются значения параметров, которые
должны использоваться только в этом файле.
    Типичным примером является исходный текст программы на языке Си, где
отступы форматируются таким образом, что они кратны четвёрке. Для этого
требуется, чтобы значение параметра 'shiftwidth' было равно 4. Такую настройку
можно выполнить при помощи режимной строки. Пример.

    /* vim:set shiftwidth=4: */ ~

Эту строку надо разместить в первых или последних пяти строках файла. При
последующей правке этого файла, значение параметра 'shiftwidth' будет
автоматически установлено равным четырём. А при редактировании другого файла,
значение параметра будет возвращено в значение по умолчанию равное восьми.
    В некоторых файлах режимная строка вполне уместна в заголовке файла, и
тогда её можно поместить ближе к началу. Для текстовых файлов, где режимная
строка мешает восприятию текста, её лучше разместить ближе к концу файла.

Через параметр 'modelines' определяют, сколько строк в начале и конце файла
просматривается на предмет наличия режимной строки. Чтобы проверялось 10
строк, введите

>
	:set modelines=10
<

Параметр 'modeline' может использоваться для отключения режимной строки. Если
в UNIX-подобных системах работа выполняется от имени пользователя root или в
системах MS Windows как Администратор, или нет доверия к файлам, которые
открываются в редакторе, то введите команду

>
	:set nomodeline
<

Для режимной строки используется следующий формат:

    любой текст vim:set {параметр}={значение} ... : любой текст ~

Здесь «любой текст» означает, что перед и после фрагмента строки, который
обрабатывается редактором Vim, может находиться любой текст. Благодаря этому
режимная строка может выглядеть как комментарий в тексте программы, что и было
показано в примере выше.
    В редакторе Vim распознавание режимной строки выполняется по сигнатуре
" vim:". Перед словом «vim» должен быть пробельный символ, либо слово «vim»
должно быть в начале строки. Использование чего-либо вроде "gvim:" работать не
будет.
    Между двоеточиями находится команда ":set". Команда работает точно так же,
как если бы было набрано :set в командной строке, за исключением того момента,
что перед знаком двоеточия в значениях параметров необходимо вставлять символ
обратной наклонной черты, т. е. экранировать, иначе дальнейший текст будет
восприниматься как не относящийся к режимной строке.

Ещё один пример

    // vim:set textwidth=72 dir=c\:\tmp:  use c:\tmp here ~

Здесь перед двоеточием в значении параметра 'dir' добавлена обратная наклонная
черта, поэтому последующий текст входит в установки команды ":set". Весь
дальнейший текст после двоеточия без экранирования игнорируется, поэтому там
разместилось содержание комментария.

Подробнее см. |режимная_строка|.

==============================================================================

Следующая глава: |usr_22.txt|  Обнаружение требуемого файла для редактирования
Авторские права: см. |авторские_права_на_документацию|
Перевод на русский язык: © Restorer, 2017—2022, restorer@mail2k.ru

vim:tw=78:ts=8:noet:ft=help:norl:
