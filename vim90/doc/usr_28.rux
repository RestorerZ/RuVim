*usr_28.txt*	       для Vim version 9.0	     редакция от 14 июня 2008

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

			   Структурирование текста


Структурированный текст можно разделить на логические блоки или сегменты, а
эти сегменты могут включать в себя вложенные блоки текста. Структурирование
текста позволяет отображать целые блоки текста как одну строку, давая
возможность для общего обзора документа. Эта глава рассказывает о различных
способах, которыми можно достичь такого эффекта.

|28.1|  Что означает «свёртывание текста»?
|28.2|  Создание блоков структуры вручную
|28.3|  Работа со свёрнутым текстом
|28.4|  Сохранение и восстановление состояния блоков структуры
|28.5|  Создание блоков структуры на основе отступов в тексте
|28.6|  Создание блоков структуры на основе маркеров
|28.7|  Создание блоков структуры на основе синтаксических правил
|28.8|  Создание блоков структуры на основе вычисленных условий
|28.9|  Создание блоков структуры на основе постоянных строк
|28.10| Какой метод создания блоков структуры использовать?

 Следующая глава: |usr_29.txt|  Навигация по программному коду
Предыдущая глава: |usr_27.txt|  Шаблоны и команды поиска
Содержание: |usr_toc.txt|

==============================================================================
*28.1*  Что означает «свёртывание текста»?

Свёртывание текста используется для отображения нескольких строк в буфере в
виде одной строки. Это похоже на лист бумаги, который можно сложить, чтобы
сделать его короче:

	+------------------------+
	| строка 1		 |
	| строка 2		 |
	| строка 3		 |
	|_______________________ |
	\			 \
	 \________________________\
	 / свёрнутые строки	  /
	/________________________/
	| строка 12		 |
	| строка 13		 |
	| строка 14		 |
	+------------------------+

Текст по-прежнему находится в буфере без изменений. Свёртка влияет только на
способ отображения текста.

Преимущество использования свёртывания текста состоит в том, что можно увидеть
общую структуру текста с первого взгляда на экран.

==============================================================================
*28.2*  Создание блоков структуры вручную

Попробуем создать блок структуры текст. Поместите каретку где-нибудь в абзаце
текста и наберите

>
	zfap
<

Вы увидите, что текст абзаца будет заменён подсвеченной строкой. В результате
этого действия был создан блок структуры текста с одновременным свёртыванием
его в одну строку. В этом примере |zf| это оператор создания блока структуры,
а |ap| это указание на текстовый объект, в данном случае абзац. Оператор `zf`
можно использовать с любыми командами перемещения, при этом в блок структуры
будет помещаться текст, над которым переместилась каретка. Оператор `zf` будет
работать также и в визуальном режиме.

Для просмотра свёрнутого блока структуры, разверните его с помощью команды

>
	zo
<

Чтобы свернуть текст в созданном блоке, используйте команду

>
	zc
<

Все команды, работающие с блоками структуры текста, начинаются с буквы "z".
Свёрнутые блоки и в самом деле напоминают лист бумаги, сложенный гармошкой, а
некоторые фрагменты текста заложены таким образом, что текст оказывается
спрятанным. Буква после команды `z` подобраны так, чтобы облегчить запоминание
команды:

	zf      создать блок (F-old creation);
	zo      развернуть блок (O-pen a fold);
	zc      свернуть блок   (C-lose a fold).

Блок структуры текста может быть создан в другом блоке структуры текста. Иными
словами, область текста, в которой имеется сегмент структуры, может также быть
помещена в блок структуры текста. Например, можно свернуть все абзацы в этом
параграфе, а затем свернуть все параграфы этой главы. Попробуйте. Обратите
внимание, что разворачивая блок структуры всей главы, текст восстанавливается
в прежнем состоянии: некоторые внутренние блоки структуры будут в открытом
состоянии, а некоторые в закрытом.

Предположим, что несколько участков текста было свёрнуто, и теперь необходимо
просмотреть текст, который в них находится. Вместо того чтобы вводить команду
`zo` для каждого свёрнутого блока текста, можно использовать команду

>
	zr
<

По этой команде будут раскрыты блоки относительно текущему состоянию имеющихся
областей свёрнутого текста, т. е. общее количество свёрнутых областей текста
уменьшится (R-educe). Её противоположность — команда

>
	zm
<

По этой команде будут закрыты блоки нижнего уровня относительно текущему
состоянию имеющихся областей свёрнутого текста, т. е. общее количество
свёрнутых областей текста увеличится (M-ore). Для разворачивания или
сворачивания вложенных блоков на разных уровнях можно повторять команды `zr`
или `zm`.

Чтобы развернуть все свёрнутые блоки структуры текста на всех уровнях,
используйте команду

>
	zR
<

По этой команде будут развёрнуты все имеющиеся свёрнутые области текста, т. е.
количество закрытых блоков будет уменьшено до нуля. Чтобы свернуть все
имеющиеся блоки, используйте команду

>
	zM
<

Быстро убрать определённые в документе блоки структуры можно по команде |zn|.
По команде |zN| восстанавливаются все созданные блоки структуры. По команде
|zi| выполняется переключение между этими двумя представлениями. Вот примерный
способ работы с документом, которым можно пользоваться:
— создайте необходимую структуру для получения общего представления о документе;
— переместите каретку к тому месту, где необходимо внести изменения;
— для перехода к тексту в свёрнутой области, используйте команду |zi|;
— для возвращения к общей структуре текста повторите команду |zi|.

Подробнее о блоках структуры, созданных вручную, смотрите документацию
|fold-manual|.

==============================================================================
*28.3*  Работа с блоками структуры документа

По командам `j` и `k` выполняется перемещение каретки над областями свёрнутого
текста так, как будто на этом месте находится одна пустая строка. Это
позволяет пропускать текст, который находится в свёрнутом состоянии.

Можно удалять, копировать и вставлять свёрнутые блоки текста так, как будто
это одна строка. Это может оказаться очень полезным, если необходимо,
например, перестроить порядок функций в исходном коде программы. Прежде всего,
убедитесь, что каждая область свёрнутого текста содержит одну функцию, выбрав
правильный способ создания блоков структуры при помощи параметра 'foldmethod'.
Затем, например, можно удалить весь текст определения функции в свёрнутом
блоке структуры по команде `dd`, далее переместить каретку в требуемую позицию
и вставить текст определения функции при помощи команды `p`. Если несколько
строк в функции выходят за границы свёрнутого текста, то можно воспользоваться
визуальным режимом:

— поместите каретку на первую строку, которую необходимо переместить;
— переключите редактор в визуальный режим по команде `V`;
— переместите каретку к последней строке, которую необходимо перенести;
— нажмите клавишу "d" для удаления выделенных строк;
— переместите каретку в нужное место, и выполните вставку удалённых раннее
  строк по команде `p`.

Иногда бывает трудно запомнить, где находятся те или иные области свёрнутого
текста. Помочь в этом случае может установка параметра 'foldcolumn'. Пример.

>
	:set foldcolumn=4
<

В левой части окна будет отображаться узкий столбец (в данном случае, шириной
4 символа), в котором будут отмечены созданные блоки структуры. Для
обозначения свёрнутого блока текста используется символ «+». В начале каждого
блока структуры с развёрнутой областью текста отображается символ «-» и на
всём протяжении этой области в информационном столбце отображается символ «|».

Чтобы развернуть свёрнутый блок структуры, можно нажать левую кнопку
манипулятора «мышь», предварительно установив указатель манипулятора на символ
«+» в информационном столбце структуры. Нажатие левой кнопки манипулятора при
установленном указателе «мыши» на символе «-» или «|» приведёт к сворачиванию
соответствующей области текста.

Чтобы развернуть все свёрнутые области текста, расположенные в строке под
кареткой, используйте команду |zO|.
Чтобы свернуть все области теста в созданных блоках структуры, расположенные в
строке под кареткой, используйте команду |zC|.
Чтобы убрать созданный блок структуры, расположенный в строке под кареткой,
используйте команду |zd|.
Чтобы убрать все созданные блоки структуры, расположенные в строке под
кареткой, используйте команду |zD|.

В режиме вставки, блок структуры, расположенный в позиции каретки, никогда не
закрывается. Это позволяет видеть, что было набрано внутри блока структуры.

Области свёрнутого текста разворачиваются автоматически при выполнении
переходов или при горизонтальном перемещении каретки. Например, по команде `0`
будет развёрнута область текста, находящаяся под кареткой (в том случае, если
в параметре 'foldopen' установлено значение "hor", что является значением по
умолчанию). Значения параметра 'foldopen' позволяют указать команды,
использование которых приводит к автоматическому разворачиванию свёрнутого
текста. Если необходимо, чтобы свёрнутый текст, находящийся под кареткой,
всегда автоматически разворачивался, то установите значение параметра
'foldopen' равным "all". Пример.

>
	:set foldopen=all
<

Внимание! В этом случае перемещение каретки на строку с закрытым блоком
структуры невозможно выполнить. Можно установить это значение временно, а
потом вернуть значения по умолчанию следующей командой

>
	:set foldopen&
<

Можно настроить автоматическое сворачивание текста при перемещении каретки за
пределы блока структуры

>
	:set foldclose=all
<

Эта установка автоматически применяет значение параметра 'foldlevel' ко всем
блокам структуры, кроме тех, в которых находится каретка. Попробуйте,
возможно, вам это понравится. Для изменения текущего уровня открытия вложенных
блоков структуры, используйте команды |zm| и |zr|.

Уровни вложенности свёрнутых областей текста локальны по отношению к текущему
окну. Это позволяет открыть для одного и того же буфера два окна и настроить в
каждом окне свои области свёрнутого текста.

==============================================================================
*28.4*  Сохранение и восстановление состояния блоков структуры

Если начать редактирование нового файла в окне, в котором уже имеется
загруженный файл, то для ранее открытого файла состояние свёрнутых и
развёрнутых областей текста будет утрачено и при возобновлении редактирования
этого файла все вручную свёрнутые или развёрнутые блоки структуры будут
возвращены в значение по умолчанию. Более того, если блоки структуры текста
были созданы вручную, то они вовсе исчезнут из буфера. Чтобы сохранить
информацию о структуре документа и состоянии блоков, используйте команду
|:mkview|

>
	:mkview
<

По этой команде сохраняются установки, которые оказывают влияние на
представление файла. Что именно сохраняется по этой команде, можно настроить с
помощью значений параметра 'viewoptions'.
Если позже вернутся к тому же самому файлу, то можно загрузить сохранённое
представление по команде

>
	:loadview
<

Для каждого файла можно сохранить до десяти представлений. Например, для
сохранения текущего вида в качестве третьего представления и загрузки второго
представления, используйте следующие команды:

>
	:mkview 3
	:loadview 2
<

Обратите внимание, что при вставке и удалении строк сохранённое представление
может оказаться неактуальными. Чтобы удалить сохранённые представления,
которые уже не актуальны, зайдите в каталог, в котором сохраняются
представления. Наименование этого каталога задаётся в параметре 'viewdir'.

==============================================================================
*28.5*  Создание блоков структуры на основе отступов в тексте

Создание вручную большого количества блоков структуры текста по команде |zf|
весьма трудозатратная операция. Если текст структурирован при помощи отступов,
то есть фрагменты текста, находящиеся на нижестоящем уровне, выделяются
большими отступами от края, то разумнее использовать метод создания блоков
структуры текста на основе отступов. При данном методе будут автоматически
созданы блоки структуры текста для строк с одинаковым уровнем отступов.
Строки, имеющие больший отступ будут помещены во вложенные блоки структуры
текста. Этот метод хорошо подходит для исходных текстов программ на многих
языках программирования.

Создание блоков структуры текста на основе отступов в тексте, задаётся
следующим значением параметра 'foldmethod':

>
	:set foldmethod=indent
<

Теперь можно использовать команды `zm` и `zr` для разворачивания и
сворачивания областей текста разного уровня. Приведём простой пример:

Это строка без отступа ~
    Это строка с одним отступом ~
	Это строка с двумя отступами ~
	Это строка с двумя отступами ~
    Это строка с одним отступом ~
Это строка без отступа ~
    Это строка с одним отступом ~
    Это строка с одним отступом ~

Обратите внимание, что соотношение между уровнем вложенности блока структуры
текста и величиной отступа зависит от значения параметра 'shiftwidth'. Каждый
отступ, равный количеству символов указанных в значении параметра
'shiftwidth', добавляет один уровень к глубине вложенности блока структуры
текста. Это также называется уровнем структуры.

При использовании команд `zr` и `zm` фактически изменяется текущее значение
параметра 'foldlevel'. Также можно менять его значение напрямую

>
	:set foldlevel=3
<

В данном случае такая установка будет означать, что все области текста с
отступами соответствующим трём значениям параметра 'shiftwidth' и более будут
свёрнуты. При значении параметра 'foldlevel' равном нулю, все блоки структуры
текста будут закрыты. По команде |zM| устанавливается значение параметра
'foldlevel' равным нулю, а противоположной по действию командой |zR|
устанавливается значение 'foldlevel' равное максимальной величине уровня
вложенности блоков структуры в данном файле.

Таким образом, существует два способа разворачивания и сворачивания областей
текста:

(А) При помощи установки уровня вложенности блоков структуры.
    Этот способ позволяет быстро просмотреть структуру текста, переместить
    каретку в требуемое место, и опять раскрыть блоки структуры.

(Б) При помощи команд |zo| и |zc|, используя их для открытия или закрытия
    отдельных блоков структуры.
    Этот способ позволяет открывать только действительно необходимые блоки
    структуры, независимо от состояния остальных блоков структуры.

Эти два способа можно совмещать, например, сначала можно свернуть большинство
областей текста, применив команду |zm| несколько раз, и затем открыть один из
блоков структуры по команде |zo|. Или развернув все области текста по команде
|zR| и потом свернув ненужные по команде |zc|.

При значении параметра 'foldmethod' равном "indent", создание блоков структуры
вручную не допускается, поскольку это будет входить в противоречие с
отношением между величиной отступа и уровнем вложенности блока.

Подробнее о блоках структуры, созданных на основе отступов, смотрите
документацию |fold-indent|.

==============================================================================
*28.6*  Создание блоков структуры на основе маркеров

Для создания блоков структуры текста можно использовать специальные маркеры,
которые задают начало и окончание блока структуры текста. Такие маркеры
позволяют точно контролировать строки, которые будут включены в блок структуры
текста. Однако недостатком этого способа является то, что эти маркеры должны
быть вставлены непосредственно в текст.

Установите следующее значение параметра 'foldmethod':

>
	:set foldmethod=marker
<

Пример текста, использующий маркеры для создания блоков структуры текста

    /* foobar () {{{ */ ~
    int foobar() ~
    { ~
	/* return a value {{{ */ ~
	return 42; ~
	/* }}} */ ~
    } ~
    /* }}} */ ~

Заметьте, что свёрнутая строка будет отображать текст, находящийся перед
маркером. Это очень удобно для быстрого определения содержимого свёрнутой
области текста.

При перемещении строк с одного места на другое, может получиться так, что
маркеры не будут соответствовать друг другу правильно. Избежать этой
неприятной ситуации можно с помощью нумерованных маркеров

    /* global variables {{{1 */ ~
    int varA, varB; ~

    /* functions {{{1 */ ~
    /* funcA() {{{2 */ ~
    void funcA() {} ~

    /* funcB() {{{2 */ ~
    void funcB() {} ~
    /* }}}1 */ ~

Каждый нумерованный маркер является начальной позицией блока структуры
соответствующего уровня вложенности. Этот же маркер также неявно является
окончанием блока структуры более высокого уровня. В принципе, можно указывать
только начальные нумерованные маркеры для задания блоков структуры текста.
Конечный маркер требуется указывать для явного обозначения окончания блока
структуры текста.

Подробнее о блоках структуры, созданных на основе маркеров, смотрите
документацию |fold-marker|.

==============================================================================
*28.7*  Создание блоков структуры на основе синтаксических правил

В редакторе Vim для каждого языка программирования используется свой особый
файл описания синтаксиса. В этом файле определены цвета для подсветки
различных синтаксических единиц. Если этот документ читать в программе Vim
выполняемой на цветном терминале, то он должен быть подсвечен при помощи
правил для синтаксиса файлов документации.
    В файлах описания синтаксиса можно добавлять правила, которые имеют
аргумент "fold" и определяют блоки структуры текста. Это не всегда просто
сделать, и требует написания полноценного файла с правилами синтаксиса, но
после того, как эта работа будет проделана, блоки структуры для данного типа
файла будут создаваться автоматически.
    Если используются правила создания блоков структуры текста, определённые в
файле описания синтаксиса, то здесь вряд ли требуются ещё какие-либо
пояснения. Можно открывать и закрывать блоки также, как описано ранее. При
редактировании файла блоки структуры будут создаваться и удаляться
автоматически.

Подробнее о блоках структуры, созданных на основе правил описания синтаксиса,
смотрите документацию |fold-syntax|.

==============================================================================
*28.8*  Создание блоков структуры на основе вычисленных условий

Этот метод в чём‐то схож с созданием блоков структуры по отступам, но вместо
использования отступов в строке, уровень вложенности блока структуры
вычисляется при помощи заданной пользователем функции. Это можно использовать
в тех случаях, когда на блок структуры текста может указывать содержимое
документа. Например, в почтовом сообщении, как правило, цитируемый текст
выделяется при помощи символа «>» в начале строки. Чтобы свернуть области,
относящиеся к таким цитатам, используйте следующие команды:

>
	:set foldmethod=expr
	:set foldexpr=strlen(substitute(substitute(getline(v:lnum),'\\s','',\"g\"),'[^>].*','',''))
<

Попробуйте этот метод со следующим фрагментом текста: 

    > цитата из текста собеседника ~
    > цитата из текста собеседника ~
    > > повторная цитата из моего предыдущего письма ~
    > > повторная цитата из моего предыдущего письма ~

Пояснение к использованному в примере выражению 'foldexpr':
    getline(v:lnum)			получить содержимое текущей строки;
    substitute(...,'\\s','','g')	убрать из текущей строки пробелы;
    substitute(...,'[^>].*','',''))     убрать из текущей строки всё, кроме
					начальных символов «>»;
    strlen(...)				подсчитать необходимый уровень
					вложенности блока, равный длине строки
					(количество найденных символов «>»).

Обратите внимание, что в значении параметра 'foldexpr' необходимо использовать
обратную наклонную черту перед каждым пробелом, двойной кавычкой и командой
":set". Чтобы посмотреть, что получилось в итоге, введите команду

>
	:set foldexpr
<

Для исправления обнаруженных ошибок, используйте подстановку в командной
строке:

>
	:set foldexpr=<Tab>
<

Здесь <Tab> это нажатие клавиши <TAB>. Посредством реализованной в редакторе
Vim функциональности, будет подставлено предыдущее значение, которое можно
будет редактировать.

Если выражение становится слишком сложным, то его лучше всего записать в виде
функции и выполнять вызов этой функции из значения параметра 'foldexpr'.

Подробнее о блоках структуры, созданных на основе вычисленных условий,
смотрите документацию |fold-expr|.

==============================================================================
*28.9*  Создание блоков структуры на основе постоянных строк

Этот метод полезен при установке для текущего окна параметра 'diff'. По
команде |vimdiff| будет применяться именно этот метод создания блоков
структуры текста. Пример.

>
	setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1
<

Введите эту команду в каждом окне, в которых отображаются разные версии одного
и того же файла. Сразу будут видны различия между файлами, а строки с
неизменённым текстом будут аккуратно свёрнуты.

Подробнее о блоках структуры, созданных на основе постоянных строк, смотрите
документацию |fold-diff|.

==============================================================================
*28.10* Какой метод создания блоков структуры использовать?

При всём этом богатстве выбора, наверняка возникает вопрос: «какой же метод
лучше всего?». К сожалению, однозначного ответа не существует. Попробуем дать
несколько советов, которыми можно руководствоваться при выборе.

Если для типа файла существуют правила синтаксиса с заданными блоками
структуры, то, скорее всего, это будет лучший выбор. Если такого файла не
существует, то можно попытаться написать свой. Это потребует хорошего знания
правил задания шаблонов поиска. Хотя это и не самый простой путь, но при
работе с такими типами файлов уже не потребуется задавать блоки структуры
вручную.

Определение блоков структуры вручную полезно для бесструктурного текста. Не
забудьте использовать команду |:mkview| для сохранения созданных вручную
блоков структуры.

Метод на основе маркеров требует расстановку этих самых маркеров
непосредственно в тексте файла. Если файл используется совместно с другими
людьми, или добавление маркеров в текст противоречит корпоративным стандартам,
то этот метод не может быть использован. Основное преимущество маркеров в том,
что их можно поместить именно там, где они требуются. Это позволяет избежать
ситуации, когда несколько строк оказываются пропущенными при удалении и вставке
блока структуры. Кроме того, можно добавлять комментарий о содержимом каждого
блока структуры.

Использование отступов зачастую неплохо работает для многих типов файла, но не
всегда так, как требуется. Используйте этот метод, если нет более подходящего
способа определения блоков структуры в тексте. Вместе с тем, этот метод очень
хорошо подходит для построения структурированного текста. В этом случае
требуется использовать строго одно значение 'shiftwidth' для каждого уровня
вложенности блоков.

Метод на основе вычисленных условий может помочь задать блоки структуры
практически в любом структурированном тексте. Выражения обычно не так сложно
задавать, особенно если начальную и конечную позицию блока можно легко
распознать. Если при использовании метода на основе вычислений для задания
блоков структуры, границы блоков получаются не совсем на тех местах, то всегда
можно переключиться на ручной метод. При этом созданные блоки структуры не
будут потеряны, так что можно редактировать их так, как потребуется.

==============================================================================

Следующая глава: |usr_29.txt|  Навигация по программному коду
Авторские права: см. |manual-copyright|
© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

vim:tw=78:ts=8:noet:ft=help:norl:
