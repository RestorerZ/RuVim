*usr_23.txt*	       для Vim version 9.0	      редакция от 19 дек 2020

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		      Редактирование особых видов файлов


Эта глава посвящена редактированию не совсем обычных файлов. Так, например, в
редакторе Vim имеется возможность редактирования сжатых файлов, а также
шифровать файлы. Получать файлы для правки напрямую через Интернет, и ещё, с
некоторыми ограничениями, изменять бинарные файлы.

|23.1|  Файлы в формате DOS, MAC и UNIX
|23.2|  Файлы в Интернете
|23.3|  Шифрование
|23.4|  Бинарные файлы
|23.5|  Сжатые файлы в архивах

 Следующая глава: |usr_24.txt|  Приёмы, упрощающие ввод текста
Предыдущая глава: |usr_22.txt|  Определение файла для редактирования
      Содержание: |usr_toc.txt|

==============================================================================
*23.1*  Файлы в формате DOS, MAC и UNIX

Когда-то давным-давно старые телетайпы для того, чтобы начать новую строку,
использовали два, идущих друг за другом, управляющих символа. При получении
первого из них переводили каретку в первую колонку (carriage return, возврат
каретки, <CR>), а при получении второго символа сдвигали бумагу на одну строку
вверх (line feed, протяжка строки, <LF>).
    Когда появились компьютеры, то память была поначалу дорогая. Некоторые
инженеры решили, что нет смысла использовать два символа для признака конца
строки. Ребята, делавшие UNIX, решили, что для перевода строки можно обойтись
одним символом, <New Line> или <NL>. Люди из Apple стали использовать <CR>. А
вот создатели MS-DOS (и Microsoft Windows) остались приверженцами
традиционного <CR><LF> (в документации используется обозначение <NL> вместо
<LF>).
    Теперь, при переносе файлов между различными платформами, мы сталкиваемся
с проблемой используемого символа перевода строки. В редакторе Vim реализовано
автоматическое распознавание разных форматов файлов и выполняются все
необходимые преобразования, не требуя с вашей стороны каких-либо усилий.
    В значении параметра 'fileformats' содержатся форматы файлов, которые
будут распознаваться при открытии нового файла на редактирование. Например,
следующей командой устанавливается, что при открытии файла, сначала надо
попробовать прочитать его в формате UNIX, а затем, если это не получится,
использовать формат MS-DOS:

>
	:set fileformats=unix,dos
<

Об изменение формата будет выдано соответствующее сообщение перед началом
редактированию файла. Если файл записан в том же самом формате, что
используется в системе, то никаких сообщений не будет, например,
редактирование файла UNIX-формата в UNIX-подобной системе не проявит себя
каким-либо особым образом. Но при редактировании файла DOS-формата в
UNIX-подобной системе, в редакторе Vim будет выведено сообщение:

    "/tmp/test" [dos] 3L, 71C ~

Для файла с Макинтоша будет выведено «[mac]». Обнаруженный формат файла
сохраняется в параметре 'fileformat'. Чтобы выяснить, в каком формате записан
редактируемый файл, наберите

>
	:set fileformat?
<

В редакторе Vim для указания формата файла используется одно из трёх
обозначений:

	unix		<NL>
	dos		<CR><NL>
	mac		<CR>


ИСПОЛЬЗОВАНИЕ ФОРМАТА МАКИНТОША

Итак, в UNIX-подобных системах для перевода строки используется символ <NL>. В
появлении символа <CR> посередине строки в UNIX нет ничего необычного. В
действительности, в ряде сценариев для редактора Vi (и Vim) это происходит
довольно часто.
    На Макинтоше, где символ <CR> является символом перевода строки, возможно
появление в середине строки символа <NL>.
    В результате нельзя быть на 100% уверенным, что файл, в котором содержатся
оба символа, принадлежит той или иной платформе. В алгоритме проверки формата
файла, реализованном в редакторе Vim, предполагается, что, скорее всего не
будут редактироваться файлы Mac-формата в UNIX и не проверяется этот тип файла
по умолчанию. Чтобы активировать выполнение такой проверки, добавьте в
параметр 'fileformats' значение "mac":

>
	:set fileformats+=mac
<

В этом случае в редакторе Vim будет задействовано распознавание и этого типа
файла. Будьте внимательны, при таких настройках возможны ошибки в определении
формата файлов.


ПЕРЕОПРЕДЕЛЕНИЕ ФОРМАТА ФАЙЛА

Если используется старый добрый редактор Vi и выполняется правка файл в
формате MS-DOS, то будет видно, что каждая строка заканчивается символом ^M
(^M это <CR>). При автоматическом определении формата этот символ не
показывается. А что если требуется редактировать файл в его родном формате?
Тогда необходимо переопределить формат. Пример.

>
	:edit ++ff=unix file.txt
<

Символы «++» указывают, что далее следует название параметра, который
переопределяется только для данной команды. Аргумент «++ff» используется для
'fileformat'. Для преопределения формата файла можно было бы использовать
"++ff=mac" или "++ff=dos", если возникнет такая необходимость. Такой синтаксис
работает не для всех параметров. В данный момент это реализовано только для
«++ff» и «++enc». Можно использовать и полные наименования параметров:
«++fileformat» и «++encoding».


ПРЕОБРАЗОВАНИЕ

Значение параметра 'fileformat' может использоваться для преобразования из
одного формата файла в другой. Представьте себе, что имеется файл MS-DOS с
названием "README.TXT", и необходимо преобразовать его в формат UNIX. Начните
редактировать этот файл

>
	vim README.TXT
<

В редакторе Vim будет распознано, что это файл в DOS-формате. Теперь измените
формат файла на UNIX-формат. Пример.

>
	:set fileformat=unix
	:write
<

Файл будет записан в UNIX-формате.

==============================================================================
*23.2*  Файлы в Интернете

Кто-то прислал письмо, в котором содержится ссылка на файл. Например,

    Вся информация находится здесь: ~
	    ftp://ftp.vim.org/pub/vim/README ~

Для загрузки файла можно запустить необходимую программу, сохранить копию на
диске и затем запустить программу Vim для редактирования файла.
    Но существует гораздо более простой способ. Установите каретку на строку с
URL и наберите команду

>
	gf
<

Если всё сделано правильно, то будет выполнено определение какую программу
надо использовать для загрузки файла, и после завершения загрузки файл будет
открыт в редакторе. Для того чтобы открыть файл в новом окне, используйте
команду CTRL-W f.
    Если что-то пойдёт не так, то будет выдано сообщение об ошибке. Например,
некорректный URL или если недостаточно прав для чтения по этой ссылке, или
если Сеть недоступна и т. п. К сожалению, диагностика причин ошибки может быть
затруднительна. В этом случае можно попытаться загрузить файл вручную.

Для доступа к файлам в Интернете используется подключаемый модуль netrw. На
сегодняшний день поддерживаются следующие протоколы:

	ftp://		используется программа ftp;
	rcp://		используется программа rcp;
	scp://		используется программа scp;
	http://		используется программа wget (только для чтения).

В редакторе Vim не реализовано самостоятельное сетевое соединение, а
используются указанные выше программы, которые должны быть установлены в
системе. В большинстве UNIX-подобных системах, программы "ftp" и "rcp"
устанавливаются по умолчанию. Программы "scp" и "wget", возможно, потребуется
установить отдельно.

В редакторе Vim эти протоколы распознаются для каждой команды, которая
начинает редактирование нового файла, в том числе для ":edit" и ":split".
Также они поддерживаются для команд записи, за исключением протокола http://.

Подробнее об этой возможности, в том числе о паролях для доступа, см. |netrw|.

==============================================================================
*23.3*  Шифрование

Бывает так, что некоторую информацию предпочтительно никому не показывать. В
редакторе Vim поддерживается шифрование файлов, предоставляя, таким образом,
определённый уровень защиты от чужих глаз.
    Чтобы начать редактирование нового файла с использованием шифрования,
добавьте аргумент -x к командной строке запуска программы. Например,

>
	vim -x exam.txt
<

В редакторе Vim будет выдан запрос пароля, который будет использован для
шифрования и расшифровки содержимого файла:

    Введите пароль для шифрования: ~

Наберите любой пароль, который сочтёте нужным. Символы, которые набираются,
будут заменяться символом звёздочки. Чтобы избежать проблем с ошибочным
набором пароля, в редакторе Vim отобразится запрос на повторный ввод пароля:

    Введите этот же пароль ещё раз: ~

После повторного ввода пароля можно редактировать файл как обычно. При записи
на диск его содержимое будет зашифровано.
    При повторном редактировании этого файла в редакторе Vim, будет запрос на
ввод того же самого пароля, который использовался при шифровании. При
редактировании уже зашифрованного файла не требуется снова указывать ключ
-x, поскольку редактором добавляется специальная пометка в файл, указывающая
на то, что он зашифрован. Можно также пользоваться обычной командой ":edit"
для редактирования зашифрованных файлов.
    Если попробовать посмотреть зашифрованный файл при помощи другой
программы, то на экране будет сплошной мусор. Такой же мусор будет
отображаться и в редакторе Vim, если при открытии файла введён неправильный
пароль. В программе не существует способа проверить, является ли введённый
пароль правильным или нет, так сделано для повышения степени защиты
шифрованной информации.


ОТКЛЮЧЕНИЕ И ВКЛЮЧЕНИЕ ШИФРОВАНИЯ

Чтобы отключить шифрование файла, установите значение параметра 'key' равным
пустой строке

>
	:set key=
<

Теперь при записи файла на диск шифрование не будет применяться.
    Установка значения параметра 'key' для включения шифрования не самая
лучшая идея, поскольку пароль может подглядеть кто-нибудь из-за спины, а
команда (с паролем в явном виде) может попасть в историю командной строки.
    Вместо этого следует использовать команду ":X", при вводе которой, пароль
запрашивается способом, аналогичным тому, который используется при запуске
редактора с аргументом -x. Пример.

>
	:X
	Введите пароль для шифрования: ******
	Введите этот же пароль ещё раз: ******
<


ОГРАНИЧЕНИЯ ШИФРОВАНИЯ

Алгоритм шифрования, который используется в редакторе Vim, является довольно
слабым. Он неплохо справляется со своими задачами в тех случаях, когда надо
оградить файл от случайных любопытных глаз, но недостаточно хорош, чтобы
противостоять специалисту по криптографии, особенно если у него достаточно
времени для взлома. Текст в файле подкачки и файле изменений будет также
шифроваться, но делается это поблочно, и это может быть использовано при
подборе пароля. Можно, конечно, отключить создание файла подкачки, но есть
риск потерять данные при сбоях, так как весь текст хранится только в памяти
компьютера. А отключение создания файла изменений не позволит отменить
сделанные правки после закрытия буфера.
    Чтобы отключить файл подкачки, используйте аргумент -n в командной строке
запуска программы. Например, для правки зашифрованного файла «file.txt» без
использования файла подкачки, запустите редактор при помощи следующей команды:

>
	vim -x -n file.txt
<

Отключить использование файла подкачки в процессе редактирования можно
командой

>
	:setlocal noswapfile
<

Имейте в виду, что поскольку файл подкачки отсутствует, то восстановление в
случае аварии будет невозможно. На всякий случай, старайтесь записывать файл
на диск несколько чаще, чем обычно.

В памяти редактируемый текст также хранится в незашифрованном виде. Любой
пользователь, у которого достаточно полномочий для просмотра памяти,
используемой редактором, может посмотреть, что же такое секретное там
редактируется.
    Если используется viminfo-файл, то помните также и о том, что содержимое
регистров записывается в него в незашифрованном виде.
    Если действительно требуется защитить содержимое файла по настоящему, то
редактируйте его на персональном компьютере, не подключённом к сети,
используйте хорошие криптографические средства и храните компьютер в большом
сейфе, когда им не пользуетесь.

==============================================================================
*23.4*  Бинарные файлы

В редакторе Vim имеется возможность редактирования бинарных файлов. Конечно,
редактор был создан не совсем для этой цели, поэтому существует ряд
ограничений, но, по крайней мере, можно прочитать бинарный файл, изменить пару
символов и записать обратно.
    Чтобы быть уверенным в том, что к бинарному файлу не будут применяться
встроенные механизмы определения формата файла и прочие преобразования,
используйте при запуске редактора Vim аргумент -b. Пример.

>
	vim -b datafile
<

В этом случае будет установлен параметр 'binary' и все неожиданные последствия
форматирования текста будут отключены. Например, параметр 'textwidth' будет
установлен в значение 0, чтобы избежать автоматического переноса строк. А
файлы всегда будут открываться в UNIX-формате файлов.

Часто бинарный режим используется для изменения того или иного сообщения в уже
собранной программе. Будьте осторожны, чтобы не сломать программный код. Для
переключения в режим замены символов используйте команду `R`.

Многие символы в бинарном файле не могут быть отображены на экране. Для
просмотра файла в шестнадцатеричном формате отображения символов, используйте
команду

>
	:set display=uhex
<

Можно также использовать команду "ga" для просмотра значения символа,
находящегося под кареткой. Например, если каретка расположен на символе <Esc>,
то вывод команды будет следующим:

    <^[>  десятичное 27; шестнадцатеричное 1b; восьмеричное 033; диграф EC ~

Для отключения переноса длинных строк, сбросьте параметр 'wrap' командой

>
	:set nowrap
<


ПОЗИЦИЯ БАЙТА

Чтобы посмотреть номер байта, на котором находится каретка в данный момент,
используйте команду

>
	g CTRL-G
<

Вывод этой команды довольно многословен:

    Колонка 9-16 из 9-16; строка 277 из 330; слово 1806 из 2058; байт 10580 из 12206 ~

Последние два числа указывают на номер текущего байта и общее количество байт
в буфере. При этом правильно учитывается значение параметра 'fileformat'.
    Для перемещения к определённому байту в файле, используйте команду `go`.
Например, для перемещения к байту 2345

>
	2345go
<


ИСПОЛЬЗОВАНИЕ XXD

Настоящий бинарный редактор умеет показывать текст двумя способами: как есть и
в шестнадцатеричном формате. В редакторе Vim для этой цели можно фильтровать
текст при помощи внешней программы «xxd», которая поставляется вместе с
редактором.
    Прежде всего, откройте файл в бинарном режиме. Пример.

>
	vim -b datafile
<

Теперь, преобразуйте файл в шестнадцатеричный дамп с помощью программы xxd

>
	:%!xxd
<

Текст будет выглядеть примерно так:

    0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI ~
    0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,.`.....b..4^.0 ~
    0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.".....i.59. ~

Теперь можно просматривать и редактировать файл так, как привыкли. В редакторе
Vim информация в буфере воспринимается как обычный текст, поэтому изменения в
шестнадцатеричных кодах не будут вызывать автоматического изменения в
отображении печатных символов, и наоборот.
    Когда придёт время, можно выполнить обратное преобразование при помощи
команды

>
	:%!xxd -r
<

Будут учитываться только изменения, сделанные в шестнадцатеричных кодах.
Изменения в печатных символах с правой стороны не принимаются во внимание.

Подробнее смотрите страницу справочника man для программы xxd.

==============================================================================
*23.5*  Сжатые файлы в архивах

Сжатые файлы в архивах можно редактировать как любой обычный текстовый файл.
Через подключаемый модуль «gzip» автоматически выполняются требуемые операции
для распаковки файлов при редактировании и упаковки при записи на диск.
    В данный момент поддерживаются следующие архивные форматы:

	.Z	compress
	.gz	gzip
	.bz2	bzip2

Указанные программы используются редактором Vim для выполнения операций по
упаковке и распаковке. Возможно, что потребуется, прежде всего, установить эти
программы в систему.

==============================================================================

Следующая глава: |usr_24.txt|  Приёмы, упрощающие ввод текста
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:noet:ft=help:norl:
