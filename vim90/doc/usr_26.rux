*usr_26.txt*	       для Vim version 9.0	      редакция от 24 апр 2006

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		      Повторное выполнение операций


Редактирование текста зачастую разбивается на определённые систематически
повторяющиеся задачи — одно и то же изменение нужно сделать несколько раз.
В этой главе будет показано несколько полезных приёмом повторного
воспроизведения ранее выполненной операции.

|26.1|  Повторное визуальное выделение текста
|26.2|  Операции со сложением и вычитанием
|26.3|  Одновременное изменение нескольких файлов
|26.4|  Работа с редактором Vim из командной оболочки

 Следующая глава: |usr_27.txt|  Шаблоны и команды поиска
Предыдущая глава: |usr_25.txt|  Редактирование форматированного текста
      Содержание: |usr_toc.txt|

==============================================================================
*26.1*  Повторное визуальное выделение текста

Чем полезен визуальный режим, так это тем, что можно в любой
последовательности корректировать необходимые фрагменты текста. Ведь этот
участок текста всегда на виду. Но вот что не удобно, так это то, что для
выделения того же участка текста нужно набирать одни и те же команды. Но
решение этого есть. Это команда `gv`, при вводе которой будет повторно выделен
ранее отмеченный участок текста, что даёт возможность выполнять над тем же
самым текстом иные операции.
    Предположим, в тексте имеется несколько строк, в которых требуется
изменить «2001» на «2002» и «2000» на «2001». Пример.

    Финансовые результаты 2001 года оказались ~
    лучше, чем в 2000. Прибыль возросла на 50%, ~
    несмотря на то, что в 2001 году осадков ~
    выпало больше, чем в 2000 г. ~
		2000            2001 ~
    прибыль     45,403		66,234 ~

Для начала, изменим «2001» на «2002». Выберите необходимые строки в визуальном
режиме и введите команду

>
	:s/2001/2002/g
<

Теперь, чтобы выбрать выделенный ранее текст, используйте команду `gv`.
Независимо от того, где находится каретка в данный момент, будет выполнено
переключение в визуальный режим и выделен тот же самый фрагмент текста. Затем
используйте команду ":s/2000/2001/g" для внесения следующего исправления. Эту
операцию можно повторить несколько раз.

==============================================================================
*26.2*  Операции со сложением и вычитанием

При последовательном изменении чисел часто имеется определённый шаг, на
который увеличивается или уменьшается число. В приведённом выше примере мы
увеличивали значение года на единицу. Вместо набора команды замены для каждого
обозначения года в тексте, можно использовать команду CTRL-A. Например,
наберите шаблон для поиска обозначения года

>
	/19[0-9][0-9]\|20[0-9][0-9]
<

Когда каретка будет установлена на первом найденном совпадение с шаблоном,
нажмите комбинацию клавиш CTRL-A и значение года будет увеличено на единицу.
Пример. 

    Финансовые результаты 2002 года оказались ~
    лучше, чем в 2000. Прибыль возросла на 50%, ~
    несмотря на то, что в 2001 году осадков ~
    выпало больше, чем в 2000 г. ~
		2000            2001 ~
    прибыль	45,403		66,234 ~

Теперь переместите каретку к следующему обозначению года командой `n` и
нажмите клавишу "." для повтора последней команды CTRL-A (команду `.` немного
быстрее набирать). Повторяйте набор команд `n` и `.`, пока в тексте не будут
изменены все обозначения годов.
    Совет. Установите параметр 'hlsearch', чтобы видеть на экране все
совпадения в тексте, которые надо будет изменить.

Суммирование с числом, отличным от единицы, осуществляется вводом числовой
приставки перед командой CTRL-A. Предположим, есть такой список:

    1. номер четыре ~
    2. номер пять ~
    3. номер шесть ~

Подведите каретку к обозначению номера списка «1.» и наберите такую команду

>
	3CTRL-A
<

Символ «1.» изменится на «4.». И опять же, можно использовать команду `.` для
повтора этого действия с другими числами.

Ещё один пример:

    006     что-то ~
    007     что-то ~

Применение команды CTRL-A к этим числам приведёт к следующему результату:

    007     что-то ~
    010     что-то ~

Как это? Разве 7 плюс один будет 10? Дело в том, что в редакторе запись «007»
воспринимается как восьмеричное число, поскольку число начинается с цифры
ноль. Такое соглашение часто используется в программах на языке Си. Если нет
необходимости, чтобы числа, начинающиеся с нуля, воспринимались как
восьмеричные, используйте следующую команду для настройки

>
	:set nrformats-=octal
<

По команде CTRL-X аналогичным образом выполняется вычитание.

==============================================================================
*26.3*  Одновременное изменение нескольких файлов

Допустим, имеется переменная «x_cnt» и необходимо изменить её название на
«x_counter». Сложность заключается в том, что эта переменная используется в
нескольких файлах имеющих расширение .c, и содержащих программный код на языке
Си. Покажем, как внести изменения во все необходимые файлы. Поместите все
требуемые файлы в список аргументов

>
	:args *.c
<

Теперь, все файлы с расширением .c присутствуют в списке аргументов и в
редакторе Vim открыт для правки первый файл. Чтобы выполнить команду замены во
всех файлах из списка аргументов, введите команду

>
	:argdo %s/\<x_cnt\>/x_counter/ge | update
<

В качестве аргумента команды ":argdo" используется команда, которая и будет
применена ко всем файлам, перечисленным в команде ":args".
    Команда замены, которая была передана в качестве аргумента команде
":argdo", будет обрабатывать все строки в файлах. По этой команде будут найдены
все появления слова «x_cnt» в тексте по шаблону "\<x_cnt\>". Благодаря
метасимволам "\<" и "\>" в шаблоне, будет выполнен поиск только слова «x_cnt»,
и игнорирование слов вроде «px_cnt» или «x_cnt2».
    Флаги команды замены включают 'g' для замены всех слов «x_cnt» на строке,
а также 'e' для того, чтобы избежать появления сообщения об ошибке в том
случае, если слова «x_cnt» в каком-либо файле не найдено. Без флага 'e'
команда ":argdo" прекратит выполнение на первом же файле, в котором не
обнаружено слово «x_cnt».
    Символ "|" служит для разделения двух команд. По команде `update` будет
выполнена запись файл на диск только в том случае, если в нём есть изменения.
Если в каком-либо файле не было замен «x_cnt» на «x_counter», то файл лишний
раз перезаписываться не будет.

Имеется также команда ":windo", по которой выполняются команды, указанные в
качестве аргумента, во всех открытых окнах, а также команда ":bufdo", по
которой выполняются команды во всех буферах. Будьте осторожны с этой командой,
поскольку в списке буферов может находиться гораздо больше файлов, чем кажется
на первый взгляд. Используйте для просмотра списка буферов команду ":buffers"
(или ":ls").

==============================================================================
*26.4*  Работа с редактором Vim из командной оболочки

Предположим, имеется множество файлов, в которых требуется заменить строку
«фамилия» строкой «Иванов» и отправить результат на печать. Как это сделать,
не прибегая к ручному выполнению повторяющихся операций? Напишите командный
файл для командной оболочки операционной системы, который возьмёт всю работу
на себя!
    В редакторе Vim прекрасно реализовано решение задач по редактированию
текста отображаемого на экране с использованием команд из режима команд. В то
же время, для пакетной обработки команды режима команд не очень подходят; их
сложно поместить в командный файл, который нужно запускать по мере
необходимости. Для этой цели лучше всего подходит Ex-режим редактора Vim.
Режим Ex предоставляет интерфейс командной строки для работы с редактором, и
эти команды легко можно поместить в командный файл, вызываемый командной
оболочкой. («Команда Ex» это просто другое название для команды, вводимой в
командной строке редактора, ":команда").
Для выполнения поставленной задачи наберите следующие Ex-команды

>
	%s/фамилия/Иванов/g
	write tempfile
	quit
<

и сохраните набранный текст в файл «change.vim». Теперь, для запуска редактора
в пакетном режиме, используйте команды командной оболочки

>
	for file in *.txt; do
	    vim -e -s $file < change.vim
	    lpr -r tempfile
	done
<

Цикл for-done это конструкция командного языка оболочки sh, позволяющая в
данном случае выполнять в цикле две команды указанные между строками for и
done с одновременным изменением значения переменной $file.
    Во второй строке выполняется запуск редактора Vim в режиме Ex (аргумент -e)
для каждого файла из переменной $file. В редакторе, в свою очередь, применяется
к этим файлам команды, считанные из файла «change.vim». Аргумент -s
предписывает редактору Vim работать «молча», иными словами, не выводить
запросы от команды ":prompt" или какие-либо другие сообщения.
    Команда `lpr -r tempfile` печатает получившийся в результате обработки
редактором Vim файл «tempfile» и удаляет его (на операцию удаления указывает
аргумент -r).


СЧИТЫВАНИЕ ИЗ СТАНДАРТНОГО ВВОДА

В редакторе Vim реализована возможность считывания текста из устройства
стандартного ввода. Поскольку обычно в редакторе Vim ожидается, что из него
приходят команды, то необходимо указать программе, что в данном случае будет
именно текст. Для этого, вместо названия файла, в редактор Vim передаётся
аргумент "-". Пример.

>
	ls | vim -
<

Приведённый пример позволяет редактировать вывод команды `ls`, без
необходимости предварительного сохранения текста в файл.
    Если для считывания текста используется стандартный ввод, то можно также
воспользоваться аргументом "-S" для запуска сценария Vim

>
	producer | vim -S change.vim -
<


КОМАНДЫ РЕЖИМА КОМАНД В КОМАНДНЫХ ФАЙЛАХ

Использовать команды режима команд в командных файлах можно следующим образом

>
	vim -s script file.txt ...
<

	Примечание.
	Значение аргумента "-s" зависит от того, используется ли оно совместно
	с аргументом "-e" или без него. В данном случае "-s" указывает на
	необходимость чтения команд режима команд из заданного командного
	файла. При использовании совместно с "-e" этот аргумент указывает
	редактор Vim на «тихий» режим выполнения операций, название командного
	файла после аргумента "-s" при этом не указывается.

Команды из командного файла выполняются так, как они были набраны. Не
забывайте, что перенос строки будет интерпретироваться как нажатие клавиши
<ENTER>, что в режиме команд приводит к перемещению каретки к следующей
строке. Чтобы записать командный файл, нужно открыть файл и набрать
необходимые команды. Возможно, что возникнут некоторые трудности, поскольку
требуется хорошо представить, какой будет результат выполнения введённых
команд. Другой способ создания командного файла — записать требуемую
последовательность команд при их выполнении вручную. Для этого запустите
программу Vim с аргументом "-w"

>
	vim -w script file.txt ...
<

Все нажатия клавиш в открытом окне редактора Vim будут сохранены в файл
«script». Если в процессе набора команд допустите небольшие ошибки, то сможете
отредактировать командный файл позднее.
    При указании аргумента "-w" информация о нажатых клавишах добавляется в
существующий командный файл. Это полезно при записи необходимой
последовательности команд по частям. Если потребуется начать запись команд с
самого начала, то используйте для этого аргумент "-W". Содержимое
существующего файла при этом будет перезаписано новыми командами.

==============================================================================

Следующая глава: |usr_27.txt|  Шаблоны и команды поиска
Авторские права: см. |manual-copyright|
© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

vim:tw=78:ts=8:noet:ft=help:norl:
