*usr_04.txt*	       для Vim version 9.0	      редакция от 21 ноя 2019

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

			Основные приёмы правки текстов


В этой главе будет рассмотрено несколько способов внесения правок и
перемещения частей текста в документе. Для этого воспользуемся тремя основными
методами редактирования: использование операторов совместно с командами
перемещения каретки, использование визуального режима и применение текстовых
объектов.

|04.1|  Операторы и команды перемещения каретки
|04.2|  Изменение текста
|04.3|  Повторное применение команды
|04.4|  Визуальный режим
|04.5|  Перемещение текста
|04.6|  Копирование текста
|04.7|  Использование системного буфера обмена
|04.8|  Текстовые объекты
|04.9|  Режим замены
|04.10| Заключение

  Следующая глава: |usr_05.txt|  Настройка программы
 Предыдущая глава: |usr_03.txt|  Навигация по документу
       Содержание: |usr_toc.txt|

==============================================================================
*04.1*  Операторы и команды перемещения каретки

В главе 2 было рассмотрено применение команды `x` для удаления одиночных
символов, а использование команды с указанием счётчика позволяет производить
удаление несколько символов за раз. Например, по команде "4x" будет выполнено
удаление сразу четырёх символов. Сейчас расскажем о некоторых операторах и их
использование с командами перемещения каретки.
    Например, по команде "dw" выполняется удаление целого слова. Как уже
говорилось, команда `w` используется для перемещения каретки на одно слово.
Фактически совместно с оператором `d` может быть использована любая команда
перемещения каретки, при этом выполняется операция удаления текста от текущей
позиции каретки до того места, к которому переместится каретка по команде
перемещения.
Так по команде "3w" каретка перемещается на три слова, а по команде "d3w"
выполняется операция удаления трёх слов.

	Разрешается провоз пяти килограммов кота (справка с таможни) ~
			   ---------------------->
				    d3w

	Разрешается провоз (справка с таможни) ~

    Удаление символов выполняется до позиции, в которой оказывается каретка
после перемещения. Так происходит потому, что предполагается что, скорее
всего, не требуется удаление первого символа слова, на который переместится
каретка. Однако если используется команда `e` для перемещения к концу слова,
то алгоритм удаления настроен таким образом, что происходит удаление
последнего символа слова, на который перемещается каретка:

	Разрешается провоз пяти килограммов кота (справка с таможни) ~
			   ---------------->
				d2e

	Разрешается провоз кота (справка с таможни) ~

    Включается или нет символ под кареткой в контекст операции, зависит от
команды перемещения. В документации по редактору Vim команды перемещения
называются «исключающими», если символ под кареткой не включается в контекст
операции, и «включающими», если символ включается в контекст.

    По команде `$` выполняется перемещение каретки к концу строки. И,
соответственно, по команде "d$" будет выполнена операция удаления текста,
начиная от позиции каретки и до конца строки. Это перемещение является
включающим, поэтому последний символ также будет удалён:

	Разрешается провоз пяти килограммов кота (справка с таможни) ~
						------------------->
							d$

	Разрешается провоз пяти килограммов кота ~

    В приведённых примерах схема работы следующая: оператор-перемещение. В
подобных операциях первым указывается оператор, например оператор удаления —
`d`, затем указывается команда перемещения, например, "4l" или `w`. Подобным
образом можно выполнять операции с любым текстом, над которым перемещается
каретка.

==============================================================================
*04.2*  Изменение текста

    Ещё одна команда применяемая как оператор это `c` (change, изменить). Он
работает аналогично оператору `d`, но, после выполнения операции, редактор
будет переключен в режим вставки. Например, по команде "cw" выполняется замена
слова. Говоря точнее, по этой команде будет выполнено удаление слова и
переключение редактора в режим вставки.

	Разрешается провоз пяти килограммов кота ~
			   ----------------->
			    c2wмешка для<ESC>

	Разрешается провоз мешка для кота ~

В команде "c2wмешка для<ESC>" присутствуют следующие составляющие:

	c           оператор изменения;
	2w          перемещение на два слова, которые удаляются и редактор
						переключается в режим вставки;
	мешка для   вставка этого текста;
	<ESC>       возврат в режим команд.

    Обратите внимание, что пробел перед словом «кота» не был удалён. Говорят,
что для каждой проблемы есть решение, которое одновременно простое, элегантное
и неправильное. То же можно сказать и о примере с командой "cw". Сам по себе
оператор `c` работает точно так же как и оператор `d`, но с одним исключением
— это команда "cw". Фактически, в данном случае, он работает как команда "ce",
изменения выполняются до последнего символа слова, на которое переместился
каретка. Таким образом, пробел после слова не включается в обработку. Это
исключение из правила существовало ещё в редакторе Vi. А поскольку многие люди
привыкли к такому поведению, оно сохраняется и в редакторе Vim.


ПРОЧИЕ КОМАНДЫ ИЗМЕНЕНИЯ ТЕКСТА

    Подобно тому как по команде "dd" удаляется целая строка, так и по команде
"cc" изменения вносятся целиком во всю строку. Но при этом, сохраняется
существующий отступ (начальные пробельные символы).

    Также как по команде `d$` выполняется удаление текст до конца строки, так
и по команде "c$" изменение текст от каретки до конца строки — то же самое,
что удалить текст по команде "d$" и затем ввести команду `a` для переключения
программы в режим вставки и добавления нового текста.


СОКРАЩЁННЫЕ ВАРИАНТЫ КОМАНД

    Некоторые команды, относящиеся к разряду оператор-перемещение,
употребляются настолько часто, что им были сопоставлены однобуквенные команды:

	x  используется для  "dl"  (удаление символ под кареткой)
	X  используется для  "dh"  (удаление символ слева от каретки)
	D  используется для  "d$"  (удаление от позиции каретки до конца строки)
	C  используется для  "c$"  (изменение от позиции каретки до конца строки)
	s  используется для  "cl"  (изменение одиночного символа)
	S  используется для  "cc"  (изменение всей строки)


ГДЕ УКАЗЫВАТЬ СЧЁТЧИК

    Как по команде "3dw", так и по команде "d3wю будет выполнено удаление трёх
слов. Если интересуют подробности, то на самом деле по первой из приведённых
команд, — "3dw" — выполняется удаление по одному слову три раза, по второй
команде, — "d3w" — выполняется удаление трёх слов за один раз. Эти различия в
данном случае не имеют значение — главное результат. Но вот что ещё
интереснее, так это то, что в подобных командах можно указывать сразу два
счётчика. Например, по команде "2d3w" будет удалено по три слова два раза, то
есть всего шесть слов.


ЗАМЕНА ОДНОГО СИМВОЛА

    Команда `r` не является оператором. После данной команды ожидается ввод
символа и производится замена символа под кареткой на введённый символ. Того
же эффекта можно добиться при помощи команд "cl" или `s`, но основное отличие
заключается в том, что после исполнения команды `r` не требуется нажимать
клавишу <ESC> для переключения в режим команд из режима вставки. Пример.

	если где-то нет когн-то, дначит, где-то кто-то есть ~
	rЕ		  rо	 rз

	Если где-то нет кого-то, значит, где-то кто-то есть ~

    Использование счётчика с командой `r` вызывает замену соответствующего
количества символов на один и тот же набранный символ. Пример.

	Если где-то нет кого-то, значит, где-то кто-то есть ~
			7rх

	Если где-то нет ххххххх, значит, где-то кто-то есть ~

    Для замены символа на символ перевода строки используйте "r<ENTER>". Эта
операция удаляет один символ под кареткой и вставляет символ перевода строки.
Указание счётчика в этом случае влияет только на количество удаляемых
символов; по команде "4r<ENTER>" заменяется четыре символа на один символ
перевода строки.

==============================================================================
*04.3*  Повторное применение команды

    Команда `.` (точка) — одна из самых простых, и, в то же время, самых
мощных команд в редакторе Vim. По этой команде выполняется повтор последнего
выполненного изменения текста. Например, представьте, что редактируется файл
HTML и необходимо удалить все теги <B>. Это можно выполнить примерно следующим
образом, перемещаем каретку на символ < и удаляем тег <B> командой "df>",
затем перемещаем каретку на символ < парного тега </B> и удаляем его, просто
введя команду `.`. Как уже сказано выше, по команде `.` выполняется последняя
команда изменения, в данном случае это "df>". Для удаления всех последующих
тегов мы просто устанавливаем каретку на символ < и используем команду `.`.

				Деньги <B>неудобны</B> лишь тем, что <B>их ~
	f<   найти первый <     ------->
	df>  удалить по >              -->
	f<   найти следующий символ <     --------->
	.    повторить команду df>                --->
	f<   найти следующий символ <                ---------------->
	.    повторить команду df>                                   -->

    Команда `.` применима ко всем командам редактирования, кроме команды
отмены `u`, команды возврата отменённой правки CTRL-r, и команд, которые
начинаются с символа двоеточия (:).

    Приведём ещё один пример. Допустим надо изменить слова «четыре» на слово
«пять» везде, где оно появляется в тексте. Это можно достаточно быстро
проделать следующей серией команд:

	/четыре<ENTER>    найти первое слово «четыре»
	cwпять<ESC>       заменить его на «пять»
	n                 найти следующее слово «четыре»
	.                 повторить замену слова на «пять»
	n                 найти следующее «четыре»
	.                 повторить замену
			  и так далее

==============================================================================
*04.4*  Визуальный режим

    Для удаления простых фрагментов текста, команды вида оператор-перемещение
работают неплохо, но иногда бывает затруднительно определить, как именно
команда будет перемещаться по тексту при его изменении. В этом случае на
помощь приходит визуальный режим.

    Переключение в визуальный режим осуществляется по команде `v`. В визуальном 
режиме каретка перемещается по тексту, к которому требуется применить
изменения, и во время этого процесса необходимый фрагмент текста будет
подсвечиваться. Затем выполняется команда оператора.
    Например, для удаления текста с середины одного слова до середины другого
слова:

		Генерал — это тот же ефрейтор ~
		      ------------------->
			veeeelllllld

		Генератор ~

    При этом нет необходимости вести учёт сколько же раз надо нажать `l`, чтобы
каретка оказалась в необходимой позиции. Сразу видно текст, который будет
удалён при вводе команды `d`.

    Если в какой-либо момент окажется, что с выделенным фрагментом текста
ничего не надо делать, то просто нажмите клавишу <ESC> для отключения
визуального режима.


ВЫДЕЛЕНИЕ СТРОК

    Если требуется работать с целыми строками, то используйте для переключения
в визуальный режим команду `V` (латинская прописная буква V). При
использовании этой команды текущая строка будет сразу же выделена. Перемещения
вправо или влево, не приводят ни к каким изменениям, зато перемещения вверх
или вниз расширяют область выделения на одну строку за раз.
    Например, для выделения трёх строк можно ввести `Vjj`:

                          +------------------------+
                          | текст текст текст      |
                       >> | текст текст текст текс | |
     выделенные строки >> | текст текст текст      | | Vjj
                       >> | текст текст            | V
                          | текст текст текст      |
                          +------------------------+


ВЫДЕЛЕНИЕ БЛОКОВ

    Если нужно работать с прямоугольной областью текста, то используйте для
переключения в визуальный режим команду CTRL-v. Визуальные блоки очень
полезны при работе с таблицами.

		имя             Q1      Q2      Q3 ~
		Петя            123     455     234 ~
		Миша            0       90      39 ~
		Саша            392     63      334 ~

    Чтобы удалить средний столбец «Q2», подведите каретку к «Q» и нажмите
CTRL-v для переключения в режим визуального блока. Затем переместите каретку
на три строки вниз, например по команде "3j", и вправо к следующему слову
командой `w`. Поскольку выделение также захватит первый символ последнего
столбца, сдвиньте каретку влево на одну позицию командой `h`. Теперь нажмите
`d` и средний столбец исчезнет.


ПЕРЕХОД К ПРОТИВОПОЛОЖНОЙ СТОРОНЕ ВЫДЕЛЕННОЙ ОБЛАСТИ

    Иногда в процессе выделения текста в визуальном режиме требуется, чтобы
каретка находилась с другой стороны выделенной области. Чтобы переместить
каретку к противоположной стороне выделенной области, используйте команду `o`
(other, другой). Каретка переместится к другой стороне выделения и можно будет
поправить границу выделенной области с этого края выделения. Повторное нажатие
"o" вернёт каретку к тому краю выделенной области, где она находилась до
перемещения.

    При блоковом выделении у отмеченной области имеется четыре угла. По команде
`o` выполняется перемещение каретки по диагонали, а по `O` (латинская прописная
буква O) перемещение каретки к противоположному углу по горизонтали.

    Обратите внимание, что команды `o` и `O` в визуальном режиме работают
совсем не так, как в режиме команд, где они открывают новую строку выше или
ниже строки с кареткой.

==============================================================================
*04.5*  Перемещение текста

    При удалении текста, например с помощью команд `d` или `x`, удалённый
текст сохраняется в памяти. При помощи команды `p` (put, поместить) его можно
вставить в любом другом месте документа. Попробуем, как это работает.
    Прежде всего, удалим целую строку, поместив на неё каретку и введя команду
"dd". Теперь, переместите каретку туда, где хотелось бы вставить строку и
введите команду `p`. Удалённая строка будет вставлена под кареткой.

	строка          строка        строка ~
	строка 2  dd    строка 3  p   строка 3
	строка 3                      строка 2 ~

    Поскольку была удалена целая строка, по команде `p` будет вставлена строка
с текстом ниже строки под кареткой. Если удалить часть строки (например,
слово), то по команде `p` выполняется вставка этого слова сразу после каретки.

	Из спасибо шапки не сошьёшь ~
	   -------->
	     dw

	Из шапки не сошьёшь ~
	   ----->
	    whp

	Из шапки спасибо не сошьёшь ~


ЕЩЁ О КОМАНДАХ ВСТАВКИ ТЕКСТА

    По команде `P` (латинская прописная буква P) также как и по команде `p`
выполняется вставка текст, но вставляется он перед кареткой. Если удалить
строку по команде "dd", то по команде `P` вставка строки будет выше строки с
кареткой. После удаления слова при помощи команды "dw", по команде `P` будет
выполнена вставка этого слова сразу перед кареткой.

Можно повторять вставку текста столько раз, сколько требуется. При этом будет
использоваться один и тот же текст.

    С командами `p` и `P` можно использовать числовую приставку. Текст будет
повторяться столько раз, сколько указывает число. Таким образом, по "dd3p"
будет помещено ниже строки под кареткой три копии удалённой строки.


ПОМЕНЯТЬ МЕСТАМИ ДВА СИМВОЛА

    Часто во время набора возникают опечатки, когда два символа оказываются
переставленными местами. В редакторе Vim можно легко исправлять такие ошибки —
просто подведите каретку к первому, ошибочно набранному символу и наберите
команду "xp". При этом происходит следующее: по команде `x` удаляется символ и
он помещается в регистр, а по команде `p` вставляется текст после каретки.

	навзание   назание   название ~
	  x          p

==============================================================================
*04.6*  Копирование текста

    Чтобы скопировать текст из одного места в другое, можно было бы удалить
его, воспользоваться командой `u` для восстановления, и затем вклеить его
в другом месте при помощи команды `p`. Существует более простой способ
скопировать нужный фрагмент текста — это оператор `y`, который копирует
текст в регистр. После этого можно пользоваться командой `p`, как было
описано выше.
    В редакторе Vim эту операцию называют "yanking" («выдёргивание»). Дело в
том, что буква «c» уже используется для оператора изменения, поэтому для
операции копирования выбрали другое название, совпадающее по смыслу и
соответствующее выбранной для этой команды клавише [Ну, это всё только
английского языка касается — Примеч. пер.].

    Поскольку `y` является оператором, то можно использовать такие команды,
как например "yw" для копирования слова. Конечно же, можно употреблять и
числовые приставки. Для того чтобы скопировать два слова, можно использовать
"y2w". Пример.

	let sqr = LongVariable * ~
		  -------------->
			y2w

	let sqr = LongVariable * ~
			       p

	let sqr = LongVariable * LongVariable ~

Обратите внимание, что команда "yw" включает пробел после слова. Если это не
устраивает, то пользуйтесь командой "ye".

    По команде "yy" копируется вся строка целиком, подобно тому, как по
команде "dd" удаляется вся строка. Неожиданное поведение заключается в том,
что команда `Y` работает точно так же, как и команда "yy", то есть копируется
вся строка целиком, в то время как по команде `D` удаляется текст от позиции
каретки и до конца строки. Будьте внимательны, для копирования текста от
позиции каретки и до конца строки используйте команду "y$".

	строка текста      yy   строка текста		строка текста
	строка 2		строка 2	    p	строка 2
	последняя строка	последняя строка	строка текста
							последняя строка

==============================================================================
*04.7*  Использование системного буфера обмена

    При использовании варианта редактора Vim с графическим интерфейсом (gvim),
в меню Правка имеется пункт Копировать. Чтобы скопировать текст в системный
буфер обмена сначала выделите его в визуальном режиме, а затем выберите пункт
Копировать в меню Правка. Скопированный текст можно вставлять, как и в самом
редакторе Vim, так и в другие программы.

    Текст, скопированный в системный буфер обмена в любом приложении, можно
вставлять, если выбрать пункт Вставить меню Правка, как в режиме команд, так и
в режиме вставки. В визуальном режиме вставляемый текст будет заменять
выделенный текст.

    При выборе пункта Вырезать меню Правка, текст будет удалён из файла и
помещён в системный буфер обмена. Если в системе поддерживается контекстное
всплывающее меню, то пункты Копировать, Вырезать и Вставить, также доступны и
в контекстном меню. Кроме того, соответствующие кнопки присутствуют на панели
инструментов, если в редакторе включено отображение панель инструментов.

    Если не используется вариант с графическим интерфейсом, или не нравиться
пользоваться меню, то для выполнения тех же операций можно применять
клавиатурные команды. Для этого надо воспользоваться обычными командами `y` и
`p`, но предварительно набрать "* (двойная кавычка и звёздочка). Например,
чтобы скопировать в системный буфер обмена текущую строку, используйте

>
	"*yy
<

А для вставки текста из системного буфера используйте

>
	"*p
<

    Это работает только в версиях редактора Vim, в которых есть поддержка
системного буфера обмена. Подробнее об этом читайте в параграфах |09.3| и
|clipboard|.

==============================================================================
*04.8*  Текстовые объекты

    Если каретка находится в середине слова, которое требуется удалить, то
прежде чем выполнить команду "dw" придётся переместить каретку в начало этого
слова. Гораздо проще добиться того же эффекта командой "daw".

	молчание — просто хорошо отредактированный ответ ~
		     daw

	молчание — хорошо отредактированный ответ ~

    В команде "daw", `d` — это оператор удаления, а "aw" («a word», слово) это
текстовый объект. Таким образом, "daw" означает «удалить слово». Точнее
говоря, пробел после слова также будет удалён (пробел перед словом «хорошо»).

    Использование текстовых объектов является третьим способом внесения
изменений в текст в редакторе Vim, в дополнение к уже изученным «операторам с
перемещением» и визуального режима.
    Текстовые объекты очень похожи на операторы‐перемещение, но, вместо
совершения операции над фрагментом текста между текущей и последующей позицией
каретки, текстовый объект рассматривается как целое. Положение каретки внутри
объекта не имеет значения.

Для изменения целого предложения пользуйтесь командой "cis". Посмотрите на
следующий текст:

	Это лифт, а не всякие там спектроскопы-микроскопы. Лифт есть ~
	мощное средство передвижения, это первое. А также средство ~
	транспорта. Лифт должен быть как самосвал: приехал, вывалил и ~

Поместите каретку в начале второго предложения и введите команду "cis":


	Это лифт, а не всякие там спектроскопы-микроскопы. А также средство ~
	транспорта. Лифт должен быть как самосвал: приехал, вывалил и ~

Каретка будет находиться между пробелами на месте второго предложения. Теперь
вы можете вставить на это место любое другое предложение.

    Команда "cis" состоит из оператора изменения `c` и текстового объекта "is"
(inner sentence, внутреннее предложение). Также имеется объект "as" (a
sentence, предложение). Различие между этими двумя объектами заключается в
том, что "as" включает пробел после предложения, а "is" не включает. Если бы
нужно было удалить вместе с предложением и пробел после него, то можно было бы
использовать команду "das". Если нужно на месте старого предложения напечатать
свой текст и сохранить пробел после предложения, то используйте команду "cis".

    Текстовые объекты можно использовать и в визуальном режиме. В этом случае
объект текста будет включён в выделение. Визуальный режим не будет прерван,
поэтому можно будет применять текстовые объекты несколько раз. Например,
переключившись в визуальный режим, попробуйте выбрать предложение при помощи
команды "as". Для включения в выделение новых предложений можно повторять
команду "as" до тех пор, пока не будет выделена вся область, над которой
необходимо провести операцию.

Перечень текстовых объектов можно посмотреть в параграфе |object-motions|.

==============================================================================
*04.9*  Режим замены

    По команде `R` (латинская прописная буква R) происходит переключение
редактора Vim в режим замены. В этом режиме символы, которые набираются,
заменяют символы, расположенные под кареткой. Так продолжается до тех пор,
пока не будет нажата клавиша <ESC>. Приведём пример.

	Однажды в студёную пору ~
			   Rзимнюю<ESC>

	Однажды в студёную зимнюю ~

    обратите внимание, что в этом примере команда заменила четыре символа на
шесть других. По команде `R` строка автоматически расширяется, если
заканчиваются символы для замены. Текст, набираемый с использованием команды
`R`, не переносится на следующую строку.

Между режимами вставки и замены можно переключаться клавишей <INSERT>.

    Если в режиме замены воспользоваться клавишей <BACKSPACE>, то старый текст
будет восстанавливаться по мере нажатия на клавишу. Таким образом, эта клавиша
работает вместо команды отмены для последнего набранного символа.

==============================================================================
*04.10* Заключение

    Операторы, команды перемещения и текстовые объекты предоставляют
возможность для создания множества комбинаций. Если знаете, как всё это
работает, то можно использовать N операторов с M командами перемещения для
составления N * M команд!

Со списком доступных операторов можно ознакомиться в параграфе |operator|.

Например, для удаления фрагментов текста существует множество способов. Вот
лишь несколько наиболее употребимых:

x	удалить символ под кареткой (сокращение для "dl")
X	удалить символ перед кареткой (сокращение для "dh")
D	удалить текст от позиции каретки до конца строки (сокращение для "d$")
dw	удалить текст от позиции каретки до начала следующего слова
db	удалить текст от позиции каретки до начала предыдущего слова
diw	удалить слово под каретки (исключая пробел)
daw	удалить слово под кареткой (включая пробел)
dG	удалить до конца файла
dgg	удалить текст от позиции каретки до начала файла

    Если вместо оператора `d` использовать оператор `c`, то получатся
соответствующие команды замены, а с оператором `y` будет набор команд для
копирования и вставки текста, и так далее.

Вот ещё несколько команд для изменения текста, о которых мы пока нигде не
упоминали:

	~       Изменение регистра символа под кареткой и перемещение каретки
		к следующему символу. Это не оператор (если только не
		установлен параметр 'tildeop'), поэтому нет возможности
		использовать с тильдой команды перемещения. Команда `~`
		работает и в визуальном режиме — выполняется изменение
		регистра всех выделенных символов.

	I       Переключение в режим вставки после перемещения каретки к
		первому пробельному символу строки.

	A       Переключение в режим вставки после перемещения каретки в конец
		строки.

==============================================================================

Следующая глава: |usr_05.txt|  Настройка программы
Авторские права: см. |manual-copyright|
© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

vim:tw=78:ts=8:noet:ft=help:norl:
