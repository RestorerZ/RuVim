*usr_32.txt*	       для Vim version 9.0	     редакция от 28 июля 2010

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		   Древовидная структура хранения изменений

В редакторе Vim реализован механизм многоуровневой отмены изменений, и
достигается это благодаря хранения изменений текста в виде древовидной
структуры. Например, при отмене нескольких правок в тексте и внесение после
этого других правок, будет создана новая «ветвь» в данной структуре. В этой
главе описывается как работать с данной структурой и отдельными её частями.

|32.1|	Возврат к ранее сохранённому состоянию
|32.2|	Учёт изменений
|32.3|	Обход древовидной структуры хранения изменений
|32.4|	Путешествие во времени

 Следующая глава: |usr_40.txt|  Создание новых команд
Предыдущая глава: |usr_31.txt|  Работа с графическим интерфейсом
      Оглавление: |usr_toc.txt|

==============================================================================
*32.1* Возврат к ранее сохранённому состоянию

Если после внесения некоторых правок наиболее быстрым способом их отменить
будет вернуться к тому состоянию документа, когда он был сохранён последний
раз, то это можно сделать следующей командой:

>
	:earlier 1f
<

(здесь буква «f» означает «file», «файл»)

Эту команду можно повторять несколько раз для возврата к более ранним
состояниям файла. Или для ускорения этого процесса указать значение счётчика
отличного от значения 1.

Если возврат был слишком далеко назад, то для восстановления более позднего
состояния можно отдать команду

>
	:later 1f
<

Учитывайте, что эти команды применяются в той последовательности, в какой были
сохранены изменения. Это имеет значение в том случае, если после отмены
каких‐то изменений были внесены другие правки. Более подробно это будет
освещено в следующем параграфе.

Так же обратите внимание, что здесь говорится о записанном текстовом файле. О
записи в файл информации о самих изменениях, см. в параграфе
|undo-persistence|.

==============================================================================
*32.2* Учёт изменений

В параграфе |02.5| мы обсуждали на примере одной строки последовательную
отмену и возврат изменений. Но эти действия могут выполняться не только
линейно, а и с некоторыми вариациями. Это происходит тогда, когда после отмены
изменений были внесены какие‐то правки. Эти новые изменения и являются
ветвлениями в древовидной структуре хранения изменений.

Чтобы это продемонстрировать, для начала наберём слово «раз». Теперь, как
первую правку, вставим перед этим словом слово «ещё ». А потом, переместим
каретку к букве «е» и изменим слово «ещё» на слово «пару». Таким образом, у
нас имеется две правки, под номером 2 и под номером 3, и три состояния текста:

		раз ~
		 |
	    изменение 2
		 |
	      ещё раз ~
		 |
	    изменение 3
		 |
	      пару раз ~

Если теперь отменить одну из правок, вернуть к «ещё раз», и изменить «раз» на
«как», то будет создано ветвление в структуре хранения изменений:

		раз ~
		 |
	    изменение 2
		 |
	      ещё раз ~
	      /     \
    изменение 3	    изменение 4
        |	        |
    пару раз	     ещё как ~

Воспользуемся теперь командой |u| для отмены операции. Если отдать эту команду
дважды, то мы получим слово «раз». Используем команду |CTRL-R| для возврата
изменений и в результате получим «ещё раз». Повтор команды |CTRL-R| приведёт к
«ещё как». Таким образом, при использовании команд отмены и возврата операций,
мы будет передвигаться вверх и вниз по той ветви, которая была последней в
древовидной структуре хранения изменений.

Как видно, важен порядок внесения изменений, так как команды отмены и возврата
не учитывают изменения в контексте. После каждой правки будет новое состояние
текста.

Обратите внимание, что в приведённых выше иллюстрациях пронумерованы только
изменения, текст же ни как не идентифицируется. Ссылки на текст даются по
номеру изменения указанного выше него. Правда иногда и по номеру изменения,
которое находится ниже, особенно при перемещении по древовидной структуре
вверх, чтобы показать, какое изменение было отменено.

==============================================================================
*32.3* Обход структуры хранения изменений

Так как же теперь вернуть текст «пару раз» в примере показанном выше? Для
этого можно воспользоваться такой командой:

>
	:undo 3
<

После исполнения этой команды будет отображаться текст «пару раз» находящийся
ниже изменения под номером 3. Команда |:undo| используется для обхода по
древовидной структуре изменений.

Сделаем ещё одно изменение, исправим слово «пару» на слово «на»:

		раз ~
		 |
	    изменение 2
		 |
	      ещё раз ~
	      /     \
    изменение 3	    изменение 4
        |	        |
    пару раз	     ещё как ~
        |
    изменение 5
	|
    на раз ~

Представьте, что после этого изменения потребовалось вернуть обратно текст
«ещё как». Для этого воспользуемся командой |g-|, по которой будет выполнен
возврат к предыдущей правке. Таким образом, команда |g-| не выполняет обход
древовидной структуры по восходящему или нисходящему направлению, а переходит
к предыдущему изменению относительно текущему.

Можно повторно применить команду |g-|, чтобы просмотреть изменения текста:
    ещё как ~
    пару раз ~
    ещё раз ~
    раз ~

Воспользуйтесь командой |g+| для просмотра изменений в прямом порядке:
    раз ~
    ещё раз ~
    пару раз ~
    ещё как ~
    на раз ~

Использование команды |:undo| полезно в том случае, когда известно к какому по
счёту изменению требуется перейти, а команды |g-| и |g+| — когда точно не
известен порядок изменений.

Для многократного повтора команды |g-| или |g+| можно указать счётчик перед
самой командой.

==============================================================================
*32.4* Путешествие во времени

При продолжительной работе над текстом соответственно увеличивается и
структура хранения изменений. Так как же тогда вернуться к тому тексту,
который был несколько минут назад.

Чтобы увидеть имеющиеся ветвления в древовидной структуре хранения изменений,
воспользуйтесь этой командой

>
	:undolist
<    № абс.	№ отн.	  когда		    сохранено~
	3	    2	  16 секунд назад~
	4	    3	  5 секунд назад~

Результатом выполнения этой команды будет перечисление номеров ветвлений и
конечных изменений в каждом из них и когда они были сделаны. Предположим, что
состояние текста находится после изменения номер 4, то есть соответствует
слову «ещё как», тогда можно вернуться к состоянию текста, которое было десять
секунд назад по такой команде:

>
	:earlier 10s
<

В зависимости от того, как долго выполняется правка текста, таковой и будет
конечная позиция в древовидной структуре хранения изменений. Для команды
|:earlier| возможны следующие аргументы для указания времени: "m" (minute) для
указания минут, "h" (hour) для указания часов и "d" (day) для указания дней.
Чтобы вернуться к самому началу изменений, используйте большое значение для
указания времени возврата, например,

>
	:earlier 100d
<

Для перемещения вперёд во времени, используйте команду |:later|, например,

>
	:later 1m
<

Для этой команды поддерживаются такие же аргументы указания времени, как и для
команды |:earlier|.

Если требуется получить дополнительные подробности о древовидной структуре
хранения изменений или управления этой информацией, то используйте встроенную
функцию |undotree()|. Чтобы увидеть возвращаемые этой функцией данные,
воспользуйтесь командой

>
	:echo undotree()
<

==============================================================================
Следующая глава: |usr_40.txt| Создание новых команд
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:ft=help:norl:
