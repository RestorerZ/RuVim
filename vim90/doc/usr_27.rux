*usr_27.txt*	       для Vim version 9.0	     редакция от 24 июля 2019

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

			   Шаблоны и команды поиска


В редакторе Vim реализованы достаточно мощные средства поиска с применением
разнообразных шаблонов, и в параграфе |03.9| главы 3 рассматривалось несколько
простых примеров задания поисковых шаблонов. В этой же главе рассказывается о
наиболее часто употребляемых элементах шаблонов. Более подробное описание
шаблонов можно прочитать здесь — |шаблон|.

|27.1|  Поиск без учёта регистра символов
|27.2|  Сквозной поиск по документу
|27.3|  Смещение относительно найденого фрагмента
|27.4|  Квантификаторы
|27.5|  Варианты
|27.6|  Символьные диапазоны
|27.7|  Символьные классы
|27.8|  Поиск с учётом разрыва строк
|27.9|  Примеры

 Следующая глава: |usr_28.txt|  Структурирование текста
Предыдущая глава: |usr_26.txt|  Выполнение повторяющихся операций
Содержание: |usr_toc.txt|

==============================================================================
*27.1*  Поиск без учёта регистра символов

При начальных настройках поиск в редакторе Vim зависим от регистра символов,
использованных в шаблоне. Запросы "Include", "INCLUDE" и "include"
воспринимаются как три разных слова, и будет найдено только одно из этих слов.
Установка параметра 'ignorecase' позволяет включить регистронезависимый поиск.
Пример.

>
	:set ignorecase
<

Теперь, если повторить поиск для слова «include», то будут найдены также слова
«Include», «INCLUDE» и «InClUDe». (Чтобы наглядно видеть на экране совпадения
с шаблоном поиска, установите параметр 'hlsearch'). Отключить
регистронезависимый поиск можно по команде

>
	:set noignorecase
<

Однако оставим этот параметр включённым и попробуем поискать слово «INCLUDE».
Совпадения с шаблоном останутся без изменений. Теперь, установим параметр
'smartcase'

>
	:set ignorecase smartcase
<

И если в шаблоне есть хотя бы один символ в верхнем регистре, то поиск будет
регистрозависимым. Иными словами, если необходимо точное соответствие только
слову с символами в верхнем регистре, то укажите его в шаблоне так, как оно
есть, в противном случае просто набирайте шаблон строчными буквами. Разве не
классно? Вот что будет найдено с обоими включёнными параметрами в зависимости
от шаблона:

	шаблон                  совпадение с ~
	слово                   слово, Слово, СЛОВО, СлОВо и т.д.
	Слово                   Слово
	СЛОВО			СЛОВО
	СлОВо                   СлОВо


РАЗОВОЕ ПРИМЕНЕНИЕ РЕГИСТРОЗАВИСИМОГО ПОИСКА

Если необходимо отменить регистрозависимый характер поиска для одного шаблона,
то начните шаблон с указания флага "\c". А использование флага "\C", наоборот,
сделает данный шаблон зависимым от регистра. При использовании в шаблоне флага
"\c" или "\C", значение параметров 'ignorecase' и 'smartcase' не учитывается.

	шаблон                  совападение с ~
	\Cслово                 слово
	\CСлово                 Слово
	\cслово                 слово, Слово, СЛОВО, СлОВо и т.д.
	\cСлово                 слово, Слово, СЛОВО, СлОВо и т.д.

Преимущество использования флагов "\c" и "\C" состоит в том, что они связаны с
самим шаблоном. Поэтому, независимо от текущих значений параметров
'ignorecase' и 'smartcase', такой шаблон можно повторно задействовать из
журнала поиска с таким же результатом, как и до этого.

	Примечание.
	Действие в шаблонах поиска элементов, начинающихся с символа «\»,
	зависит от значения параметра 'magic'. В данной главе подразумевается,
	что этот параметр установлен, поскольку это стандартное и
	рекомендованное значение параметра. Если изменить значение параметра
	'magic', то многие шаблоны поиска перестанут работать правильно.

	Примечание.
	Если поиск выполняется дольше, чем ожидалось, то его можно прервать
	командой CTRL-C в UNIX-подобных системах, и CTRL-BREAK в системах MS
	Windows.

==============================================================================
*27.2* Сквозной поиск по документу

Как правило, прямой поиск выполняется в направлении от текущего расположения
каретки к окончанию документа. Если искомое не было найдено в этой части
документа, то поиск продолжится уже от начала документа до позиции каретки,
где он и был начат, пока таким образом не будет просмотрен весь документ.
    Имейте в виду, что повтор поиска по команде `n` рано или поздно приведёт к
первому найденному совпадению. Если этого не заметить и проскочить это место,
то поиск так можно продолжать до бесконечности. Чтобы не допустить этой
ситуации, в редакторе Vim выводится такое предупреждающее сообщение:

    Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа ~

Если используется команда `?` для поиска в обратном направлении, то сообщение
будет следующее:

    Поиск будет продолжен от НИЖНЕЙ ГРАНИЦЫ документа ~

Чтобы нагляднее видеть, где находится первое совпадение, включите «линейку»,
установив параметр 'ruler'. Пример.

>
	:set ruler
<

Теперь в редакторе Vim будет показываться позиция каретки в нижнем правом углу
окна (или в строке состояния):

    101,29       84% ~

Первое число это номер строки. Запомните его при первом совпадении, чтобы не
пойти на второй круг при поиске.


ОТКЛЮЧЕНИЕ СКВОЗНОГО ПОИСКА ПО ДОКУМЕНТУ

Чтобы отключить продолжение поиска от противоположной границы документа,
используйте команду

>
	:set nowrapscan
<

Теперь при достижении нижней границы файла появится сообщение об ошибке

    E385: Достигнута нижняя граница документа. Нет совпадений с постояно ~

В этом случае, чтобы найти все соответствия, можно перейти в начало файла по
команде `gg` и вести поиск до появления такого сообщения об ошибке. При поиске
в обратном направлении по команде `?`, в конце поиска появится сообщение

    E384: Достигнута верхняя граница документа. Нет совпадений с постояно ~

==============================================================================
*27.3*  Смещение относительно найденого фрагмента

По умолчанию, после выполнения команды поиска, каретка помещается в начало
найденного соответствия шаблону. При использовании смещения можно указать,
куда должна быть перемещена каретка, после того как будет найдено совпадение с
шаблоном. Для команды поиска в прямом направлении `/`, смещение указывается
добавлением наклонной черты (/) и величины смещения. Пример.

>
	/умолчанию/2
<

По приведённой команде будет выполнен поиск соответствия шаблону "умолчанию" и
каретка перемещена в начало второй строки после строки с найденным словом.
Применив эту команду к предыдущему абзацу, мы увидим, как будет найдено на
первой строке слово «умолчанию» и затем каретка переместится на две строки
вниз в соответствии с заданным смещением.

Если заданным смещением является число, то каретка будет помещена в начало
строки, отстоящей от строки с соответствующим словом на указанное в смещении
число строк. Число, задаваемое как смещение, может быть отрицательным или
положительным. При положительной величине смещения, каретка перемещается вниз
по тексту, при отрицательной величине, каретка перемещается вверх по тексту.


СИМВОЛЬНЫЕ СМЕЩЕНИЯ

Смещение "e" (end, конец) указывает на смещение к концу слова, совпадающего с
искомым шаблоном. Команда

>
	/констант/e
<

вызывает перемещение каретки к последнему символу соответствия, в данном
случае к символу «т» в слове «констант». Посредством указания числа совместно
со смещением "e", можно задавать количество символов, начиная от последнего
символа совпадения, на которое следует переместить каретку. Например, по
команде

>
	/констант/e+1
<

каретка перемещается на один символ от последнего символа слова,
соответсвующего шаблону "констант". При положительном значении смещения,
каретка перемещается вправо, при отрицательном — влево. Например, по команде

>
	/констант/e-1
<

каретка будет перемещена к символу «н» в слове «констант».

Если смещение указано как символ "b" (beginning, начало), то каретка
перемещается в начало совпадения. Это может показаться не столь полезным,
поскольку отсутствие смещения "b" выполняет ту же самую операцию, но со
смещением "b" также можно указывать положительные или отрицательные значения.
Например, по команде

>
	/констант/b+2
<

каретка будет перемещена к началу соответствующего слова и затем на два
символа вправо. Таким образом каретка оказывается на символе «н» в слове
«констант».


ПОВТОРНЫЙ ПОИСК С ДРУГИМ СМЕЩЕНИЕМ

Чтобы повторить поиск по указанному ранее шаблону, но с использованием нового
смещения, не указывайте в новом поисковом запросе шаблон. Например,

>
	/этот
	//e
<

что равноценно команде

>
	/этот/e
<

Для повторного поиска со смещением, указанным ранее, используйте команду

>
	/
<

То же самое делается, кстати, и по команде `n`. Для повторного поиска без
использования ранее указанного смещения, применяйте команду

>
	//
<


ПОИСК В ОБРАТНОМ НАПРАВЛЕНИИ

С командой поиска в обратном направлении `?` смещения используются аналогичным
образом, но для отделения шаблона от смещения используется символ «?» вместо
символа «/». Пример.

>
	?констант?e-2
<

Символы смещения "b" и "e" сохраняют своё значение, а не меняют его на
противоположное, при использовании команды поиска в обратном направлении `?`.


НАЧАЛЬНАЯ ПОЗИЦИЯ ПОИСКА

Обычно поиск начинается с позиции, в которой находится каретка. При указании
числового смещения это может привести к некоторым осложнениям. Например,

>
	/констант/-2
<

По этой команде поиска будет найдено следующее слово «констант» и каретка
перемещена на две строки вверх. Если сейчас воспользоваться командой `n` для
повтора поиска, то будет найдено то же самое соответствие, что и раннее, и
возврат каретки обратно в ту же самую позицию! Но всё может быть даже хуже!
Предположим, что на следующей строке, после строки, в которую была перемещена
каретка при выполнении предыдущей команды, также есть слово «констант». В
таком случае, это соответствие будет обнаружено, и каретка будет перемещена
ещё дальше назад по тексту.

При указании символьного смещения в редакторе Vim сохраняется информация об
этом, так что при повторном поиске позиция каретки будет соответствующим
образом скомпенсирована, чтобы то же самое соответствие больше не стояло на
пути команды поиска.

==============================================================================
*27.4*  Квантификаторы

В шаблоне поиска символом «*» (звёздочка) указывается, что предшествующий ему
элемент шаблона может повторяться любое количество раз, в том числе и нулевое.
Например, по шаблону

>
	/а*
<

будут обнаружены совпадения с «а», «аа», «ааа» и т. п., в том числе и пустая
строка, поскольку нулевое число совпадений также считается соответствием
шаблону. В шаблонах символ "*", так же называемый квантификатором или
повторителем, применяется только к элементу, который стоит непосредственно
перед ним. Шаблону "аб*" будут соответствовать «а», «аб», «абб», «аббб» и т.
п. Чтобы найти соответствие нескольким символам как одной подстроке
повторяющейся несколько раз, они должны быть представлены как один элемент
шаблона. Это можно сделать, поместив шаблон внутри круглых скобок, экранировав
их символом наклонной черты, вот так "\(" и "\)". Таким образом, по команде

>
	/\(аб\)*
<

будут найдены следующие соответствия: «аб», «абаб«, «абабаб» и т. п., а также
«», т. е. пустая строка.

Чтобы избежать появлению пустой строки среди результатов поиска шаблона,
используйте символы "\+". Этот квантификатор указывает на то, что
предшествующий элемент шаблона может повторяться один и более раз. Шаблону

>
	/аб\+
<

будут соответствовать «аб», «абб», «аббб« и т. п., но не будет соответствовать
«а» без последующего «б».

Для указания на возможный элемент шаблона, используйте символы "\=". Данный
повторитель указывает на совпадение ноль или один раз. Например, шаблону

>
	/авторы\=
<

будут соответствовать как «автор», так и «авторы».


ТОЧНОЕ УКАЗАНИЕ КОЛИЧЕСТВА СОВПАДЕНИЙ С ЭЛЕМЕНТОМ ШАБЛОНА

Чтобы указать точное значение повтора элемента шаблона, используйте форму
"\{n,m}". Здесь «n» и «m» это числа. При поиске, предшествующий элемент должен
повторяться от "n" до "m" раз |включительно|. Пример.

>
	/аб\{3,5}
<

будут соответствовать «аббб», «абббб» и «аббббб». Если значение "n" опущено,
то оно принимается равным нулю. Если опущено значение "m", то оно принимается
равным бесконечности. Если опущено всё выражение ",m", то оно принимается
равным "n". Примеры:

	шаблон          возможное количество повторений ~
	\{,4}           0, 1, 2, 3 или 4
	\{3,}           3, 4, 5 и т. д.
	\{0,1}          0 или 1, то же, что и \=
	\{0,}           0 и более, то же, что и *
	\{1,}		1 и более, то же, что и \+
	\{3}            3


ПОИСК МИНИМАЛЬНО ВОЗМОЖНОГО СООТВЕТСТВИЯ

В предыдущих примерах указанными квантификаторами при поиске соответствия
закватывалось как можно больше символов («жадные» квантификаторы). Чтобы
захватывалось минимально возможное количество соответствующих символов,
используйте форму "\{-n,m}" («нежадные» квантификаторы). Она работает точно
так же, как и "\{n,m}", за исключением того, что в результат поиска будет
включено минимальное количество повторяющихся элементов. Например, шаблону

>
	/аб\{-1,3}
<

будут соответствовать «аб» в «аббб». В действительности, по этому шаблону
никогда не будет найдено более одного символа b, поскольку в этом нет никакой
необходимости. Чтобы было найдено больше, чем указано в минимальном
ограничении, требуется какое-либо ещё влияние на шаблон. При отсутствии "n" и
"m" применяются те же самые правила. Более того, можно убрать оба значения,
оставляя в шаблоне лишь "\{-}". При таком квантификаторе в шаблоне будет
найден предшествующий элемент минимальное количество раз, от нуля до
бесконечности. Сам по себе элемент всегда будет указывать на нулевое
количество повторений. А вот что будет, если такая конструкция используется
совместно с чем-то ещё:

>
	/а.\{-}б
<

По такому шаблону будет найдено «аяб» в строке «аябяб». Если бы использовался
шаблон

>
	/а.*б
<

то было бы найдено максимально возможное количество символов, то есть
результатом было бы целая строка «аябяб».

==============================================================================
*27.5*  Варианты

Для обозначения в шаблоне операции "или" используются символы "\|". Пример.

>
	/foo\|bar
<

Такому шаблону соответствует как «foo», так и «bar». Можно использовать и
несколько вариантов

>
	/один\|два\|три
<

будут соответствовать любое из слов «один», «два» или «три». Чтобы
соответствие варианту в шаблоне могло повторяться один и более раз, заключите
определение вариантов в скобки "\(" и "\)". Пример.

>
	/\(foo\|bar\)\+
<

Шаблону будут соответствовать «foo», «foobar», «foofoo», «barfoobar» и т. п.
Другой пример,

>
	/end\(if\|while\|for\)
<

ему соответствует любое из слов «endif», «endwhile» или «endfor».

Похожий по смыслу действия оператор в шаблоне — "\&". Он требует, чтобы оба
варианта совпадали в одном и том же найденном соответствии. Само соответствие
при этом использует последний указанный вариант. Например,

>
	/forever\&...
<

Соответствует «for» в «forever», но не в «fortuin».

==============================================================================
*27.6*  Символьные диапазоны

При поиске совпадений с «а», «б» или «в» можно использовать достаточно простой
шаблон "/а\|б\|в", но чтобы найти совпадение с одной из букв от «а» до «я»,
потребуется задать весьма длинный шаблон с перечислением всех вариантов. Но
существует краткая запись такого шаблона, это  

>
	/[а-я]
<

Конструкцией [] задаётся поиск соответствия для одного из указанных символов.
Внутри квадратных скобок перечисляются различные варианты символов, которые
могут быть использованы. Например,

>
	/[0123456789abcdef]
<

определяет соответствие шестнадцатеричной цифре. Для символов, находящихся
рядом в таблице, можно также задавать символьный диапазон. Диапазон "0-3"
можно подставить вместо «0123», "ь-я" вместо «ьэюя». Таким образом, предыдущий
пример шаблона может быть сокращён до

>
	/[0-9a-f]
<

Для включения в перечень символов самого символа «-», указывайте его в самом
начале или конце перечня. Кроме того, можно использовать такие специальные
символы (их можно использовать в любом месте шаблона, не только в []):

	\e      <Esc>
	\t      <Tab>
	\r      <CR>
	\b      <BS>

Имеется также несколько особых возможностей применения диапазонов символов [],
см. |/[]|.


ДИАПАЗОН С ИСКЛЮЧЕНИЕМ

Для того чтобы исключить какой-либо символ из диапазона, перечисление должно
начинаться с символа "^". В этом случае диапазон будет соответствовать любому
символу, кроме указанных в []. Пример.

>

	/"[^"]*"
<

где
	 "	  двойная кавычка
	  [^"]    любой символ, кроме двойной кавычки
	      *	  любое количество раз
	       "  ещё раз двойная кавычка

Это соответствует «"foo"» и «"3!x"», включая двойные кавычки.


СТАНДАРТНЫЕ ДИАПАЗОНЫ

Некоторые диапазоны используются в работе постоянно. Для таких диапазонов в
редакторе Vim имеются короткие обозначения. Например,

>
	/\a
<

будет соответствовать алфавитным символам. Это эквивалентно использованию
шаблона "/[a-zA-Z]". Вот ещё несколько примеров:

      диапазон  соответствует		    эквивалент ~
      \d	цифре			    [0-9]
      \D	не цифре		    [^0-9]
      \x	шестнадцатеричной цифре	    [0-9a-fA-F]
      \X	не шестнадцатеричной цифре  [^0-9a-fA-F]
      \s	пробельному символу	    [         ] (табуляция и пробел)
      \S	не пробельному символу      [^        ] (не табуляция и пробел)
      \l	букве в нижнем регистре     [a-z]
      \L	не букве нижнего регистра   [^a-z]
      \u	букве в верхнем регистре    [A-Z]
      \U	не букве верхнего регистра  [^A-Z]

	Примечание.
	Использование стандартных диапазонов позволяет осуществлять поиск
	значительно быстрее, чем с использованием их эквивалентов. Стандартные
	диапазоны не могут использоваться внутри []. Поэтому, "[\d\l]" не
	будет соответствовать цифре или букве в нижнем регистре. Вместо этого,
	используйте шаблон "\(\d\|\l\)".

Полный перечень стандартных диапазонов см. в |/\s|.

==============================================================================
*27.7*  Символьные классы

Символьный диапазон определяет соответствие заданному набору символов.
Символьный класс работает похожим образом, но с одним важным отличием — набор
символов можно переопределить без изменения шаблона поиска. Например,
попробуйте выполнить поиск по такому шаблону:

>
	/\f\+
<

Здесь элемент "\f" обозначает символы, которые могут входить в наименование
файлов. Таким образом, шаблон соответствует строке, которая может быть
названием файла. Набор символов, которые могут входить в наименование файла,
зависит от операционной системы. В системе MS Windows этот набор включает
обратную наклонную черту, а в UNIX‐подобных системах — нет. Перечень символов
определяется значением параметра 'isfname'. Значение этого параметра по
умолчанию для UNIX‐подобных систем следующее:

>
	:set isfname
	isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=
<

Для других систем значение по умолчанию отличается. Поэтому можно пользоваться
шаблоном с классом "\f" для поиска названий файла, и он автоматически будет
подстраиваться под используемую операционную систему.

	Примечание.
	В действительности, UNIX позволяет использовать в названии файла
	практически любой символ, включая пробел. Поэтому теоретически,
	включение этих символов в значение параметра 'isfname' было бы
	правильным, но это сделало бы невозможным определение окончания
	названия файла в тексте. Поэтому принято указанное выше компромиссное
	значение этого параметра.

Другие символьные классы:

	класс		соответствует			параметр  ~
	\i		символам наименований		'isident'
	\I		как \i, исключая цифры
	\k		символам управляющих слов	'iskeyword'
	\K		как \k, исключая цифры
	\p		печатаемым символам		'isprint'
	\P		как \p, исключая цифры
	\f		символам названий файлов	'isfname'
	\F		как \f, исключая цифры

==============================================================================
*27.8*  Поиск с учётом разрыва строк

В редакторе Vim можно осуществлять поиск по шаблону, включающему символы
перевода строки. Для этого необходимо указать, где происходит перевод строки.
Чтобы указать на перевод строки в определённом месте шаблона, используйте
символьный класс "\n".

>
	/это\nслово
<

будет соответствовать слову «это» в конце строки, если следующая строка
начинается со слова «слово». Чтобы также искать соответствия строке
«это слово», шаблон должен быть составлен так, чтобы соответствовать пробелу
или переносу строки. Это достигается использованием такой конструкции "\_s".

>
	/это\_sслово
<

Чтобы шаблон мог соответствовать любому количеству пробельных символов,
используйте шаблон

>
	/это\_s\+слово
<

Такой шаблон также будет соответствовать и такой ситуации: «это   » в конце
одной строки и «   слово» в начале другой.

Диапазон "\s" соответствует пробельному символу, а "\_s" соответствует или
пробельному символу или символу перевода строки. Аналогично, диапазон "\a"
соответствует алфавитному символу, а "\_a" соответствует символу алфавита или
символу переводу строки. При помощи модификатора "_" можно изменить подобным
образом и другие символьные классы и диапазоны.

Соответствие символу перевода строки можно также определить и для многих
других элементов при указании перед ними модификатора "\_" . Например, "\_."
соответствует любому символу или переводу строки.

	Примечание.
	Шаблон "\_.*" соответствует всем символам до конца файла. Будьте
	осторожны с использованием этого шаблона, поскольку поиск по нему
	может быть очень медленным.

Другой пример, шаблон "\_[]" — символьный диапазон, включающий перевод строки.

>
	/"\_[^"]*"
<

Этот шаблон позволяет найти текст в двойных кавычках, который может быть
разделён на несколько строк.

==============================================================================
*27.9*  Примеры

Вот ещё несколько полезных примеров задания шаблонов для поиска. В них
показано, как можно комбинировать элементы, которые обсуждались в этой главе.


ПОИСК АВТОМОБИЛЬНЫХ НОМЕРНЫХ ЗНАКОВ ШТАТА КАЛИФОРНИЯ

Номерные знаки в Калифорнии выглядят так: «1MGU103». Они включают цифру, три
символа в верхнем регистре и три цифры. Иными словами, говоря на языке
шаблонов:

>
	/\d\u\u\u\d\d\d
<

Другой способ задания шаблона заключается в применении числа повторений:

>
	/\d\u\{3}\d\{3}
<

Можно также использовать диапазоны []:

>
	/[0-9][A-Z]\{3}[0-9]\{3}
<

Так каким же шаблоном пользоваться лучше всего? А любым, который сможете легко
запомнить, чем проще, тем лучше. Если без труда запоминаете все три варианта,
то лучше всё-таки воздержаться от использования третьего, поскольку он требует
слишком много лишних нажатий на клавиши и медленнее в работе.


ПОИСК НАИМЕНОВАНИЙ ИДЕНТИФИКАТОРОВ

В программах на языке Си, да и многих других языках программирования,
идентификатор начинается с буквы и последующих букв и цифр. Также может
использоваться символ подчёркивания. Шаблон для поиска наименований
идентификаторов выглядит так:

>
	/\<\h\w*\>
<

где символы "\<" и "\>" используются для поиска целых слов. Символьный класс
"\h" эквивалентен "[A-Za-z_]", а "\w" это то же самое, что и "[0-9A-Za-z_]".

	Примечание.
	Поведение метасимволов "\<" и "\>" полагается на значение параметра
	'iskeyword'. Если в его значении указан, например, символ "-", то
	наименование идентификатора "ident-" не будет найдено.
	В этой ситуации используется шаблон

>
	/\w\@<!\h\w*\w\@!
<

	который проверяет соответствие "\w" перед и после наименования
	идентификатора. См. |/\@<!| и |/\@!|.

==============================================================================

Следующая глава: |usr_28.txt|  Структурирование текста
Авторские права: см. |авторские_права_на_документацию|
Перевод на русский язык: © Restorer, 2017—2022, restorer@mail2k.ru

vim:tw=78:ts=8:noet:ft=help:norl:
