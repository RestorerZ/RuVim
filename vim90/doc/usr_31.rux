*usr_31.txt*	       для Vim version 9.0	     редакция от 28 июля 2020

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		       Работа с графическим интерфейсом


Редактор Vim изначально прекрасно работал и работает как консольная программа,
но его вариант с графическим интерфейсом пользователя имеет несколько своих
изюминок. Например, для команд, в которых требуется наименования файлов, можно
использовать системный диалог поиска и выбора файлов. Также, в случае, когда
требуется выбор действий со стороны пользователя, можно использовать системное
диалоговое окно. И, например, клавиши быстрого доступа позволяют пользоваться
меню программы более эффективно.

|31.1|	Диалог выбора файлов
|31.2|	Диалог запроса подтверждения действия
|31.3|	Клавиши быстрого доступа к меню
|31.4|	Положение и размеры окна программы Vim на экране
|31.5|	Прочее

 Следующая глава: |usr_32.txt|  Древовидная структура хранения изменений
Предыдущая глава: |usr_30.txt|  Редактирование текстов программ
      Содержание: |usr_toc.txt|

==============================================================================
*31.1*	Использование диалога выбора файлов

При выборе пункта Открыть меню Файл будет вызван обычный системный диалог
выбора файлов, с помощью которого можно легко найти необходимый файл для
редактирования. Но что если требуется открыть новый файл с разбивкой
существующего окна, в котором отображается и существующий и новый файл? В меню
нет такого пункта [Прим. перевод. на момент перевода этого документа уже давно
существует такой пункт меню. Называется он Открыть в новом окне и находится в
меню Файл. Тем не менее, дальнейшее описание всё равно полезно для понимания
того, как вызывать диалог выбора файла из какой-нибудь другой команды].
    Вместо того чтобы последовательно выбирать такие пункты как Разделить меню
Окно и затем Открыть в меню Файл, попробуем выполнить всё одной командой.
Поскольку в редакторе Vim большинство команд вызывается через командную
строку, нет ничего необычного в том, что из командной строки можно также
вызвать и диалог выбора файла. Чтобы использовать такой диалог совместно с
командой разделения экрана, наберите команду ":browse" перед набором команды
":split"

>
	:browse split
<

После выбора файла в открывшемся системном диалоге выбора, будет выполнена
команда ":split" с загрузкой выбранного файла в новое окно. Если в диалоге
выбора файла нажать кнопку Отмена, то открытие файла не произойдёт и не будет
выполнено разделение окна.
    При наборе вышеуказанной команды можно также указать маршрут расположения
файла в качестве аргумента команды. Этот аргумент будет указывать, какой
каталог необходимо открыть в диалоге выбора файла. Пример.

>
	:browse split /etc
<

По этой команде в диалоге выбора файлов будет открыт каталог «/etc».

Команда ":browse" может предшествовать практически любой команде, которая
используется для открытия файла.
    Если в качестве аргумента не указан каталог, то выбор начального каталога
зависит от действующих настроек программы Vim. По умолчанию будет
использоваться тот же каталог, что и в предыдущий раз. Если использовалась
команда ":browse split", чтобы выбрать файл в каталоге «/usr/local/share», то
в следующий раз при исполнении команды ":browse" диалог будет открыт на
каталоге «/usr/local/share».
    Это поведение можно изменить через параметр 'browsedir'. Он может
принимать одно из следующих значений:

	last		использовать предыдущий каталог (по умолчанию);
	buffer		использовать тот каталог, в котором расположен файл из
			текущего буфера;
	current		использовать текущий рабочий каталог.

Например, если текущим каталогом является «/usr», а редактируется файл из
каталога «/usr/local/share/readme», то при исполнении следующих команд

>
	:set browsedir=buffer
	:browse edit
<

будет открыт диалог выбора файлов с содержимым каталога «/usr/local/share». А
по командам

>
	:set browsedir=current
	:browse edit
<

будет отображён диалог выбора файлов с содержимым каталога «/usr».

	Примечание.
	Чтобы не отвлекаться лишний раз на манипулятор «мышь», большинство
	диалогов выбора файлов позволяют использовать клавиши клавиатуры для
	перемещения внутри диалога. Мы не затрагиваем этот вопрос здесь,
	поскольку для каждой операционной системы метод будет свой. В
	редакторе Vim по возможности используется стандартный системный диалог
	выбора файлов, поэтому обращайтесь за дополнительной информацией к
	документации по используемой операционной системе.

Если используется консольный вариант программы Vim, то для выбора файлов можно
задействовать подключаемый модуль диспетчера файлов. Однако для его вызова не
поддерживается команда ":browse". См. |netrw-browse|.

==============================================================================
*31.2*	Диалог запроса подтверждения действия

В редакторе Vim заложен механизм предотвращения случайной перезаписи файлов и
других возможных потерь информации. Если какие‐то действия пользователя будут
расценены как не безопасные, то будет выдано предупреждение с описанием
возможности добавления к исполняемой команде флага "!" для подавления
предупреждения и принудительного исполнения указанной команды.
    Чтобы не приходилось повторно набирать команду с флагом "!", можно
задействовать встроенный в программу Vim механизм отображения запрос на
подтверждение действий. В зависимости от того, какая кнопка в этом запросе
была нажата, «OK» или «Отмена», программой будут выполнены соответствующие
действия.
    Например, после изменения какого‐то файла потребовалось отредактировать
другой файл. Для этого наберём следующую команду:

>
	:confirm edit foo.txt
<

И тогда в редакторе Vim будет отображено примерно такое диалоговое окно:

	+---------------------------------------+ ~
	|  ?					| ~
	|   Сохранить изменения в "bar.txt"?	| ~
	|				        | ~
	|   Да (Y)    Нет (N)   Отмена (C)	| ~
	+---------------------------------------+ ~

В зависимости от сделанного выбора будут выполнены определённые действия.
Для сохранения изменений, нажмите на кнопку "Да". Если не требуется сохранять
изменения, то нажмите на кнопку "Нет". Если необходимо проверить, какие
изменения были внесены, то нажмите на кнопку "Отмена" и тогда произойдёт
возврат в редактируемый файл.

Как и команда ":browse", команда ":confirm" может быть добавлена к большинству
команд, которые приводят к редактированию другого файла. Можно даже сочетать
обе команды:

>
	    :confirm browse edit
<

это приведёт к появлению запроса в том случае, если текущий буфер содержит
изменения. Затем будет отображён диалог выбора файла.

	Примечание.
	В диалоге запроса можно пользоваться клавиатурой. Обычно выбор решения
	можно изменить с помощью клавиши <TAB> или клавиш управления курсором.
	Решение подтверждается нажатием клавиши <ENTER>. Впрочем, это также
	зависит от операционной системы.

Команда ":confirm" применима и в консольном варианте программы. В этом случае,
вместо графического диалога будет выведено сообщение внизу окна редактора Vim,
с предложением нажать ту или иную клавишу для выбора

>
	:confirm edit main.c
<    Сохранить изменения в "безымянный"? ~
    Да ([Y]), Нет (N), Отмена (C):  ~

Чтобы было выполнено требуемое действие, просто нажмите необходимую клавишу
без необходимости подтверждения нажатием клавиши <ENTER>.

==============================================================================
*31.3*	Клавиши быстрого доступа к меню

Как уже говорилось, любую команду редактора Vim можно вызвать при помощи
клавиатуры. С другой стороны, меню в графическом интерфейсе предоставляет
простой способ вызова команд без необходимости запоминания их названий. Но
недостатком графического меню является то, что необходимо отрывать руки от
клавиатуры, чтобы управлять манипулятором «мышь».
    И всё‐таки есть возможность активировать меню и выбрать необходимый пункт
в нём посредством клавиатуры через клавиши быстрого доступа, которые в меню
обозначаются как подчёркнутые символы. Чаще всего (в зависимости от
операционной системы) для этого используют комбинацию клавиш, нажимая клавишу
<ALT> и клавишу с тем символом, который подчёркнут в наименовании пункта меню.
Например, для открытия меню Окно, нажмите <ALT+О> (комбинация клавиш <ALT> и
О). В меню Окно есть пункт Разделить по горизонтали, в котором подчёркнута
буква «г». Чтобы выбрать этот пункт, отпустите клавишу <ALT> и нажмите
клавишу, на которой указана буква «Г».

После того как меню в графическом интерфейсе будет активировано по нажатию
клавиши <ALT>, можно использовать клавиши управления курсором для перемещения
по пунктам и подпунктам меню. По клавише <DOWN> будет выполнено открытие
подпунктов основного меню. По клавише <RIGHT> будет выполнено раскрытие
вложенных пунктов меню, а по клавише <LEFT> их закрытие. Также меню и подменю
можно закрыть по клавише <ESC>. По нажатию клавиши <ENTER> будет выполнен
активный пункт меню.

Возможно возникновение конфликта при использовании клавиши <ALT> в комбинации
с клавшей быстрого доступа к меню с одной стороны, и при использовании клавиши
<ALT> в клавиатурных командах с другой. Для предотвращения этих ситуаций в
редакторе Vim применяется параметр 'winaltkeys'.
    Предустановленным значением является "menu", в этом случае не может быть
назначена в клавиатурной команде клавиша с тем символом, который используется
для быстрого доступа к меню. Все другие клавиши могут применяться в
клавиатурных командах.
    Если для параметра 'winaltkeys' установлено значение "no", то клавиша
<ALT> не может использоваться для выбора пункта меню. Это значит, что все
клавиши могут быть назначены в клавиатурных командах, а для выбора пунктов
меню применяется только указатель манипулятора «мышь».
    Значение "yes" означает, что в реакторе Vim любые комбинации с клавишей
<ALT> используется для выбора меню. Некоторые комбинации с клавишей <ALT>
могут выполнять и другие функции, кроме выбора меню.

==============================================================================
*31.4*	Положение и размеры окна программы Vim на экране

Чтобы узнать текущее положение окна редактора Vim на экране монитора, наберите
команду

>
	:winpos
<

Эта команда сработает только в варианте программы с графическим интерфейсом, и
результат выполнения этой команды выглядит примерно так:

    Координаты верхнего левого угла окна программы по оси X: 4, по оси Y: 24 ~

Значения положения окна указываются в экранных пикселях. Указывая числовые
значения как аргументы данной команды можно менять положения окна программы
Vim на экране. Например, чтобы переместить окно программы на сто пикселей
вправо от указанного положения, задайте следующие аргументы команды:

>
	:winpos 104 24
<

	Примечание.
	Между значениями, полученными по команде ":winpos" и действительным
	положением окна на экране возможно небольшое расхождение, вызванное
	шириной рамки окна. Эта рамка добавляется диспетчером окон.

Данную команду можно использовать в командном файле инициализации программы
Vim, чтобы запускать редактор в строго определённом месте экрана.

Расчёт размера окна программы Vim выполняется исходя из размеров отображаемых
символов. Иными словами, занимаемый размер окна программы на экране монитора
зависит от используемого в редакторе шрифта. Чтобы узнать текущий размер окна
редактора Vim, воспользуйтесь командой

>
	:set lines columns
<

А чтобы изменить размер существующего окна программы Vim, задайте новые
значения для параметра 'lines' и параметра 'columns'. Например,

>
	:set lines=50
	:set columns=80
<

Команда получения размеров окна применима и в консольном варианте программы
Vim, однако установка размеров через присвоение значений параметров работает
не во всех терминалах.

Имеется возможность запустить программу Vim с ГПИ (Gvim) версия для системы
X-Windows с аргументами, определяющими размер и положение окна на экране:

>
	gvim -geometry {ширина}x{высота}+{x-координата}+{y-координата}
<

где {ширина} и {высота} указаны в символах, а {x-координата} и {y-координата}
задаются в пикселах. Пример,

>
	gvim -geometry 80x25+100+300
<

==============================================================================
*31.5*	Прочее

При редактировании сообщений электронной почты также можно использовать
редактор Vim с графическим интерфейсом, указав в качестве редактора программу
gvim. Однако этого не достаточно, так как почтовой программой будет распознано
завершение работы редактора, хотя программа gvim всё ещё работает!
    Дело в том, что при запуске программы gvim по умолчанию происходит
отделение этого процесса от породившего его процесса, — командной оболочки.
Это сделано для того, чтобы при запуске программы gvim из терминала, была
возможность продолжить работу в этом же терминале. Если же требуется, чтобы
запускающая программа дожидалась завершения работы графической оболочки, то
необходимо при запуске программы gvim указать аргумент "-f" (символ «f» в
данном случае означает «foreground», «приоритетный»)

>
	gvim -f file.txt
<

В этом случае программой Vim будет блокироваться командная оболочка до тех
пор, пока не закончено редактирование текста. 


ОТЛОЖЕННЫЙ ЗАПУСК ГРАФИЧЕСКОГО ИНТЕРФЕЙСА

В UNIX‐подобных системах можно запускать программу Vim в терминале с
последующим переключение на графический интерфейс. Это удобно в тех случаях,
когда в одной командной оболочке выполняется сразу же несколько задач. Если
позднее потребуется перейти к варианту программы с графическим интерфейсом, то
для этого достаточно набрать

>
	:gui
<

Программой Vim будет выполнено открытие графического окна и отсоединение от
терминала, которым можно продолжать пользоваться для иных целей. Аргумент "-f"
в этом случае может быть использован для запуска графического интерфейса в
качестве приоритетной задачи ":gui -f".


ФАЙЛ ИНИЦИАЛИЗАЦИИ GVIM

При запуске программы gvim будет выполнена обработка файла gvimrc, точно так
же, как файла vimrc при запуске программы vim. В файле gvimrc указываются
настройки и команды, которые используются редактором только в варианте с
графическим интерфейсом. Например, в этом файле можно указать значение
параметра 'lines' для настройки размера графического окна

>
	:set lines=55
<

Вряд ли имеет смысл изменять значение этого параметра в консольном варианте,
поскольку обычно это не приводит к изменению размера окна терминала (за
исключением терминала xterm, который поддерживает изменение размеров окна).
    При запуске графического интерфейса, поиск файла инициализации gvimrc
выполняется в тех же каталогах, что и для файла инициализации vimrc. Обычное
наименование и расположение этого файла «~/.gvimrc» в UNIX-подобных системах и
«$VIM/_gvimrc» в MS Windows. В переменной окружения $MYGVIMRC записывается
текущее расположение и наименование файла инициализации графического
интерфейса. Наименование этой переменной окружения можно использовать для
редактирования файла инициализации, например

>
	:edit $MYGVIMRC
<

    Если по каким-либо причинам не требуется использовать обычный файл gvimrc,
то при запуске можно указать другой файл инициализации через аргумент "-U"

>
	gvim -U thisrc ...
<

Это позволяет запускать программу gvim с разными настройками, зависящими от
задач редактирования. Например, можно указать другой размер шрифта.
    Чтобы полностью отказаться от считывания файла инициализации, используйте
такое значение аргумента "-U"

>
	gvim -U NONE ...
<

==============================================================================

Следующая глава: |usr_32.txt|  Древовидная структура хранения изменений
Авторские права: см. |manual-copyright|  
© Restorer, перевод на русский язык, 2020, <restorer@mail2k.ru>

vim:tw=78:ts=8:noet:ft=help:norl:
