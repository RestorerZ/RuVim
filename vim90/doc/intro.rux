*intro.txt*          для Vim version 9.0.        редакция от 12 октября 2022 г.


			 СПРАВОЧНИК ПО РЕДАКТОРУ VIM
			      автор Брам Моленар


Введение в редактор Vim						*ref* *reference*

1. Введение			|intro|
2. Редактор Vim и сеть Интернет	|internet|
3. Соавторы			|credits|
4. Условные обозначения		|notation|
5. Введение в режимы редактора	|vim-modes-intro|
6. Переключение между режимами	|mode-switching|
7. Содержимое окна		|window-contents|
8. Терминология			|definitions|

==============================================================================
1. Введение						*intro*

Название Vim это сокращиение от слов Vi IMproved, что означает «улучшенный Vi».
Когда-то это название обозначало Vi IMitation («имитация Vi»), однако после
внесения в программу большого количества изменений смена названия стала вполне
оправдана. Программа Vim — это текстовый редактор, в котором поддерживаются
практически все команды программы Vi операционной системы UNIX, а также
реализовано большое количество новых команд. Этот редактор очень удобен для
правки программного кода, а также разного рода других текстовых файлов.
     Предоставляемая редактором возможность ввода всех команд с клавиатуры
позволяет лучше концентрировать внимание на работе, выполняя все операции с
клавиатуры, не отвлекаясь от того, что отображается на экране. Для тех же,
кому это нужно, в программе реализована поддержка манипулятора «мышь», а также
графический интерфейс с такими его элементами интерфейса, как полосы прокрутки
и меню (см. |gui.txt|).

Обзор этого справочника находится в файле «help.txt», |help.txt|. Посмотреть
файл можно непосредственно в редакторе Vim, для чего требуется нажать клавишу
<HELP> или <F1>, также можно воспользоваться командой |:help| (команда ":help"
вводится без символов вертикальной черты и кавычек).
   В параметре 'helpfile' указывается фактическое расположение файла справки,
если оно отличается от места расположения по умолчанию. По различным темам
документации можно перемещаться как по ссылкам, чтобы перейти к теме,
название которой находится под кареткой, необходимо нажать клавиши CTRL-],
возварат к предыдущей теме осуществляется нажатием клавиш CTRL-T.

Различия между программами Vi и Vim приведены в файле |vi_diff.txt|.

В этом справочнике описываются общие принципы работа редактора Vim в различных
системах. Работа на разных компьютерах и терминалах может иметь небольшие
отличия. В связи с этим, помимо общих указаний, приводимых в этом документе,
для каждой поддерживаемой системы подготовлен отдельный документ, см.
|sys-file-list|.

							*pronounce*
Название Vim произносится не побуквенно, как ви-ей-эм, а в одно слово, как ВОЗ.
Пишется с прописной буквы, как имя собственное, так же, как Лев.

Данный справочник является руководством по всем командам и параметрам
редактора Vim. Это не вводный курс по использованию программы Vi или Vim и
местами содержит довольно специфическую информацию. А для начинающих имеется
практический курс |tutor|. Начинать же изучение редактора Vim лучше с чтения
руководства пользователя |usr_toc.txt|.

							*book* *books*
Большинство книг описывающих программы Vi и Vim содержат раздел для
начинающих, в других же больше освещены какие-то специфические возможности.
Обзор литературы посвящённой редактору Vim расположен по адресу:
	http://iccf-holland.org/vim_books.html

==============================================================================
2. Редактор Vim и сеть Интернет					*internet*

			*www* *WWW*  *faq* *FAQ* *distribution* *download*
Самая свежая информация содержится на веб-сайтах, посвящённых редактору Vim.
Там же можно найти ссылки на последние версии программы. Раздел ЧаВО содержит
часто задаваемые вопросы, где можно найти решение в случае возникновения
сложностей.

	Домашняя страница редактора Vim:  https://www.vim.org/
	Раздел ЧаВО по редактору Vim:     https://vimhelp.org/vim_faq.txt.html
	Раздел загрузки программы:	  https://www.vim.org/download.php


Задать вопрос и найти ответ можно на веб‐сайте https://vi.stackexchange.com/
«Раздел сайта Stack Exchange по программам Vi и Vim - это сайт вопросов и
ответов для всех пользователей текстовых редакторов семейства vi и Vim».

								*news* *usenet*
Новостные группы сети Usenet, на которых обсуждается программа Vim:
	comp.editors
В этой группе обсуждают и другие редакторы. Не забудьте указать, что пишете
о редакторе Vim.
Доступ к группе можно получить здесь:
https://groups.google.com/forum/#!topic/comp.editors

						*mail-list* *maillist*
Перечислим несколько списков рассылки для интересующихся редактором Vim:
<vim@vim.org>					*vim-use* *vim_use*
	Посвящена использованию различных версий редактора Vim. Здесь
	представлены полезные клавиатурные команды, вопросы и ответы, где
	можно получить специализированные версий и так далее. В группе немало
	людей принимает активное участие и отвечает на вопросы, в том числе и
	начинающих пользователей. Не бойтесь задать здесь свой вопрос.
<vim-dev@vim.org>				*vim-dev* *vim_dev* *vimdev*
	Посвящена обсуждению изменений в программе Vim. Новые функциональные
	возможности, версии для разных систем, исправления, бета-версии для
	тестирования и так далее.
<vim-announce@vim.org>				*vim-announce* *vim_announce*
	Информация о выходе новых версий редактора Vim; включает бета-версии и
	создание версий для различных систем. Эта рассылка предназначена
	только для чтения.
<vim-mac@vim.org>				*vim-mac* *vim_mac*
	Для обсуждения использования и улучшения версии редактора Vim для
	Macintosh.

Самая свежая информация по рассылкам доступна по адресу: 
http://www.vim.org/maillist.php.

Примечание.
- Архив рассылки доступен для просмотра, например, в группах Google. Там можно
  искать ответы на вопросы.
- Для отправки сообщения в список рассылки необходимо оформить подписку!
- Первое сообщение проверяется модератором, поэтому оно может появиться только
  через несколько часов.
- Сообщения нужно отправлять с того же ящика электронной почты, с которого
  выполнялась подписка (во избежание получения нежелательных писем).

						*subscribe-maillist*
Подписаться на список рассылки можно путём отправки сообщения по адресу
	<vim-subscribe@vim.org>
Убедитесь в правильности содержимого поля «From:» («От:»). Затем с сервера
рассылки придёт инструкция о порядке оформления подписки.

						*maillist-archive*
Более подробную информацию и архивы можно найти на странице, посвящённой
спискам рассылки редактора Vim по адресу: http://www.vim.org/maillist.php


Сообщения об ошибках			*bugs* *bug-reports* *bugreport.vim*

Существует три способа для отправки сообщений об ошибках:
1. Если проблема связана с файлом среды исполнения, сообщите о ней
   ответственному разработчику по адресу электронной почты, указанном в
   заголовке файла, или каким-нибудь другим образом.
2. Откройте вопрос на веб‐сайте GitHub: https://github.com/vim/vim/issues
   Сообщение будет перенаправлено в список рассылки vim-dev.
3. Отправьте сообщение об ошибке на адрес: Vim Developers <vim-dev@vim.org>
   Это список рассылки. Для отправки сообщения в список рассылки сначала
   необходимо стать его участником, после чего другие участники смогут
   прочитать сообщение. В случае нежелания афишировать проблему, например, в
   связи с вопросами безопасности, отправьте сообщение на <bugs@vim.org>. В
   этом случае письмо будет отправлено только ответственному разработчику Vim,
   то есть Браму Моленару.

Проблему нужно описывать кратко; время, потраченное на общение по почте,
вычитается из общего времени на улучшение редактора Vim! Всегда передавайте
воспроизводимые примеры и пытайтесь обнаружить, какие именно параметры или
действия вызывают появление ошибки.

Предпочтителен вариант с запуском Vim с помощью команды
>
        vim --clean -u reproduce.vim
<
Где reproduce.vim — это командный файл, посредством которого воспроизводится
ошибка. Попробуйте воспроизвести ошибку на разных системах, если это имеет
смысл (вдруг окажется, что эта ошибка присуща только ОС MS Windows?).

По возможности, высылайте исправления! При создании запроса на включение на
веб‐сайте https://github.com/vim/vim запускается автоматизированная проверка,
которая сообщит о наличии каких-либо очевидных проблем. Однако можно отправить
исправление и по электронной почте (чтобы не возникло сложностей с пробельными
символами, лучше прикреплять файл к почтовому сообщению).

Необходимую информацию по используемой версии программы и настройке параметров
можно получить с помощью следующей команды
>
   :so $VIMRUNTIME/bugreport.vim
<
В результате выполнения команды в текущем каталоге создаётся файл
«bugreport.txt», который содержит большое количество информации по вашей
рабочей среде. Перед отправкой необходимо проверить его содержимое на наличие
конфиденциальной информации!

В случае сбоя программы Vim, попытайтесь определить точку возникновения сбоя.
В этом может помочь справка по отладке в файле |debug.txt|.

Если решение для возникшей ситуации найти никак не удаётся, но имеется
склонность предполагать, что оно уже было найдено, подпишитесь на список
рассылки vim-dev и задайте вопрос там, см. |maillist|

							*year-2000* *Y2K*
Поскольку внутренняя реализация по редактриованию текста в программе Vim не
использует напрямую работу с датами, то проблема 2000 года, как таковая, не
актуальна. Время в редакторе Vim используется в формате количества секунд с 1
января 1970 года и применяется для проверки метки времени редактируемого файла
и файла подкачки, что не оказывает влияния на работу программы и может
привести лишь к выводу предупреждений.

Возможно возникновение проблемы 2038 года, когда количество секунд перестанет
помещаться в 32-разрядное целое число. Всё это зависит от конкретного
компилятора, библиотек и операционной системы. В данном конкретном случае
используются тип данных time_t и функция ctime(). Причём значение данных
time_t в файле подкачки хранится в четырёх байтах, и оно используется только
для вывода даты и времени файла при его восстановлении и на процесс
редактирования никак не влияет.

Функция редактора Vim strftime() напрямую использует системную функцию
strftime(). Функция localtime() использует системную функцию time(). Функция
getftime() использует время, возвращаемое системной функцией stat(). Если
системные библиотеки совместимы с проблемой 2000 года, то, соответственно,
совместим и редактор Vim.

С другой стороны, пользователь может создавать для редактора Vim командные
файлы, в которых будут использоваться внешние команды, а эти команды могут
быть несовместимы с проблемой 2000 года. Однако в любом случае они уже не
являются частью программы Vim.

==============================================================================
3. Соавторы				*credits* *author* *Bram* *Moolenaar*

Автором большей части программы Vim является Брам Моленар (Bram Moolenaar),
<Bram@vim.org>.

Отдельные части документации позаимствованы из нескольких руководств по
программе Vi, авторами которых являются:
	У.Н. Джой (W.N. Joy)
	Аланом П.У. Хьюитт (Alan P.W. Hewett)
	Марком Хортоном (Mark Horton)

Текстовый редактор Vim основан на редакторе Stevie, а также содержит некоторое
количество фрагментов (и идей) из других программ, созданных упомянутыми ниже
разработчиками. Множество других людей присылали исправления, высказывали свои
предложения и отзывы о положительных и отрицательных сторонах программы Vim.

Редактор Vim никогда не был бы тем, чем он является, без помощи этих людей!

	Ron Aaron		внесение изменений в графический интерфейс
				Win32
	Mohsin Ahmed		шифрование
	Zoltan Arpadffy		разработка версии для VMS
	Tony Andrews		редактор Stevie
	Gert van Antwerpen	изменения для DJGPP в MS-DOS
	Berkeley DB(3)		идея для реализации файла подкачки
	Keith Bostic		редактор Nvi
	Walter Briscoe		обновления Makefile, различные исправления
	Ralf Brown		библиотека SPAWNO для MS-DOS
	Robert Colon		большое количество полезных замечаний
	Marcin Dalecki		версия графического интерфейса на GTK+,
				значки панели инструментов, поддержка gettext
	Kayhan Demirel		отправка новостей из Уганды
	Chris & John Downey	редактор xvi (идеи для многооконной версии)
	Henk Elbers		первая версия для VMS
	Daniel Elstner		версия для GTK+ 2
	Eric Fischer		версия для Mac, 'cindent', и другие 
				усовершенствования
	Benji Fisher		ответы на многочисленные вопросы пользователей
	Bill Foster		версия графического интерфейса для Athena
				(позднее удалена)
	Google			даёт мне возможность посвящать разработке Vim
				один день в неделю
	Loic Grenie		редактор xvim (идеи для многооконной версии)
	Sven Guckes		популяризатор программы Vim и предыдущий
				ответственный разработчик веб-страницы
	Darren Hiebert		программа Exuberant ctags
	Jason Hildebrand	версия для GTK+ 2
	Bruce Hunsaker		улучшения в версии для VMS
	Andy Kahn		поддержка Cscope, версия графического
				интерфейса для GTK+
	Oezguer Kesim		ответственный по спискам рассылки Vim
	Axel Kielhorn		работа над версией для Macintosh
	Steve Kirkendall	редактор Elvis
	Roger Knobbe		исходная версия для Windows NT
	Sergey Laskavy		помощь в разработке Vim от участника из Москвы
	Felix von Leitner	предыдущий ответственный по спискам рассылки
				по редактору Vim
	David Leonard		перенос расширений для языка Python в UNIX
	Avner Lottem		отображение в редакторе текста справа налево
	Flemming Madsen		реализация клиент-сервер для X11, различные
				функциональные возможности и исправления
	Tony Mechelynck		ответы на вопросы пользователей
	Paul Moore		расширения интерфейса для языка Python,
				большое количество исправлений
	Katsuhito Nagano	поддержка многобайтовых кодировок
	Sung-Hyun Nam		поддержка многобайтовых кодировок
	Vince Negri		улучшение графического интерфейса для Win32
				и общие усовершенствования для консоли
	Steve Oualline		автор первой книги о редакторе Vim, см. |frombook|
	Dominique Pelle		отчёты Valgrind и большое количество
				исправлений
	A.Politz		большое количество сообщений об ошибках
				и некоторые исправления
	George V. Reilly	версия для Win32, начало разработки
				графического интерфейса для Win32
	Stephen Riehm		собиратель ошибок
	Stefan Roemer		различные исправления и помощь пользователям
	Ralf Schandl		версия для IBM OS/390
	Olaf Seibert		версия для DICE и BeBox, усовершенствования
				для регулярных выражений
	Mortaza Shiran		исправления по поддержке персидского языка
	Peter da Silva		библиотека termlib
	Paul Slootman		версия для OS/2
	Henry Spencer		регулярные выражения
	Dany St-Amant		версия для Macintosh
	Tim Thompson		редактор Stevie
	G. R. (Fred) Walter	редактор Stevie
	Sven Verdoolaege	интерфейс для языка Perl
	Robert Webb		автоподстановка в командной строки, версии
				с графическим интерфейсом и большое количество
				исправлений
	Ingo Wilken		интерфейс для языка Tcl
	Mike Williams		печать PostScript
	Juergen Weigert		версия для Lattice, усовершенствования для
				AUX, версии для UNIX и MS-DOS, autoconf
	Stefan 'Sec' Zehl	сопровождение веб‐сайта vim.org
	Yasuhiro Matsumoto	большое количество усовершенствований в версии
				для MS Windows
	Ken Takata		исправления и новые функциональные возможности
	Kazunobu Kuriyama	GTK+3
	Christian Brabandt	большое количество исправлений и
				функциональных возможностей, оказание
				поддержки пользователям и многое другое
	Yegappan Lakshmanan	большое количество усовершенствований
				компонента quickfix

Хочу поблагодарить всех, кто отправлял мне свои предложения и сообщения об
ошибках. Список участников слишком велик, чтобы можно было поместить сюда
всех. Редактор Vim никогда не стал бы тем, чем он является сегодня, без
воплощения идей, предложенных всеми участниками — Vim продолжает развиваться
только благодаря им!
*love* *peace* *friendship* *gross-national-happiness*


В документации содержится несколько ссылок на другие версии программы Vi:
							*Vi* *vi*
Vi	"оригинальная версия". Не углубляясь в подробности, будем считать, что
	это та версия редактора Vi, которая появилась в Sun OS 4.x. По команде
	":version" выводится "Version 3.7, 6/7/85". Но иногда информация о
	версии может отличаться от указанной. Работает только в ОС UNIX.
	Исходный код теперь доступен на условиях лицензии BSD. Больше
	информации о Vi можно найти на веб‐сайте
		http://ex-vi.sourceforge.net/
							*Posix*
POSIX	из стандарта IEEE 1003.2, Часть 2: Команды управления и сервисные
	программы. Известен под названием «POSIX». В тексте описывается,
	как должен работать редактор Vi. Смотрите |posix-compliance|.
							*Nvi*
Nvi	"New" Vi ("Новый" Vi). Вариант редактора Vi, который входит в состав
	дистрибутива BSD 4.4 и FreeBSD. Прекрасно совместим с первоначальной
	версией редактора Vi, и содержит ряд дополнений. В настоящее время
	используется версия 1.79. Команда ":version" выводит строку
	"Version 1.79 (10/23/96)". Новые версии не выходили последние
	несколько лет, не смотря на наличие в разработке версии 1.81. Исходный
	код доступен без ограничений.
							*Elvis*
Elvis	ещё один клон редактора Vi. Автор — Steve Kirkendall. Очень
	компактный, но не такой гибкий, как редактор Vim. Разработка
	остановилась, «Элвис покинул здание!» Исходный код доступен без
	ограничений.
							*Neovim*
Neovim	клон редактора Vim. Ответвление программы Vim 2014 года, авторы
	которого предпочли двигаться в другом направлении. Имеет сильную
	привязку к порталу Github и намного больше зависимостей, усложняющих
	разработку и ограничивающих переносимость. Код был серьёзно
	переработан, в результате чего взаимоприменяемость исправлений от
	программы Vim невозможна. Поддерживает удалённый графический интерфейс
	и интеграцию с языками сценариев.

==============================================================================
4. Условные обозначения						*notation*

При использовании подсветки синтаксиса для файлов встроенной документации,
условные обозначения и текст, не предназначенный для буквального ввода, часто
выделяются особой образом с применением группы подсветки Special. Это текст,
помещённый внутри [], {} и <> скобок, а также комбинации клавиш CTRL-X.

Однако необходимо помнить, что в командах редактора Vim могут использоваться
самые разнообразные символы. Поэтому в некоторых случаях символы скобок [], {}
и <> могут вводиться буквально, что обычно понятно из контекста.


[]		символы в квадратных скобках содержат необязательный текст.

						    *count* *[count]*
[число]		необязательное число, которое может быть указано перед
		командой для увеличения области действия или повтора команды.
		Если число не указано, то принимается значение, равное единице
		при отсутствии иных указаний. Обратите внимание на то, что в
		этом руководстве в описании команды [число] не указывается.
		Это делается лишь в пояснениях к команде. Такая запись
		позволяет упростить поиск команд. Если включен параметр
		'showcmd', то набираемое число (или его часть) будет
		отображаться в нижней строке окна. Для удаления последней
		введённой цифры нужно использовать клавишу <DEL> (|N<Del>|).

							*[quotex]*
["x]		необязательное обозначение регистра, в котором может храниться
		текст. Смотри раздел |registers|. Здесь x обозначает единичный
		символ из диапазона от 'a' до 'z' или от 'A' до 'Z', или
		символ '"', а в некоторых случаях (с командой put) символ от
		'0' до '9', '%','#' и другие. Прописные и строчные буквы
		указывают на один и тот же регистр, но применение строчной
		буквы приведёт к перезаписи текущего содержимого регистра, а
		прописной — к добавлению нового текста к его содержимому. Если
		'"x' не указан или указано '""', сохраняемый текст будет
		помещён в безымянный регистр.

							*{}*
{}		в фигурные скобки заключаются обязательные составные части
		команды, которые могут принимать одно из нескольких значений.
		Различия между программами Vim и Vi также приводятся в
		фигурных скобках (будет понятно из контекста).

							*{char1-char2}*
{char1-char2}	один символ из диапазона char1 — char2. Например, запись {a-z}
		означает одна строчная буква. При этом возможно совмещение
		нескольких диапазонов. Например, запись {a-zA-Z0-9} является
		представлением любого буквенно-цифрового символа.

						*{motion}* *movement*
{перемещение}	команда перемещения каретки. Описание см. в файле |motion.txt|.
		Примеры:
			w		перемещение к началу следующего слова;
			b		перемещение к началу текущего слова;
			4j		перемещение на четыре строки вниз;
			/Это<CR>	перемещение к следующему вхождению
					текста «Это».
		Перемещения применяются после команды-оператора (|operator|)
		для выполнения действия над текстом, по которому движется
		каретка.
		- Если число повтора команды указано перед командой
		  перемещения и перед командой-оператором, то эти числа
		  перемножаются. Например, по команде `2d3w` будет удалено
		  шесть слов.
		- Перемещение каретки может совершаться и в обратном
		  направлении. Например, команда `db` приведёт к удалению
		  текста до начала слова.
		- Перемещение также могут выполняться указателем «мыши». Хотя
		  манипулятор «мышь» поддерживается не всеми терминалами.
		- Команда ":omap" позволяет создавать клавиатурные команды для
		  выделения символов в режиме ожидания команды.
		- Команды в Ex-режиме также могут быть использованы для
		  перемещения курсора. При этом можно вызвать функцию для
		  выполнения сложных перемещений. Перемещения всегда
		  совершаются исключительно посимвольно, независимо от
		  команды, которая используется в режиме командной строки ":".
		  Это означает, что последний символ строки не может быть
		  добавлен без перевода строки (при отключённом параметре
		  'virtualedit').
		  Если команда в Ex-режиме изменяет текст, находящийся перед
		  точкой запуска команды-оператора, или переходит к другому
		  буферу, то это может привести к непредсказуемым
		  последствиям. Изменять можно текст, который располагается
		  ниже, а переход к другому буферу возможен, если текущий
		  буфер при этом не выгружается.

							*{Visual}*
{визуальный}	выделение текстового поля. Режим включается командой `v`, `V`
		или клавишами CTRL-V, после чего можно использовать любую
		команду перемещения каретки для изменения конечной точки
		выделения текста. Используется перед командой-оператором 
		(см. раздел |operator|) для выделения текста, с которым 
		предполагается производить какие-либо действия. См. раздел 
		|Visual-mode|.

							*<character>*
<символ>	специальный символ из приведённой ниже таблицы, возможно с
		клавишами модификаторами, либо символ из кодировки ASCII с
		клавишами модификаторами.

							*'character'*
'c'		одиночный символ из кодировки текста ASCII.

			 				*CTRL-{char}*
CTRL-{символ}	{символ} здесь играет роль управляющего символа; это значит,
		что {символ} вводится при удержании клавиши CTRL. Регистр
		{символа} в данном случае не имеет значения; это означает,
		что комбинации клавиш CTRL-SHIFT-A и CTRL-a идентичны. Однако
		на некоторых терминалах использование клавиши SHIFT приводит к
		генерации другого кода. В этом случае использовать такую
		комбинацию клавиш не рекомендуется.

							*'option'*
'параметр'	параметр, для которого можно задать значение, заключается
		в одиночные кавычки. См. раздел |options|.

							*quotecommandquote*
"команда"	ссылка на вводимую команду заключается в двойные кавычки.
`команда`	Новый стиль записи команд позволяет отличить её от другого
		заключаемого в кавычки текста.

					*key-notation* *key-codes* *keycodes*
Приведённые ниже обозначения клавиш используются в документации. Они также
могут использоваться в команде ":map" (ввод обозначения клавиши осуществляется
нажатием клавиш CTRL-K с последующим нажатием клавиши, которую необходимо
завести).

форма		означает	 соответствует	десятичное ~
записи				 клавишам	значение	~
-----------------------------------------------------------------------
<Nul>		нуль			CTRL-@	  0 (хранится как 10) *<Nul>*
<BS>		удаление символа слева	CTRL-H	  8		    *backspace*
<Tab>		табуляция		CTRL-I	  9		    *tab* *Tab*
<NL>		перевод строки		CTRL-J	 10 (вместо <Nul>)  *linefeed*
<CR>		возврат каретки		CTRL-M	 13	    *carriage-return*
<Return>	аналог <CR>					    *<Return>*
<Enter>		аналог <CR>					    *<Enter>*
<Esc>		escape			CTRL-[	 27	    *escape* *<Esc>*
<Space>		пробел				 32		    *space*
<lt>		меньше			<	 60		    *<lt>*
<Bslash>	обратная косая черта	\	 92	    *backslash* *<Bslash>*
<Bar>		вертикальная черта	|	124		    *<Bar>*
<Del>		удаление символа справа		127
<CSI>		ввод последовательности ALT-Esc 155		    *<CSI>*
		команд
<xCSI>		ввод CSI в графическом интерфейсе		    *<xCSI>*
<EOL>		конец строки (может быть <CR>, <NL> или		    *<EOL>*
		<CR><NL>, зависит от системы и 'fileformat')
<Up>		клавиша курсора вверх		    *cursor-up* *cursor_up*
<Down>		клавиша курсора вниз		    *cursor-down* *cursor_down*
<Left>		клавиша курсора влево		    *cursor-left* *cursor_left*
<Right>		клавиша курсора вправо		    *cursor-right* *cursor_right*
<S-Up>		SHIFT и клавиша курсора вверх
<S-Down>	SHIFT и клавиша курсора вниз
<S-Left>	SHIFT и клавиша курсора влево
<S-Right>	SHIFT и клавиша курсора вправо
<C-Left>	CONTROL и клавиша курсора влево
<C-Right>	CONTROL и клавиша курсора вправо
<F1> - <F12>	функциональные клавиши F1 — F12     *function_key* *function-key*
<S-F1> - <S-F12> SHIFT и функц. клавиши F1 — F12		    *<S-F1>*
<Help>		клавиша HELP
<Undo>		клавиша UNDO
<Insert>	клавиша INSERT
<Home>		клавиша HOME					    *home*
<End>		клавиша END					    *end*
<PageUp>	клавиша PAGEUP			    *page_up* *page-up*
<PageDown>	клавиша PAGEDOWN		    *page_down* *page-down*
<kHome>		HOME на доп. кл. (вверху слева)	    *keypad-home*
<kEnd>		END на доп. кл. (внизу слева)	    *keypad-end*
<kPageUp>	PAGEUP на доп.кл. (вверху справа)   *keypad-page-up*
<kPageDown>	PAGEDOWN на доп.кл. (внизу справа)  *keypad-page-down*
<kPlus>		клавиша '+' на доп. кл.		    *keypad-plus*
<kMinus>	клавиша '-' на доп. кл.		    *keypad-minus*
<kMultiply>	клавиша '*' на доп. кл.		    *keypad-multiply*
<kDivide>	клавиша '/' на доп. кл.		    *keypad-divide*
<kEnter>	клавиша ENTER на доп. кл.	    *keypad-enter*
<kPoint>	десятичная точка на доп. кл.	    *keypad-point*
<k0> - <k9>	клавиши 0 - 9 на доп. кл.	    *keypad-0* *keypad-9*
<S-...>		SHIFT и клавиша			    *shift* *<S-*
<C-...>		CONTROL и клавиша		    *control* *ctrl* *<C-*
<M-...>		ALT и клавиша или META и клавиша    *meta* *alt* *<M-*
<A-...>		аналог <M-...>					    *<A-*
<D-...>		COMMAND и клавиша (только Macintosh)		    *<D-*
<t_xx>		запись клавиши с "xx" в termcap
-----------------------------------------------------------------------

Примечание.
Комбинирование клавиш управления курсором с клавишей <SHIFT>, а также клавиши
<HELP> и <UNDO> доступны далеко не на всех терминалах. На компьютерах Amiga
комбинация клавиш SHIFT-F10 генерирует код (CSI), который также можно
использовать в комбинациях клавиш. Этот код считывается только при нажатии ещё
одной клавиши.

Примечание.
Клавиша <DELETE> может генерировать два разных кода. Обычно используется
десятичный код 127 кодировки ASCII, который распознаётся во всех случаях.
Однако иногда код может принимать другое значение. В таком случае значение
считывается из записи termcap «kD». Однако действие клавиши при обоих
значениях будет одинаковым. См. также раздел |:fixdel|.

Примечание.
Использование клавиш дополнительной клавиатуры идентично использованию
соответствующих им клавиш основной клавиатуры. Например, действие клавиши
<kHome> соответствует действию клавиши <HOME>. Если код клавиши дополнительной
клавиатуры совпадает с кодом клавиши основной клавиатуры, то он будет
восприниматься как код основной клавиатуры. Например, если код клавиши <kHome>
совпадает с кодом клавиши <HOME>, то нажатие клавиши <kHome> будет
восприниматься в редакторе как нажатие клавиши <HOME>. В таком случае
клавиатурные команды с <kHome> работать не будут.

								*<>*
Обозначения клавиш в примерах часто заключаются в символы угловых скобок <>.
Иногда это делается для пояснения общего порядка работы с клавиатурой, но в
некоторых случаях в тексте представлены примеры для буквального ввода,
например, при использовании команды ":map". Правила здесь следующие:
 1.  Любые печатаемые символы вводятся напрямую, за исключением обратной косой
     черты и символа '<'
 2.  Обратная косая черта записывается в виде двойной косой черты "\\" 
     или "<Bslash>".
 3.  Символ '<' записывается в виде "\<" или "<lt>". Если исключается
     возможность возникновения путаницы, то символ '<' можно вводить напрямую.
 4.  Запись "<key>" означает нажатие специальной клавиши. Эта система
     обозначений представлена в таблице выше. Приведём несколько примеров:
	   <ESC>		клавиша Escape
	   <C-G>		клавиши CTRL и G
	   <UP>			клавиша перемещения курсора вверх
	   <C-LeftMouse>	клавиша CTRL и нажатие левой кнопки «мыши»
	   <S-F11>		клавиши Shift-F11
	   <M-a>		клавиша META и клавиша a  (код символа 'a' с
				установленным 8 битом)
	   <M-A>		клавиша META и клавиша A  (код символа 'A' с
				установленным 8 битом)
	   <t_kd>		Запись termcap "kd" (клавиша перемещения 
	                        курсора вниз)
    Несмотря на то, что в записи <M-{символ}> в качестве {символа} можно
    указать многобайтовый символ, последовательность байтов может быть не
    распознана в редакторе Vim, в результате чего комбинация работать не будет.

При использовании в редакторе Vim полной системы обозначений <>, необходимо
убедиться в том, что флаг '<' исключён из параметра 'cpoptions' (при
отключенном параметре 'compatible', который по умолчанию обычно уже отключён).
>
	:set cpo-=<
<
В системе обозначений <> для экранирования значений наименования клавиш этот
символ используется в виде <lt>. Здесь также можно использовать обратную косую
черту, но только при отсутствии флага 'B' в значении параметра 'cpoptions'.

В примерах ниже назначается клавиатурная команда на клавиши CTRL-H для шести
символов "<Home>": 
>
	:imap <C-H> \<Home>
	:imap <C-H> <lt>Home>
<
Первый вариант будет работать только при отсутствии флага 'B' в значении
параметра 'cpoptions'. Второй будет работать в любом случае.
Чтобы получить буквальное значение "<lt>" в клавиатурной команде, необходимо
ввести
>
	:map <C-L> <lt>lt>
<
В дальнейшем примеры для клавиатурных команд, сокращений и команд меню можно
использовать напрямую путём копирования и вставки. Также возможен буквальный
ввод, включая символы '<' и '>'. Однако в таком виде они не будут работать 
с другими командами, такими как ":set" и ":autocmd"!

Эта система обозначений может использоваться в строках, заключённых в двойные
кавычки и содержащих в начале строки символ экранирования "\<", например, 
"\<C-Space>", что приведёт к формированию специального кода клавиши. Обратное
преобразование в читаемый текст потребует использования функции `keytrans()`.

==============================================================================
5. Введение в режимы редактора			*vim-modes-intro* *vim-modes*

В редакторе Vim доступно семь ОСНОВНЫХ режимов:
					*Normal* *Normal-mode* *command-mode*
Режим команд		в режиме команд можно вводить все обычные команды
			редактора. Программа при запуске работает в этом
			режиме по умолчанию (если не был установлен параметр
			'insertmode', см. ниже). Также его иногда называют
			обычным режимом.

Режим визуальный	этот режим похож на режим команд, но команды
			перемещения регулируют размер области выделения. При
			вводе команды, не имеющей отношения к перемещению
			каретки, она воздействует только на выделенную
			область. См. раздел |Visual-mode|.
			Если параметр 'showmode' включен, в нижней части окна
			отображается строка "-- РЕЖИМ ВИЗУАЛЬНЫЙ --".

Режим выборки		данный режим выглядит очень похоже на режим выделения,
			принятый в приложениях MS Windows. При вводе печатного
			символа удаляется выделенный текст, после чего
			редактор сразу переключается в режим вставки. См.
			раздел |Select-mode|.
			Если параметр 'showmode' включен, в нижней части
			окна отображается строка "-- РЕЖИМ ВЫБОРКИ --".

Режим вставки		в режиме вставки печатный текст помещается в буфер.
			См. раздел |Insert-mode|.
			Если параметр 'showmode' включен, в нижней части
			окна отображается строка "-- РЕЖИМ ВСТАВКИ --".

Режим командной строки	этот режим (также называется командным режимом)
			позволяет осуществлять ввод в одну строку текста в
			нижней части окна. Этот режим предназначен для ввода
			команд, начинающихся с символа ":", команд поиска по
			шаблону — "?" и "/", а также вызова внешних программ
			по команде "!". См. раздел |Cmdline-mode|

Ex‐режим		похож на режим командной строки, но после ввода
			команды редактор остаётся в режиме командной
			строки. Обладает весьма ограниченными возможностями
			редактирования командной строки. См. раздел |Ex-mode|

Режим терминала		обеспечивает интерактивное выполнение задачи в окне
			терминала. Позволяет вводить команды для выполнения
			задачи и выводить результаты выполнения в окно
			терминала.
			См. раздел |terminal| по вопросу переключения в
			другие режимы.

Существует ещё семь ДОПОЛНИТЕЛЬНЫХ режимов, которые являются вариантами семи
ОСНОВНЫХ режимов:

				*Operator-pending* *Operator-pending-mode*
Режим ожидания команды	этот режим похож на режим команд, но начинается после
			ввода команды-оператора, когда редактор ожидает ввода
			команды {перемещения} для указания области текста, над
			которым будет производиться указанное действие.

Режим замены		режим замены является особым вариантом режима вставки.
			Позволяет работать как в режиме вставки с тем отличием,
			что при вводе каждого символа, удаляется один символ
			текущего текста. См. раздел |Replace-mode|.
			Если параметр 'showmode' включен, в нижней части окна
			отображается строка "-- РЕЖИМ ЗАМЕНЫ --".

Режим виртуальной	режим виртуальной замены похож на режим замены, но
замены			вместо замены текста в файле меняется только текст
			на экране. См. раздел |Virtual-Replace-mode|.
			Если параметр 'showmode' включен, в нижней части окна
			отображается строка "-- РЕЖИМ ВИРТУАЛЬНОЙ ЗАМЕНЫ --".

Режим команд в режиме	переключение в этот режим осуществляется с помощью
вставки			клавиш CTRL-O при работе в режиме вставки (см. раздел
			|i_CTRL-O|). При этом редактор переключается в режим
			команд, но после выполнения одной команды тут же
			возвращается в режим вставки. Если параметр 'showmode'
			включён, в нижней части окна отображается строка
			"-- (режим вставки) --".

Режим команд в режиме	позволяет работать в окне терминала как в режиме
терминала		команд. Внесение изменений невозможно. Возврат
			в режим терминала осуществляется с помощью команды
			ввода "a" или "i".

Визуальный режим в	переключение в этот режим осуществляется в случае
режиме вставки		перехода в визуальный режим из режима вставки,
			например, если сначала нажать клавиши CTRL-O, а затем
			ввести команду `v`, `V` или CTRL-V. При завершении
			визуального выделения редактор возвращается к работе в
			режиме вставки. Если параметр 'showmode' включен, в
			нижней части окна отображается строка
			"-- (режим вставки) РЕЖИМ ВИЗУАЛЬНЫЙ --".

Режим выборки в режиме	переключение в этот режим осуществляется в случае
вставки			перехода в режим выделения из режима вставки. Например,
			путём протягивания указателя «мыши» или с помощью
			клавиш <S-Right>. При завершении режима выделения
			редактор возвращается в режим вставки. Если параметр
			'showmode' включен, в нижней части окна отображается
			строка "-- (режим вставки) РЕЖИМ ВЫБОРКИ --".

==============================================================================
6. Переключение между режимами				*mode-switching*

Если неизвестен режим работы редактора в данный момент, всегда можно вернуться
в режим команд, дважды нажав клавишу <ESC>. Этот способ не работает в
Ex-режиме, здесь требуется ввести команду ":visual". О возвращении в режим
команд можно судить по мерцанию экрана или звуковому сигналу при нажатии
клавиши <ESC>. Однако звуковой сигнал при нажатии клавиши <ESC> может
подаваться и после нажатия клавиш CTRL-O в режиме вставки, когда редактор
продолжает работать в режиме вставки. В этом случае необходимо нажать клавишу
<ESC> ещё раз.

							*i_esc*
Переключение	в режим				 ~
		команд	визуал. выборки вставки  замены   ком.строка  Ex‐режим
из режима							          ~
команд			v V ^V	  *4	 *1	   R gR     : / ? !    Q
визуальный	 *2		  ^G	 c C	    --	      :        --
выборки		 *5	^O ^G		 *6	    --	      --       --
вставки		 <ESC>	  --	  --		  <INSERT>    --       --
замены		 <ESC>	  --	  --	<INSERT>	      --       --
ком.строки       *3	  --	  --	 :start	    --		       --
Ex‐режим	 :vi	  --	  --	 --	    --	      --

Где
-- невозможно
*1 чтобы переключить из режима команд в режим вставки необходимо ввести одну
   из следующих команд: `i`, `I`, `a`, `A`, `o`, `O`, `c`, `C`, `s` или `S`.
*2 чтобы переключить из визуального режима в режим команд необходимо ввести
   команду, не являющуюся командой перемещения, что приведёт к выполнению
   введённой команды. Также можно нажать клавиши <ESC> "v", "V"  или "CTRL-V"
   (см. раздел |v_v|) для выхода из визуального режима без внесения 
   каких-либо изменений.
*3 чтобы переключить из режима командной строки в режим команд необходимо:
   - нажать клавишу <CR> или <NL>, что приведёт к исполнению введённой команды.
   - полностью удалить текст из командной строки (например, с помощью клавиш
     CTRL-U), после чего нажать клавишу <BS>.
   - нажать клавиши CTRL-C или <ESC>, что приведёт к отключению режима
     командной строки без исполнения команды.
   В последнем случае при нажатии клавиши <ESC> может произойти подстановка в
   командной строке, если в параметре 'wildchar' был указан символ. Можно
   проигнорировать это и нажать клавишу <ESC> ещё раз.
*4 чтобы переключить из режима команд в режим выборки необходимо:
   - выделить указателем «мыши» текст, если параметр 'selectmode' содержит
     значение "mouse"
   - использовать не буквенную команду для перемещения каретки при удержании
     клавиши <SHIFT>, если параметр 'selectmode' содержит значение "key"
   - нажать клавиши "v", "V" или "CTRL-V", если параметр 'selectmode' содержит
     значение "cmd"
   - нажать клавиши "gh", "gH" или "g CTRL-H"  |g_CTRL-H|
*5 чтобы переключить из режима выборки в режим команд необходимо ввести не
   буквенную команду для перемещения каретки без удержания клавиши <SHIFT>.
*6 чтобы переключить из режима выборки в режим вставки необходимо ввести
   печатаемый символ. Выделенная область удаляется и заменяется на этот символ.

Если включён параметр 'insertmode', то сразу при открытии файла редактор будет
находиться в режиме вставки.

	*CTRL-\_CTRL-N* *i_CTRL-\_CTRL-N* *c_CTRL-\_CTRL-N* *v_CTRL-\_CTRL-N*
Для переключения в режим команд из любого другого режима можно также
воспользоваться командами CTRL-\ CTRL-N или <C-\><C-N>. При этом редактор Vim
переводится в режим команд без подачи звукового сигнала, выдаваемого, как
правило, при нажатии клавиши <ESC>. Однако этот способ не будет работать в
Ex-режиме. Если же эта команда подаётся после ввода команды, для которой
необходимо указать аргумент, например |f| или |m|, то будет некоторая задержка
перед переключением режима, время ожидания задаётся в параметре 'ttimeoutlen'.
Если окно терминала активно, по команде CTRL-\ CTRL-N работа редактора
переводится в режим команд до тех пор, пока не будет введена команда
редактирования, см. раздел |t_CTRL-\_CTRL-N|.

	*CTRL-\_CTRL-G* *i_CTRL-\_CTRL-G* *c_CTRL-\_CTRL-G* *v_CTRL-\_CTRL-G*
Команду CTRL-\ CTRL-G или <C-\><C-G> можно использовать для перехода в режим
вставки при включенном параметре 'insertmode'. В противном случае, будет
выполнен переход в режим команд. Это позволяет перевести редактор Vim в режим,
заданный параметром 'insertmode', безотносительно к тому, в каком режиме
программа находится в данный момент.

				    *Q* *mode-Ex* *Ex-mode* *Ex* *EX* *E501*
Q			переключение в Ex-режим. Работа в этом режиме
			напоминает ввод сразу нескольких команд, начинающихся
			с символа ":", с тем отличием, что:
			- отсутствует необходимость постоянно вводить ":";
			- экран не обновляется после ввода каждой команды;
			- отсутствуют обычные возможности редактирования
			командной строки;
			- недоступны клавиатурные команды и сокращения.
			На практике правка текста выполняется «стандартными»
			командами редактирования командной строки (клавиши
			<DEL> или <BS> для удаления символов, CTRL-U для
			удаления целой строки).
			По умолчанию программа Vim запускается в этом режиме с
			помощью команды ":ex" или аргумента командной стоки
			|-e|. Выйти из Ex-режима можно с помощью команды ":vi",
			см. |:visual|.
			Примечание. В старых версиях программы Vim команда `Q`
			использовалась для форматирования текста. Теперь для
			этого используется команда |gq|. Но при использовании
			|vimrc_example.vim| или |defaults.vim|, команда `Q` будет
			работать как команда `gq`, за исключением работы в
			режиме выборки.

					*gQ*
gQ			переключение в Ex-режим, схожий с командой `Q`. Работа
			в этом режиме также напоминает ввод сразу нескольких
			команд, начинающихся с символа ":", но при этом
			доступны все команды редактирования командной строки,
			подстановка в командной строке и так далее. Выход из
			Ex-режима осуществляется командой `:vi` (`:visual`).

==============================================================================
7. Содержимое окна					*window-contents*

В режиме команд, а также в режимах вставки и замены в окне отображается
содержимое буфера по принципу «что видите, то и получаете». Существует два
исключения:
- Когда параметр 'cpoptions' содержит флаг '$', и изменения не превышают
  пределов одной строки, текст напрямую не удаляется, но последний удалённый
  символ замещается символом '$'.
- Вставка текста в одном окне, не приводит к обновлению того же текста,
  открытого в других окнах, до завершения ввода.

При превышении ширины окна строки будут разбиваться, если конечно не выключен
параметр 'wrap' (см. ниже). Параметр 'linebreak' можно установить для переноса
строки на символе пробела.

Если содержимое файла занимает не всё пространство окна редактора Vim, то в
первой колонке пустых строк будет отображаться символ '~' («тильда»), как
показано ниже:

	+-----------------------+ ~
	|одна из строк		| ~
	|последняя строка	| ~
	|~			| ~
	|~			| ~
	+-----------------------+ ~

Таким образом в редакторе, посредством строк, начинающихся с символа '~',
указывается окончание содержимого буфера.

Если последняя строка не умещается в окне редактора целиком, то в первой
колонке последних строк окна вместо текста будет отображаться символ '@'
(«коммерческое „эт“»), как показано ниже:

	+-----------------------+ ~
	|первая строка		| ~
	|вторая строка		| ~
	|@ 			| ~
	|@ 			| ~
	+-----------------------+ ~

Таким образом в редакторе, посредством строк, начинающихся с символа '@',
указывается, что вышерасположенная строка не умещается в окне целиком

При установке флага "lastline" в параметре 'display', символы '@' с левой
стороны окна отображаться не будут. Но если последняя строка не умещается
целиком, будет отображаться только та часть строки, которая умещается в окно,
а три последних отображаемых символа этой строки заменяются символами "@@@",
как показано ниже: 

	+-----------------------+ ~
	|первая строка		| ~
	|вторая строка		| ~
	|очень длинная строка, н| ~
	|е умещающаяся в этом@@@| ~
	+-----------------------+ ~

Если же файл состоит из единственной строки и она настолько длинная, что не
умещается в окне, то такая ситуация обрабатывается особым образом. В таком
случае в редакторе Vim отображается только та часть строки, которая
располагается под кареткой. Никаких специальных символов не отображается,
чтобы была возможность редактирования всей этой строки.

Установка значения "@" в параметре 'highlight' позволяет задать особую
подсветку для символов '@' и '~', благодаря которой можно будет отличать их от
обычных символов в буфере.

Параметр 'showbreak' содержит символы, которые вставляется вначале тех строк,
для которых была выполнена разбивка по ширине окна.

							*wrap-off*
При отключении параметра 'wrap' длинные строки не будут разбиваться, а будет
отображаться только та часть строки, которая умещается на экране. При
перемещении курсора на неотображаемую часть строки, содержимое окна
прокручивается по горизонтали. Преимущество этого метода заключается в том,
что колонки отображаются в своём настоящем виде, сохраняя возможность
редактирования строк, не умещающихся на экране. Недостатком этого метода
является невозможность отображения строки целиком. Через параметр 'sidescroll'
регулируется минимальное число колонок горизонтальной прокрутки.

Все обычные символы в кодировке ASCII отображаются на экране как есть. Символ
табуляции заменяется количеством пробелов, которое он представляет. Другие
непечатаемые символы заменяются обозначением "^{char}", где {char} — это
символ, код которого равен коду непечатаемого символа, увеличенному на число
64. Таким образом, символ 7 (сигнал) будет отображаться как "^G". Символы в
диапазоне от 127 до 160 заменяются обозначением "~{char}", где {char} — это
символ, код которого равен коду символа из этого диапазона, уменьшенного на
число 64. Поскольку эти символы занимают больше одного знакоместа на экране,
каретка может располагаться только на первом из них.

При включении параметра 'number', в начале каждой строки указывается её номер.
Совет. Если требуется отделить перенос строк от их нумерации, установите
восемь пробелов в качестве значения параметра 'showbreak'
>
	:set showbreak=\ \ \ \ \ \ \ \ 
<
При включении параметра 'list', символы табуляции будут отображаться не в виде
нескольких пробелов, а в виде "^I". Конец строки будет обозначаться символом
'$', что позволит выявлять «висячие» пробелы в конце строки.

В режиме командной строки будет обновляться только содержимое командной строки.
Отображение содержимого буфера обновится только при переключении обратно в
режим команд.

Последняя строка окна используется в качестве строки состояния и отображения
других сообщений. Сообщения в строке состояния будут отображаться только при
установке следующих параметров:

сообщения состояний		параметр    по умолчанию   по умолчанию в UNIX  ~
текущий режим			'showmode'	on	    on
символы команды			'showcmd'	on	    off
положение каретки		'ruler'		off	    off

Под текущим режимом понимается отображение текста "-- РЕЖИМ ВСТАВКИ --" или
"-- РЕЖИМ ЗАМЕНЫ --", см. |'showmode'|. Символы команды — это символы уже
введённой, но ещё не исполненной команды.

В случае медленной работы терминала, можно отключать отображение сообщений
состояния для увеличения скорости редактирования такой командой
>
	:set nosc noru nosm
<
В случае ошибки, сообщение об этой ошибке будет отображаться не менее одной
секунды (в обратной цветовой гамме).

Для некоторых команд отображается количество обработанных строк. В параметре
'report' можно установить минимальный порог, при котором выводятся эти
сообщения (по умолчанию две строки).

Программа Vim на компьютере Amiga работает в окне оболочки командной строки. В
заголовке окна отображается название «Vim», а также полное наименование
текущего файла. Программой Vim автоматически перерисовывается окно при
изменении его размеров. Можно уменьшать окно до требуемого размера, однако
когда оно становится слишком маленьким, в нём перестают помещаться строки. Для
обеспечения возможности чтения сообщений размер последней строки экрана должен
составлять не менее 40 символов в ширину.

В редакторе Vim корректно распознаются и обрабатываются изменения размеров
окна на большинстве UNIX-подобных системах.

==============================================================================
8. Терминология						*definitions*

  Буфер — содержит строки текста, обычно считываемые из файла.
  Экран — вся рабочая область редактора Vim. Это может быть окно эмулятора
	  терминала. Называется также "окно Vim".
  Окно  — отображает содержимое буфера. Для отображения содержимого одного
	  буфера может быть открыто несколько окон.

Экран содержит одно или несколько окон, отделяемых строками состояния
и командной строкой внизу.

	+-----------------------------------------+ ~
экран	| окно 1	     | окно 2		  | ~
	|		     |   		  | ~
	|		     |   		  | ~
	|= строка состояния =|= строка состояния =| ~
	| окно 3				  | ~
	|					  | ~
	|					  | ~
	|==== строка состояния ===================| ~
	|командная строка			  | ~
	+-----------------------------------------+ ~

Командная строка также используется для вывода сообщений. В случае отсутствия
достаточного количества места в командной строке, выполняется прокручивание
строки вверх.

Укажим различия между четырьмя типами строк.

  Строки буфера
			Это строки непосредственно в буфере. Отображаются в
			том же виде, в котором они считываются и записываются
			в файл. Могут содержать многие тысячи символов.
  Логические строки
			Это строки буфера, содержащие текст блока структуры.
			Строки буфера в свёрнутом блоке структуры становятся
			одной логической строкой — "+-- 99 строк свёрнуто".
			Могут содержать многие тысячи символов.
  Строки окна
			Это строки, отображаемые в окне. Т. е. набор
			логических строк с переносом, разбивка длинных строк,
			и так далее. Строки не могут быть длиннее ширины окна,
			строки большей длины переносятся или обрезаются.
  Экранные строки
			Это строки, отображаемые в той части экрана, которую
			использует редактор Vim. Состоят из строк всех окон,
			включая строку состояния и командную строку. Длина
			строки не может превышать ширину экрана. В случае
			превышения ширины экрана, командная строка
			смещается вниз, при этом строки прокручиваются вверх,
			предоставляя для неё место.

строки буфера  логические строки  строки окна	    строки экрана ~

1. первая	1. первая	  1. +-- свёрнуто   1.  +-- свёрнуто
2. вторая	2. +-- свёрнуто   2. пятая	    2.  пятая
3. третья	3. пятая	  3. шестая	    3.  шестая
4. четвёртая	4. шестая	  4. седьмая	    4.  седьмая
5. пятая	5. седьмая			    5.  === строка состояния ===
6. шестая					    6.  aaa
7. седьмая					    7.  bbb
						    8.  ccc ccc c
1. aaa		1. aaa		  1. aaa	    9.  cc
2. bbb		2. bbb		  2. bbb	    10. ddd
3. ccc ccc ccc	3. ccc ccc ccc	  3. ccc ccc c	    11. ~ 
4. ddd		4. ddd		  4. cc		    12. === строка состояния ===
				  5. ddd	    13. (командная строка)
				  6. ~ 

==============================================================================
© Казорин Сергей (kazorin@basealt.ru), перевод на русский язык, 2022 
© Restorer (restorer@mail2k.ru), редакторская правка, 2022 

 vim:tw=78:ts=8:noet:ft=help:norl:
