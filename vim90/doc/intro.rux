*intro.txt*          для Vim version 9.0.        редакция от 12 октября 2022 г.


			СПРАВОЧНИК ПО РЕДАКТОРУ VIM
		            автор Брам Моленар


Введение в Vim							*ref* *reference*

1. Введение 			|intro|
2. Vim в Интернете		|internet|
3. Благодарности		|credits|
4. Система обозначений		|notation|
5. Режимы, введение		|vim-modes-intro|
6. Переключение между режимами	|mode-switching|
7. Содержимое окна		|window-contents|
8. Определения			|definitions|

==============================================================================
1. Введение						*intro*

Слово Vim расшифровывается как Vi IMproved, что означает "Улучшенный Vi".
Когда-то это название расшифровывалось, как Vi IMitation (имитация Vi), однако
после внесения в программу большого количества изменений смена названия стала
вполне оправдана. Vim - это текстовый редактор, в котором поддерживаются
практически все команды программы "Vi" операционной системы Unix, а также
реализовано большое количество новых команд. Этот редактор очень удобен для
редактирования программного кода, а также разного рода других текстовых файлов.
     Предоставляемая в редакторе возможность ввода всех команд с клавиатуры
позволяет лучше концентрировать внимание на работе, выполняя все операции с
клавиатуры и глядя на экран. Для тех же, кто предпочитает графический интерфейс,
в программе реализована поддержка мыши, а также графический интерфейс
пользователя, в котором имеются полосы прокрутки и меню (см.|gui.txt|).

Обзор этого справочника находится в файле "help.txt", |help.txt|. Посмотреть
файл можно непосредственно в Vim, для чего требуется нажать клавишу <Help>
или <F1>, также можно воспользоваться командой |:help| (команда ":help"
вводится без символов вертикальной черты и кавычек).
   В параметре 'helpfile' указывается фактическое расположение файла справки,
если оно отличается от места расположения по умолчанию. По различным темам можно
перемещаться, как по ссылкам: Для перехода к теме, расположенной под курсором,
необходимо нажать CTRL-], обратный переход осуществляется нажатием CTRL-T.

Различия между Vi и Vim приведены в файле |vi_diff.txt|.

В этом справочнике описывается работа редактора Vim в различных системах.
Работа на разных компьютерах и терминалах может иметь небольшие отличия.
В связи с этим, помимо общих указаний, приводимых в этом документе, для
каждой поддерживаемой системы подготовлен отдельный документ, см.
|sys-file-list|.

							*pronounce*
Название Vim произносится в одно слово, как Джим, а не побуквенно, как 
ви-ей-эм. Пишется с заглавной буквы, как имя собственное, так же, как Джим.

Данный справочник является руководством по всем командам и параметрам Vim.
Это не вводный курс по использованию Vi или Vim и местами содержит
довольно сложную информацию. Для начинающих имеется практический курс |tutor|.
Начать изучение Vim можно с чтения руководства пользователя |usr_toc.txt|.

							*book* *books*
Большинство книг по Vi и Vim содержат раздел для начинающих, но некоторые
освещают и какие-нибудь специфические возможности. Обзор литературы по 
редактору Vim расположен на:
	http://iccf-holland.org/vim_books.html

==============================================================================
2. Vim в Интернете					*internet*

			*www* *WWW*  *faq* *FAQ* *distribution* *download*
Самая свежая информация содержится на веб-сайтах, посвящённых редактору Vim.
Там же можно найти ссылки на самые последние версии Vim. Раздел FAQ содержит
часто задаваемые вопросы, где можно найти решение в случае возникновения
проблем.

	Домашняя страница Vim:    https://www.vim.org/
	Раздел FAQ для Vim:       https://vimhelp.org/vim_faq.txt.html
	Раздел загрузки:	  https://www.vim.org/download.php


Задать вопрос и найти ответ можно на: https://vi.stackexchange.com/
"Раздел сайта Stack Exchange для Vi и Vim - это сайт вопросов и ответов для всех
пользователей текстовых редакторов семейства vi и Vim"


Новостные группы сети Usenet, на которых обсуждается Vim:	*news* *usenet*
	comp.editors
В этой группе обсуждают и другие редакторы. Не забудьте указать, что пишете
о редакторе Vim.
Доступ к группе можно получить здесь:
https://groups.google.com/forum/#!topic/comp.editors

						*mail-list* *maillist*
Имеется несколько списков рассылки для Vim:
<vim@vim.org>					*vim-use* *vim_use*
	Для обсуждений по использованию различных версий Vim: Полезные
	раскладки, вопросы, ответы, место нахождения различных версий и так
	далее. В группе немало людей принимает активное участие и отвечает на
	вопросы, в том числе и начинающих пользователей. Не бойтесь задать здесь
	вопрос.
<vim-dev@vim.org>				*vim-dev* *vim_dev* *vimdev*
	Для обсуждения о внесении изменений в Vim: Новые функциональные
	возможности, версии для разных систем, патчи, бета-версии для
	тестирования, и так далее.
<vim-announce@vim.org>				*vim-announce* *vim_announce*
	Информация о выходе новых версий Vim; включает бета-версии и создание
	версий для различных систем. Эта рассылка предназначена только для
	чтения.
<vim-mac@vim.org>				*vim-mac* *vim_mac*
	Для обсуждения использования и улучшения версии Vim для Macintosh.

Самая свежая информация по рассылкам доступна на 
http://www.vim.org/maillist.php.

ПРИМЕЧАНИЕ:
- Архив рассылки доступен для просмотра, например, в группах Google. Там можно
  искать ответы на вопросы.
- Для отправки сообщения в список рассылки необходимо оформить подписку!
- Первое сообщение проверяется модератором, поэтому оно может появиться только
  через несколько часов.
- Сообщения нужно отправлять из того же места, откуда выполнялась подписка (во 
  избежание получения спама).

						*subscribe-maillist*
Подписаться на список рассылки можно путём отправки сообщения по адресу
	<vim-subscribe@vim.org>
Убедитесь в правильности содержимого поля "From:". Затем сервер рассылки
вышлет инструкции о порядке оформления подписки.

						*maillist-archive*
Более подробную информацию и архивы можно найти на странице, посвящённой
спискам рассылки Vim: http://www.vim.org/maillist.php


Сообщения об ошибках			*bugs* *bug-reports* *bugreport.vim*

Существует три способа для передачи сообщений об ошибках:
1. Если проблема связана с файлом среды исполнения, сообщите о ней
   ответственному разработчику по адресу электронной почты, указанном в
   заголовке файла, или каким-нибудь другим образом.
2. Откройте вопрос на GitHub: https://github.com/vim/vim/issues
   Текст будет отправлен в список рассылки vim-dev.
3. Отправьте сообщение об ошибке на: Vim Developers <vim-dev@vim.org>
   Это список рассылки. Для отправки сообщения в список рассылки сначала
   необходимо стать его участником, после чего другие участники смогут прочитать
   сообщение. В случае нежелания афишировать проблему, например, с связи
   с вопросами безопасности, отправьте сообщение на <bugs@vim.org>. В этом
   случае письмо будет отправлено только ответственному разработчику Vim,
   то есть Браму.

Проблему нужно описывать кратко; время, потраченное на общение по почте,
вычитается из общего времени на улучшение Vim! Всегда передавайте
воспроизводимые примеры и пытайтесь обнаружить какие именно параметры или
действия вызывают появление ошибки.

Предпочтителен вариант с запуском Vim с помощью команды: >
        vim --clean -u reproduce.vim
Где reproduce.vim - это сценарий, который воспроизводит ошибку. Попробуйте
воспроизвести ошибку на разных системах, если это имеет смысл (вдруг окажется,
что эта ошибка воспроизводится только на MS-Windows?).

По возможности, высылайте патчи! При создании запроса на вытягивание на
https://github.com/vim/vim запускается автоматизированная проверка, которая
сообщит о наличии каких-либо очевидных проблем. Однако можно отправить патч
и по электронной почте (лучше прикреплять файл к почтовому сообщению, чтобы
не возникло проблем с пробелами).

Необходимую информацию по используемой версии Vim и настройке параметров
можно получить с помощью следующей команды: >
   :so $VIMRUNTIME/bugreport.vim
В результате выполнения команды в текущем каталоге создаётся файл
"bugreport.txt", который содержит большое количество информации по вашей
рабочей среде. Перед отправкой необходимо проверить его содержимое на наличие
конфиденциальной информации!

В случае сбоя Vim, попытайтесь определить точку возникновения сбоя. В этом
может помочь справка по отладке в файле: |debug.txt|.

Если решение для проблемы найти никак не удаётся, но имеется склонность
предполагать, что оно уже было найдено, подпишитесь на список рассылки vim-dev
и задайте вопрос там. |maillist|

							*year-2000* *Y2K*
Поскольку редактирование дат в Vim не применяется, проблема 2000 года для него
не актуальна. Время в Vim используется в формате количества секунд с 1 января
1970 года и применяется для проверки метки времени редактируемого файла и файла
подкачки, что не оказывает влияния на работу программы и может привести лишь к
выводу предупреждений.

Возможно возникновение проблемы 2038 года, когда количество секунд перестанет
помещаться в 32-разрядное целое число. Всё это зависит от конкретного
компилятора, библиотек и операционной системы. В данном конкретном случае
используются функции time_t и ctime(). Причем функция time_t хранит данные в
четырёх байтах в файле подкачки. Однако она используется только для вывода
даты/времени файла при его восстановлении и на процесс редактирования никак не
влияет.

В Vim функция strftime() напрямую использует системную функцию strftime().
Функция localtime() использует системную функцию time(). Функция getftime()
использует время, возвращаемое системной функцией stat(). Если системные
библиотеки совместимы с проблемой 2000 года, то должен быть совместим и Vim.

С другой стороны, пользователь может создавать для Vim сценарии, в которых
будут использоваться внешние команды, а эти команды могут быть несовместимы
с проблемой 2000 года. Однако в любом случае они уже не являются частью Vim.

==============================================================================
3. Благодарности		*credits* *author* *Bram* *Moolenaar*

Автором большей части Vim является Bram Moolenaar <Bram@vim.org>.

Отдельные части документации позаимствованы из нескольких руководств по Vi, 
авторами которых являются:
	W.N. Joy
	Alan P.W. Hewett
	Mark Horton

Текстовый редактор Vim основан на редакторе Stevie, а также содержит некоторое
количество фрагментов (и идей) из других программ, созданных упомянутыми ниже
разработчиками. Многие другие участники создавали патчи, отправляли предложения
и отзывы о положительных и отрицательных сторонах Vim.

Vim никогда не стал бы тем, чем он стал теперь, без помощи всех этих людей!

	Ron Aaron		внесение изменений в графический интерфейс Win32
	Mohsin Ahmed		шифрование
	Zoltan Arpadffy		разработка версии для VMS
	Tony Andrews		Stevie
	Gert van Antwerpen	изменения для DJGPP в MS-DOS
	Berkeley DB(3)		идея для реализации файла подкачки
	Keith Bostic		Nvi
	Walter Briscoe		обновления Makefile, различные патчи
	Ralf Brown		Библиотека SPAWNO для MS-DOS
	Robert Colon		большое количество полезных замечаний
	Marcin Dalecki		версия графического интерфейса на GTK+,
				значки панели инструментов, gettext()
	Kayhan Demirel		отправка новостей из Уганды
	Chris & John Downey	xvi (идеи для многооконной версии)
	Henk Elbers		первая версия для VMS
	Daniel Elstner		вторая версия для GTK+
	Eric Fischer		версия для Mac, 'cindent', и другие 
				усовершенствования
	Benji Fisher		Большое количество ответов на вопросы 
				пользователей
	Bill Foster		версия графического интерфейса для Athena
				(позднее удалена)
	Google			даёт мне возможность посвящать разработке Vim
				один день в неделю
	Loic Grenie		xvim (идеи для многооконной версии)
	Sven Guckes		популяризатор Vim и предыдущий ответственный
				разработчик веб-страницы
	Darren Hiebert		Exuberant ctags
	Jason Hildebrand	вторая версия для GTK+
	Bruce Hunsaker		улучшения в версии для VMS
	Andy Kahn		поддержка Cscope, версия графического интерфейса
				для GTK+
	Oezguer Kesim		ответственный по спискам рассылки Vim
	Axel Kielhorn		работа над версией для Macintosh
	Steve Kirkendall	Elvis
	Roger Knobbe		исходная версия для Windows NT
	Sergey Laskavy		помощь в разработке Vim от участника из Москвы
	Felix von Leitner	предыдущий ответственный по спискам рассылки Vim
	David Leonard		перенос расширений Python в Unix
	Avner Lottem		редктирование в окнах справа налево
	Flemming Madsen		клиент-сервер X11, различные функциональные
				возможности и патчи
	Tony Mechelynck		ответы на вопросы пользователей
	Paul Moore	        расширения интерфейса Python, большое количество
				патчей
	Katsuhito Nagano        работа над многобайтовыми версиями
	Sung-Hyun Nam		работа над многобайтовыми версиями
	Vince Negri		улучшение графического интерфейса для Win32
				и общие усовершенствования для консоли
	Steve Oualline		автор первой книги про Vim |frombook|
	Dominique Pelle		отчёты Valgrind и большое количество исправлений
	A.Politz		большое количество сообщений об ошибках
				и несколько исправлений
	George V. Reilly	версия для Win32, начало разработки графического
				интерфейса для Win32
	Stephen Riehm		сборщик ошибок
	Stefan Roemer		различные патчи и помощь пользователям
	Ralf Schandl		версия для IBM OS/390
	Olaf Seibert		версия для DICE и BeBox, усовершенствования
				для регулярных выражений
	Mortaza Shiran		патчи по языку фарси
	Peter da Silva		termlib
	Paul Slootman		версия для OS/2
	Henry Spencer		регулярные выражения
	Dany St-Amant		версия для Macintosh
	Tim Thompson		Stevie
	G. R. (Fred) Walter	Stevie
	Sven Verdoolaege	интерфейс Perl
	Robert Webb		автодополнение командной строки, версии
				с графическим интерфейсом и большое количество
				патчей
	Ingo Wilken		интерфейс Tcl
	Mike Williams		печать PostScript
	Juergen Weigert		версия для Lattice, усовершенствования для AUX,
				версии для UNIX и MS-DOS, autoconf
	Stefan 'Sec' Zehl	сопровождение сайта vim.org
	Yasuhiro Matsumoto	большое количество усовершенствований в версии
				для MS-Windows
	Ken Takata		исправления и новые функциональные возможности
	Kazunobu Kuriyama	GTK 3
	Christian Brabandt	большое количество исправлений и функциональных
				возможностей, оказание поддержки пользователям
				и многое другое
	Yegappan Lakshmanan	большое количество функциональных возможностей
				для quickfix

Хочу поблагодарить всех, кто отправлял мне свои предложения и сообщения об
ошибках. Список участников слишком велик, чтобы можно было поместить сюда всех.
Vim никогда не стал бы тем, чем он является сегодня, без воплощения идей,
предложенных всеми участниками: Vim продолжает развиваться только благодаря им!

*love* *peace* *friendship* *gross-national-happiness*


В этой документации содержится несколько ссылок на другие версии Vi:
							*Vi* *vi*
Vi	"оригинальная версия". Не углубляясь в подробности будем считать, что
	это та версия Vi, которая появилась в Sun OS 4.x. Команда ":version"
	выводит строку "Version 3.7, 6/7/85". Но иногда информация о версии
	может отличаться от указанной. Работает только в среде Unix. Исходный
	код теперь доступен на условиях лицензии BSD. Больше информации о Vi
	можно найти на сайте:
		http://ex-vi.sourceforge.net/
							*Posix*
Posix	Из стандарта IEEE 1003.2, Часть 2: Команды управления и сервисные
	программы. Известен под названием "Posix". В тексте описывается
	как должен работать Vi. Смотри |posix-compliance|.
							*Nvi*
Nvi	"Новый" Vi ("New" Vi). Версия Vi, которая входит в состав дистрибутива
	BSD 4.4 и FreeBSD. Прекрасно совместим с первоначальной версией Vi и
	содержит ряд дополнений. В настоящее время используется версия 1.79. 
	Команда	":version" выводит строку "Version 1.79 (10/23/96)". Новые 
	версии не выходили последние несколько лет не смотря на наличие в 
	разработке версии 1.81. Исходный код доступен без ограничений.
							*Elvis*
Elvis	Ещё один клон Vi. Автор — Steve Kirkendall. Очень компактный, но не
	такой гибкий, как Vim. Разработка остановилась, Элвис покинул здание!
	Исходный код доступен без ограничений.
							*Neovim*
Neovim	Клон Vim. Ответвление Vim 2014 года, авторы которого предпочли двигаться
	в другом направлении. Имеет сильную привязку к github и намного больше
	зависимостей, усложняющих разработку и ограничивающих переносимость.
	Код был серьёзно переработан, в результате чего взаимоприменяемость
	патчей с Vim невозможна. Поддерживает удалённый графический интерфейс 
	и интеграцию с языками сценариев.

==============================================================================
4. Условные обозначения						*notation*

При использовании подсветки синтаксиса для чтения этого файла, условные
обозначения, использующиеся для обособления текста, не предназначенного для
буквального ввода, часто выделяются особой подсветкой. Это текст, заключённый
в [], {} и <>, а также комбинации клавиш CTRL-X.

Однако необходимо помнить, что в командах Vim могут использоваться самые
разнообразные символы. Поэтому в некоторых случаях символы [], {} и <> могут
вводиться буквально, что обычно понятно из контекста.


[]		Символы в квадратных скобках содержат необязательный текст.

						    *count* *[count]*
[число]		Необязательное число, которое может быть указано перед командой
		для увеличения числа повторов или итераций команды. Если число
		не указано, то принимается равным единице при отсутствии иных
		указаний. Обратите внимание на то, что в этом руководстве в
		описании команды [число] не указывается. Это делается лишь
		в объяснении. Такая запись позволяет упростить поиск команд.
		Если включен параметр 'showcmd', (частично) введённое число
		будет отображаться в нижней части окна. Для удаления последней
		введённой цифры нужно воспользоваться клавишей <Del> (|N<Del>|).

							*[quotex]*
["x]		Необязательное обозначение регистра, в котором может храниться
		текст. Смотри раздел |registers|. x обозначает один символ
		от 'a' до 'z' или от 'A' до 'Z' или '"', а в некоторых случаях
		(с командой put) символ от '0' до '9', '%','#' и другие.
		Прописные и строчные буквы указывают на один и тот же регистр,
		но применение строчной буквы приведёт к перезаписи текущего
		содержимого регистра, а прописной — к добавлению нового текста
		к его содержимому. Если ""x" не указан или указано """",
		сохраняемый текст будет помещён в безымянный регистр.

							*{}*
{}		В фигурные скобки заключаются обязательные составные части
		команды, в которые могут подставляться числа с различными
		значениями. Различия между Vim и Vi также приводятся в фигурных
		скобках (будет понятно из контекста).

							*{char1-char2}*
{char1-char2}	Один символ из диапазона char1 — char2. Например: {a-z} является
		символом строчной буквы. При этом возможно объединение
		нескольких диапазонов. Например, запись {a-zA-Z0-9} является
		представлением любого буквенно-цифрового символа.

						*{motion}* *movement*
{перемещение}	Команда перемещения курсора. Описание содержится в файле
		|motion.txt|. Примеры:
			w		перемещение к началу следующего слова
			b		перемещение к началу текущего слова
			4j		перемещение на четыре строки вниз
			/The<CR>	перемещение к следующему вхождению
					текста "The"
		Используется после команды-оператора (|operator|) для выполнения 
		действия над текстом, по которому производится перемещение
		курсора.
		- Если число повтора команды указано перед командой перемещения
		  и перед командой-оператором, то числа эти перемножаются.
		  Например команда: "2d3w" удалит шесть слов.
		- Перемещение курсора может совершаться и в обратном
		  направлении. Например, команда "db" приведёт к удалению текста
		  до начала слова.
		- Поддерживается перемещение курсора по щелчку мыши. Хотя мышь
		  поддерживается не всеми терминалами.
		- Команда ":omap" позволяет создавать сопоставления клавиш для
		  выделения символов в режиме ожидания команды.
		- Команды в режиме Ex также могут быть использованы для
		  перемещения курсора. При этом можно вызвать функцию для
		  выполнения сложных перемещений. Перемещения всегда совершаются
		  исключительно посимвольно, независимо от команды, которая
		  используется в режиме командной строки ":". Это означает,
		  что последний символ строки не может быть добавлен без
		  перевода строки (при отключённом параметре "virtualedit").
		  Если команда в режиме Ex изменяет текст, находящийся перед
		  точкой запуска команды-оператора, или переходит к другому
		  буферу, то это может привести к непредсказуемым последствиям.
		  Изменять можно текст, который располагается ниже, а переход
		  к другому буферу возможен, если текущий буфер при этом не
		  выгружается.

							*{Visual}*
{визуальный}	Выделение текстового поля. Режим включается командой "v", "V"
		или комбинацией CTRL-V, после чего можно использовать любую
		команду перемещения курсора для изменения конечной точки
		выделения текста. Используется перед командой-оператором 
		(см. раздел |operator|) для выделения текста, с которым 
		предполагается производить какие-либо действия. См. раздел 
		|Visual-mode|.

							*<character>*
<символ>	Специальный символ из приведённой ниже таблицы, который может 
		использоваться с модификаторами, либо символ ASCII с
		модификаторами.

							*'character'*
'c'		Один символ ASCII.

			 				*CTRL-{char}*
CTRL-{символ}	{символ} здесь играет роль управляющего символа; это значит,
		что {символ} вводится при удержании клавиши CTRL. Регистр
		{символа} в данном случае не имеет значения; Это означает,
		что комбинации CTRL-A и CTRL-a идентичны. Однако на некоторых
		терминалах использование клавиши SHIFT приводит к выводу
		другого	кода. В этом случае использовать такую комбинацию
		не рекомендуется.

							*'option'*
'параметр'	Параметр, для которого можно задать значение, заключается
		в одиночные кавычки. См. раздел |options|.

							*quotecommandquote*
"команда"	Ссылка на вводимую команду заключается в двойные кавычки.
`команда`	Новый стиль записи отличает команду от другого заключаемого
		в кавычки текста.

					*key-notation* *key-codes* *keycodes*
Приведённые ниже обозначения клавиш используются в документации. Они также могут
использоваться с командной ":map" (ввод обозначения клавиши осуществляется
нажатием CTRL-K с последующим нажатием клавиши, обозначение которой необходимо
завести).

обозначение	значение		аналог	десятичное значение	~
-----------------------------------------------------------------------
<Nul>		нуль			CTRL-@	  0 (хранится как 10) *<Nul>*
<BS>		удаление назад		CTRL-H	  8	*backspace*
<Tab>		табуляция		CTRL-I	  9	*tab* *Tab*
							*linefeed*
<NL>		перевод строки		CTRL-J	 10 (исп. для <Nul>)
<CR>		возврат каретки		CTRL-M	 13	*carriage-return*
<Return>	аналог <CR>				*<Return>*
<Enter>		аналог <CR>				*<Enter>*
<Esc>		escape			CTRL-[	 27	*escape* *<Esc>*
<Space>		пробел				 32	*space*
<lt>		меньше			<	 60	*<lt>*
<Bslash>	обратная косая черта	\	 92	*backslash* *<Bslash>*
<Bar>		вертикальная черта	|	124	*<Bar>*
<Del>		удаление вправо			127
<CSI>		command sequence intro  ALT-Esc 155	*<CSI>*
<xCSI>		нажатие CSI в графическом интерфейсе 	*<xCSI>*

<EOL>		конец строки (может быть <CR>, <NL> или <CR><NL>,
		зависит от системы и 'fileformat') 	*<EOL>*

<Up>		курсор вверх			*cursor-up* *cursor_up*
<Down>		курсор вниз			*cursor-down* *cursor_down*
<Left>		курсор влево			*cursor-left* *cursor_left*
<Right>		курсор вправо			*cursor-right* *cursor_right*
<S-Up>		shift-курсор вверх
<S-Down>	shift-курсор вниз
<S-Left>	shift-курсор влево
<S-Right>	shift-курсор вправо
<C-Left>	control-курсор влево
<C-Right>	control-курсор вправо
<F1> - <F12>	функциональные клавиши с F1 по F12 *function_key* *function-key*
<S-F1> - <S-F12> shift-функц. клавиши с F1 по А12	*<S-F1>*
<Help>		клавиша help
<Undo>		клавиша undo
<Insert>	клавиша insert
<Home>		клавиша home			*home*
<End>		клавиша end			*end*
<PageUp>	клавиша page-up			*page_up* *page-up*
<PageDown>	клавиша page-down		*page_down* *page-down*
<kHome>		home на доп. кл. (вверху слева)	*keypad-home*
<kEnd>		end на доп. кл. (внизу слева)	*keypad-end*
<kPageUp>	page-up на доп.кл. (вверху справа) *keypad-page-up*
<kPageDown>	page-down на доп.кл. (внизу справа) *keypad-page-down*
<kPlus>		клавиша "+" на доп. кл.		*keypad-plus*
<kMinus>	клавиша "-" на доп. кл.		*keypad-minus*
<kMultiply>	клавиша "*" на доп. кл.	        *keypad-multiply*
<kDivide>	клавиша "/" на доп. кл.		*keypad-divide*
<kEnter>	клавиша Enter на доп. кл.	*keypad-enter*
<kPoint>	десятичная точка на доп. кл.	*keypad-point*
<k0> - <k9>	клавиши 0 - 9 на доп кл.	*keypad-0* *keypad-9*
<S-...>		shift-клавиша			*shift* *<S-*
<C-...>		control-клавиша			*control* *ctrl* *<C-*
<M-...>		alt-клавиша или meta-клавиша	*meta* *alt* *<M-*
<A-...>		аналог <M-...>		*<A-*
<D-...>		command-клавиша (только Macintosh) *<D-*
<t_xx>		клавиша с записью "xx" в termcap
-----------------------------------------------------------------------

Примечание: Комбинированные с Shift клавиши управления курсором, а также
клавиши help и undo имеются далеко не на всех терминалах. На компьютерах
Amiga комбинация клавиш Shift-F10 генерирует код (CSI), который также можно
использовать в сочетаниях клавиш. Этот код считывается только при нажатии ещё
одной клавиши.

Примечание: Клавиша delete может генерировать два разных кода. Обычно
используется десятичный ASCII-код 127, который распознаётся во всех случаях.
Однако иногда код может принимать другое значение. В таком случае значение
считывается из записи termcap «kD». Однако действие клавиши при обоих значениях
будет одинаковым. См. также раздел |:fixdel|.

Примечание: использование клавиш дополнительной клавиатуры идентично
использованию соответствующих им клавиш основной клавиатуры. Например,
действие клавиши <kHome> соответствует действию клавиши <Home>. Если код
клавиши дополнительной клавиатуры совпадает с кодом клавиши основной
клавиатуры, то он будет восприниматься как код основной клавиатуры. Например,
если код клавиши <kHome> совпадает с кодом клавиши <Home>, то нажатие клавиши
<kHome> будет восприниматься в Vim как нажатие клавиши <Home>. В таком случае
комбинации с <kHome> работать не будут.

								*<>*
Обозначения клавиш в примерах часто заключаются в символы <>. Иногда это
делается для пояснения общего порядка работы с клавиатурой, но в некоторых
случаях в тексте представлены примеры для буквального ввода, например,
при использовании команды ":map". Правила здесь следующие:
 1.  Любые печатные символы вводятся напрямую, за исключением обратной косой
     черты и символа '<'
 2.  Обратная косая черта записывается в виде двойной косой черты "\\" 
     или "<Bslash>".
 3.  Символ '<' записывается в виде "\<" или "<lt>". Если исключается
     возможность возникновения путаницы, то символ '<' можно вводить напрямую.
 4.  "<key>" означает ввод специальной клавиши. Эта система обозначений
     представлена в таблице выше. Приведём несколько примеров:
	   <Esc>		Клавиша Escape
	   <C-G>		CTRL-G
	   <Up>			Клавиша перемещения курсора вверх
	   <C-LeftMouse>	CTRL-щелчок левой кнопки мыши
	   <S-F11>		Shift-F11
	   <M-a>		Meta-a  ('a' с установленным 8 битом)
	   <M-A>		Meta-A  ('A' с установленным 8 битом)
	   <t_kd>		Запись termcap "kd" (клавиша перемещения 
	                        курсора вниз)
    Несмотря на то, что в записи <M-{символ}> в качестве {символа} можно указать
    многобайтовый символ, последовательность байтов может быть не распознана
    Vim, в результате чего комбинация работать не будет.

При использовании полной системы обозначений <> в Vim необходимо убедиться
в том, что флаг '<' исключён из 'cpoptions' (при отключенном параметре
'compatible', который по умолчанию обычно уже отключён). >
	:set cpo-=<
В системе обозначений <> для экранирования значений наименования клавиш этот
символ используется в виде <lt>. Здесь также можно использовать обратную косую
черту, но только при отсутствии флага 'B' в составе 'cpoptions'.

В примерах ниже задаётся сопоставление для комбинации CTRL-H и шести символов
"<Home>": >
	:imap <C-H> \<Home>
	:imap <C-H> <lt>Home>
Первый вариант будет работать только при отсутствии флага 'B' в составе
'cpoptions'. Второй будет работать в любом случае.
Для получения строки "<lt>" в сопоставлении необходимо ввести: >
	:map <C-L> <lt>lt>

В дальнешем примеры для сопоставлений клавиш, сокращений и команд меню можно
использовать напрямую путём копирования и вставки. Также возможен буквальный
ввод, включая символы '<' и '>'. Однако в таком виде они НЕ будут работать 
с другими командами, такими как ":set" и ":autocmd"!

Эта система обозначений может использоваться в строках, заключённых в двойные
кавычки и содержащих в начале строки символ экранирования "\<", например, 
"\<C-Space>", что приведёт к формированию специального кода клавиши. Обратное
преобразование в читаемый текст потребует использования функции `keytrans()`.

==============================================================================
5. Режимы, введение				*vim-modes-intro* *vim-modes*

Vim работает в семи ОСНОВНЫХ режимах
					*Normal* *Normal-mode* *command-mode*
Обычный режим		В обычном режиме можно вводить все обычные команды
			редактора. Редактор пои запуске начинает работать
			в этом режиме по умолчанию (если не был установлен 
			параметр 'insertmode', см. ниже). Также его иногда 
			называют командным режимом.

Визуальный режим	Этот режим похож на обычный, но команды перемещения 
			регулируют размер области выделения. При вводе команды,
			не имеющей отношения к перемещению курсора, она
			воздействует только на выделенную область. См. раздел
			|Visual-mode|.
			Если параметр 'showmode' включён, в нижней части
			окна отображается строка "-- ВИЗУАЛЬНЫЙ РЕЖИМ --".

Режим выделения		Данный режим выглядит очень похоже на режим выделения,
			принятый в приложениях MS-Windows. При вводе печатного
			символа удаляется выделенный текст, после чего редактор
			сразу переходит в режим вставки. См. раздел
			|Select-mode|.
			Если параметр 'showmode' включён, в нижней части
			окна отображается строка "-- ВЫДЕЛЕНИЕ --".

Режим вставки		В режиме вставки печатный текст вводится в буфер
			См. раздел |Insert-mode|.
			Если параметр 'showmode' включён, в нижней части
			окна отображается строка "-- ВСТАВКА --".

Командный режим		Командный режим (также называется режимом командной
Режим командной строки	строки) позволяет осуществлять ввод в одну строку
			текста в нижней части окна. Этот режим предназначен
			для ввода команд, начинающихся с ":", команд поиска
			по шаблону, "?" и "/", а также команд фильтра "!".
			|Cmdline-mode|

Режим Ex		Похож на командный режим, но после ввода команды
			пользователь остаётся в режиме командной строки.
			Обладает весьма ограниченными возможностями
			редактирования командной строки. |Ex-mode|

Режим терминала		Обеспечивает интерактивное выполнение задачи в окне
			терминала. Позволяет вводить команды для выполнения
			задачи и выводить результаты выполнения в окно
			терминала.
			См. раздел |terminal| по вопросу переключения в
			другие режимы.

Существует ещё семь ДОПОЛНИТЕЛЬНЫХ режимов, которые являются вариантами семи
ОСНОВНЫХ режимов:

				*Operator-pending* *Operator-pending-mode*
Режим ожидания команды	Этот режим похож на обычный, но начинается после ввода
			команды-оператора, когда Vim ожидает ввода команды
			{перемещения} для указания области текста, над которым
			будет производится указанное действие.

Режим замены		Режим замены является особым вариантом режима вставки.
			Позволяет работать как в режиме вставки с тем отличием,
			что при вводе каждого символа, удаляется один символ
			текущего текста. См. раздел |Replace-mode|.
			Если параметр 'showmode' включён, в нижней части окна
			отображается строка "-- ЗАМЕНА --".

Режим виртуальной	Режим виртуальной замены похож на режим замены, но
замены			вместо замены текста в файле меняется только текст
			на экране. См. раздел |Virtual-Replace-mode|.
			Если параметр 'showmode' включён, в нижней части окна
			отображается строка "-- ВИРТУАЛЬНАЯ ЗАМЕНА --".

Обычный режим в режиме	Переключение в этот режим осуществляется с помощью
вставки			комбинации CTRL-O при работе в режиме ввода (см. раздел
			|i_CTRL-O|). При этом Vim переходит в обычный режим
			работы, но после выполнения одной команды тут же
			возвращается в режим вставки.
			Если параметр 'showmode' включён, в нижней части окна
			отображается строка "-- (вставка) --".

Обычный режим в режиме	Позволяет работать в окне терминала как в нормальном
терминала		режиме. Внесение изменений невозможно. Возврат
			в режим терминала осуществляется с помощью команды
			ввода "a" или "i".

Визуальный режим в	Переключение в этот режим осуществляется в случае
режиме вставки		перехода в визуальный режим из режима вставки, например,
			если ввести сначала CTRL-O, а затем "v", "V" или CTRL-V. 
			При завершении визуального выделения Vim возвращается
			к работе в режиме вставки.
			Если параметр 'showmode' включён, в нижней части окна
			отображается строка "-- (вставка) ВИЗУАЛЬНЫЙ РЕЖИМ --".

Режим выделения в	Переключение в этот режим осуществляется в случае
режиме вставки		перехода в режим выделения из режима вставки. Например,
			путём протягивания мыши или с помощью комбинации
			<S-Right>. При завершении режима выделения Vim
			возвращается в режим Вставки.
			Если параметр 'showmode' включён, в нижней части окна
			отображается строка "-- (вставка) ВЫДЕЛЕНИЕ --".

==============================================================================
6. Переключение между режимами				*mode-switching*

Если неизвестен режим работы редактора в данный момент, всегда можно вернуться
в обычный режим двойным нажатием <Esc>. Этот вариант не работает только в
режиме Ex, для чего в этом случае необходимо использовать команду ":visual".
О возвращении в обычный режим можно судить по мерцанию экрана или звуку
сигнала при нажатии <Esc>. Однако звуковой сигнал при нажатии <Esc> может
подаваться и после ввода CTRL-O в режиме вставки, когда редактор продолжает
работать в режиме вставки. В этом случае необходимо нажать <Esc> ещё раз.

							*i_esc*
		Переход в режим				    ~
		Обычный	Визуал. Выделен. Вставки  Замены   Командный  Ex ~
Текущий режим								 ~
Обычный			v V ^V	  *4	 *1	   R gR     : / ? !   Q
Визуальный	 *2		  ^G	 c C	    --	      :       --
Выделения	 *5	^O ^G		 *6	    --	      --      --
Вставки		 <Esc>	  --	  --		  <Insert>    --      --
Замены		 <Esc>	  --	  --	<Insert>	      --      --
Командный	 *3	  --	  --	 :start	    --		      --
Ex		 :vi	  --	  --	 --	    --	      --

-- невозможно
*1 Для перехода из обычного режима в режим вставки необходимо ввести одну
   из следующих команд: "i", "I", "a", "A", "o", "O", "c", "C", "s" или S".
*2 Для перехода из визуального режима в обычный режим необходимо ввести
   команду, не являющуюся командой перемещения, что приведёт к выполнению
   введённой команды. Также можно нажать <Esc> "v", "V"  или "CTRL-V"
   (см. раздел |v_v|) для выхода из визуального режима без внесения 
   каких-либо изменений.
*3 Для перехода из режима командной строки в обычный режим необходимо:
   - нажать <CR> или <NL>, что приведёт к исполнению введённой команды.
   - полностью удалить текст из командной строки (например, с помощью
   комбинации CTRL-U), после чего нажать клавишу <BS>.
   - нажать CTRL-C или <Esc>, что приведёт к отключению режима командной
   строки без исполнения команды.
   В последнем случае при нажатии <Esc> может произойти автодополнение
   командной строки, если в параметре 'wildchar' был указан символ. Можно
   проигнорировать это и нажать <Esc> ещё раз.
*4 Для перехода из обычного режима в режим выделения необходимо:
   - выделить мышью текст, если параметр 'selectmode' содержит значение "mouse"
   - использовать непечатную команду для перемещения курсора при удержании
   клавиши Shift, если параметр 'selectmode' содержит значение "key"
   - нажать "v", "V" или "CTRL-V", если параметр 'selectmode' содержит 
   значение "cmd"
   - нажать "gh", "gH" или "g CTRL-H"  |g_CTRL-H|
*5 Для перехода из режима выделения в обычный режим необходимо ввести непечатную
   команду для перемещения курсора без удержания клавиши Shift.
*6 Для перехода из режима выделения в режим вставки необходимо ввести печатный
   символ. Выделенная область удаляется и заменяется на этот символ.

Если включён параметр 'insertmode', редактирование файла начинается в режиме
ввода.

	*CTRL-\_CTRL-N* *i_CTRL-\_CTRL-N* *c_CTRL-\_CTRL-N* *v_CTRL-\_CTRL-N*
Для перехода в обычный режим работы из любого другого режима можно также
воспользоваться командой CTRL-\ CTRL-N или <C-\><C-N>. При этом Vim переводится
в обычный режим без подачи звукового сигнала, выдаваемого при нажатии <Esc>.
Однако этот способ не будет работать в режиме Ex. Если же эта команда
выполняется после ввода команды, для которой необходимо ввести аргумент,
например |f| или |m|, устанавливается время ожидания, заданное в параметре
'ttimeoutlen'. Если окно терминала активно, ввод CTRL-\ CTRL-N переводит
редактор в обычный режим работы до тех пор, пока не будет введенаа команда
редактирования, см. раздел |t_CTRL-\_CTRL-N|.

	*CTRL-\_CTRL-G* *i_CTRL-\_CTRL-G* *c_CTRL-\_CTRL-G* *v_CTRL-\_CTRL-G*
Команду CTRL-\ CTRL-G или <C-\><C-G> можно использовать для перехода в режим
вставки, после включения параметра 'insertmode'. В противном случае, будет
выполнен переход в обычный режим. Это позволяет перевести Vim в режим, заданный
параметром 'insertmode', безотносительно к тому, в каком режиме редактор
выполняется в данный момент.

				    *Q* *mode-Ex* *Ex-mode* *Ex* *EX* *E501*
Q			Переход в режим "Ex". Работа в этом режиме напоминает
			ввод сразу нескольких команд ":", с тем отличием, что:
			- Отсутствует необходимость постоянно вводить ":".
			- Экран не обновляется после ввода каждой команды.
			- Отсутствуют обычные возможности редактирования
			командной строки.
			- Не используются сопоставления клавиш и сокращения
			команд.
			На практике строки редактируются "стандартными"
			командами редактирования командной строки (<Del> или <BS>
			для удаления символов, CTRL-U для удаления целой
			строки).
			По умолчанию Vim запускается в этом режиме с помощью
			команды "ex" или аргумента командной стоки |-e|. 
			Выйти из режима "Ex" можно с помощью команды
			":vi" |:visual|.
			Примечание: В старых версиях Vim команда "Q"
			использовалась для форматирования текста. Теперь
			для этого используется команда |gq|. Но при
			использовании |vimrc_example.vim| или |defaults.vim|
			"Q" будет работать как "gq", за исключением работы
			в режиме выделения.

					*gQ*
gQ			Переход в режим "Ex", схожий с командой "Q". Работа
			в этом режиме также напоминает ввод сразу нескольких
			команд ":", но при этом доступны все команды
			редактирования командной строки, автодополнение и так
			далее. Выход из режима "Ex" осуществляется командой
			`:vi` (`:visual`).

==============================================================================
7. Содержимое окна					*window-contents*

В обычном режиме, а также в режиме Вставки/Замены в окне отображается
содержимое буфера по принципу: Что видите, то и получаете. Существует два
исключения:
- Когда параметр 'cpoptions' содержит значение '$', и изменения не превышают
  пределов одной строки, текст напрямую не удаляется, но последний удалённый
  символ замещается символом '$'.
- Вставка текста в одно окно, не приводит к обновлению того же текста, открытого
  в других окнах, до завершения ввода.

При превышении ширины экрана строки переносятся, если не выключен параметр
'wrap' (см. ниже). Параметр 'linebreak' можно установить для переноса строки
на символе пробела.

Если после последней строки буфера в окне остаётся место, Vim отображает
символ '~' в первой колонке последних строк окна, как показано ниже:

	+-----------------------+
	|одна из строк		|
	|последняя строка	|
	|~			|
	|~			|
	+-----------------------+

Таким образом, отображение символа '~' указывает на конец содержимого буфера.

Если последняя строка не умещается в окне целиком, вместо текста Vim отображает
символ '@' в первой колонке последних строк окна, как показано ниже:

	+-----------------------+
	|первая строка		|
	|вторая строка		|
	|@			|
	|@			|
	+-----------------------+

Таким образом, символ '@' в последних строках окна означает, что последняя
строка не умещается в окне целиком.

При установке флага "lastline" в параметре 'display', символы '@' с левой
стороны окна отображаться не будут, но в случае, когда последняя строка не
умещается целиком, будет отображаться только та часть строки, которая умещается
в окно, а последние три символа последней строки заменяются на "@@@", как
показано ниже:

	+-----------------------+
	|первая строка		|
	|вторая строка		|
	|очень длинная строка, н|
	|е умещающаяся в этом@@@|
	+-----------------------+

Если же строка настолько длинная, что не умещается в окне, то такая ситуация
обрабатывается особым образом. В таком случае Vim отображает только ту часть
строки, которая располагается вокруг курсора. Специальные символы не
отображаются для предоставления возможности редактирования всех частей этой
строки.

Установка значения '@' в параметре 'highlight' позволяет задать особую подсветку
для символов '@' и '~', благодаря которой можно будет отличать их от обычных
символов в буфере.

Параметр 'showbreak' содержит строку, которая вставляется перед переносимыми
строками.

							*wrap-off*
При отключении параметра 'wrap' длинные строки не переносятся, но отображается
только та часть строки, которая умещается на экране. При перемещении курсора
на неотображаемую часть строки экран прокручивается по горизонтали.
Преимущество этого метода заключается в том, что колонки отображаются в своём
настоящем виде, сохраняя возможность редактирования строк, не умещающихся на
экране. Недостатком этого метода является невозможность отображения строки
целиком. Параметр 'sidescroll' регулирует минимальное число колонок
горизонтальной прокрутки.

Все обычные ASCII-символы отображаются на экране непосредственно. Символ <Tab>
заменяется количеством пробелов, которое он представляет. Другие непечатные
символы заменяются символом "^{char}", где {char} — непечатный символ с
прибавлением к его коду числа 64. Таким образом символ 7 (сигнал) будет
отображаться как "^G". Символы в диапазоне от 127 до 160 заменяются на
"~{char}", где {char} — символ с вычитанием из его кода числа 64. Поскольку
эти символы занимают больше одного знакоместа на экране, курсор может
располагаться только на первом из них.

При включении параметра 'number', в начале каждой строки указывается её номер.
Подсказка: Если требуется отделить перенос строк от их нумерации, установите
восемь пробелов в качестве значения параметра 'showbreak':
	":set showbreak=\ \ \ \ \ \ \ \ "

При включении параметра 'list', символы <Tab> будут отображаться не в виде
нескольких пробелов, а в виде "^I". Конец строки будет обозначаться символом
'$', что позволит выявлять пробелы в конце строки.

В режиме командной строки актуальным будет только отображение командной строки.
Отображение содержимого буфера обновится только при переходе обратно в обычный
режим.

Последняя строка окна используется в качестве строки состояния и других
сообщений. Сообщения в строке состояния будут отображаться только при установке
следующих параметров:

сообщение строки состояния	параметр  по умолчанию	по умолчанию в Unix  ~
текущий режим			'showmode'	on	    on
символы команды			'showcmd'	on	    off
положение курсора		'ruler'		off	    off

Текущий режим "-- ВСТАВКА --" или "-- ЗАМЕНРА --", см. |'showmode'|. Символы
команды - это символы уже введённой, но ещё не использовавшейся команды.

В случае медленной работы терминала, можно отключать отображение сообщений
состояния для увеличения скорости редактирования:
	:set nosc noru nosm

В случае ошибки, сообщение об ошибке будет отображаться не менее одной секунды
(в обратной цветовой гамме).

Некоторые команды отображают количество затронутых строк. В параметре 'report'
можно установить порог вывода этого сообщения (по умолчанию 2).

Vim на компьютере Amiga работает в окне CLI. В заголовке окна отображается
имя Vim, а также полное имя текущего файла. Vim автоматически перерисовывает
окно при изменении его размеров. Можно уменьшать окно до требуемого размера,
однако когда оно становится слишком маленьким, в него перестают помещаться
строки. Для обеспечения возможности чтения сообщений размер последней строки
экрана должен составлять не менее 40 символов в ширину.

Vim корректно распознаёт и обрабатывает изменение размеров окна на большинстве
систем Unix.

==============================================================================
8. Определения						*definitions*

  буфер			Содержит строки текста, обычно считываемые из файла.
  экран			Вся рабочая область Vim. Это может быть	окно эмуляции
  			терминала. Называется также: "окно Vim".
  окно			Отображает содержимое буфера. Для отображения
  			содержимого одного буфера может быть открыто
			несколько окон.

Экран содержит одно или несколько окон, отделяемых строками состояния
и командной строкой внизу.

	+-------------------------------+
экран	| окно 1	| окно 2	|
	|		|		|
	|		|		|
	|= строка сост.=|= строка сост.=|
	| окно 3			|
	|				|
	|				|
	|=====строка сост.==============|
	|командная строка		|
	+-------------------------------+

Командная строка также используется для вывода сообщений. В случае отсутствия
достаточного количества места в командной строке, выполняется прокручивание
строки вверх.

Различие между четырьмя типами строк:

  строки буфера		Строки буфера. Отображаются в том же виде, в котором
  			они считываются/записываются в файле. Могут содержать
			тысячи символов.
  логические строки	Строки буфера с применением складок. Строки буфера
  			в закрытой складке становятся одной логической строкой:
			"+-- 99 строк в складке". Могут содержать тысячи
			символов.
  строки окна		Строки, отображаемые в окне: набор логических строк
  			с переносом, переносы строк, и так далее. Строки не
			могут быть длиннее ширины окна, строки большей длины
			переносятся или обрезаются.
  строки экрана		Строки экрана, которые использует Vim. Состоят из строк
  			всех окон, включая строку состояния и командную строку.
			Длина строки не может превышать ширину экрана. В случае
			превышения ширины экрана, командная строка переносится,
			при этом строки прокручиваются вверх, предоставляя для 
			неё место.

строки буфера логические строки	строки окна	строки экрана ~

1. первая	1. первая	1. +-- складка  1.  +-- складка
2. вторая	2. +-- складка	2. пятая	2.  пятая
3. третья	3. пятая	3. шестая	3.  шестая
4. четвёртая	4. шестая	4. седьмая	4.  седьмая
5. пятая	5. седьмая	5.  === строка состояния ===
6. шестая					6.  aaa
7. седьмая					7.  bbb
						8.  ccc ccc c
1. aaa		1. aaa		1. aaa		9.  cc
2. bbb		2. bbb		2. bbb		10. ddd
3. ccc ccc ccc	3. ccc ccc ccc	3. ccc ccc c	11. ~ 
4. ddd		4. ddd		4. cc		12. === строка состояния ===
				5. ddd		13. (командная строка)
				6. ~ 

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
