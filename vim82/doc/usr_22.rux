*usr_22.txt*	       для Vim version 8.2	      редакция от 28 мар 2020

	          РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
	                      автор Брам Муленар

	       Обнаружение требуемого файла для редактирования


Как найти требуемый файл если он может располагаться где угодно? В редакторе
Vim имеются различные способы для просмотра дерева каталогов. А также
существуют команды позволяющие переходить к упоминаемому в тексте файлу.
Кроме того, в редакторе Vim сохраняется информация о ранее редактируемых
файлах.

|22.1|  Проводник по файловой системе
|22.2|  Текущий каталог
|22.3|  Обнаружение файла
|22.4|  Список буферов

 Следующая глава: |usr_23.txt|  Редактирование особых типов файлов
Предыдущая глава: |usr_21.txt|  Быстрое возобновление работы с редактором Vim
      Содержание: |usr_toc.txt|

==============================================================================
*22.1*  Проводник по файловой системе

Для редактора Vim имеется подключаемый модуль, который позволяет
«редактировать» каталог. Попробуйте так
>
	:edit .
<
Благодаря мощи автокоманд и сценариев редактора Vim, в окне появится
содержимое каталога. Выглядит это примерно так:

" ============================================================================ ~
" Netrw Directory Listing                                        (netrw v109) ~
"   Sorted by      name ~
"   Sort sequence: [\/]$,\.h$,\.c$,\.cpp$,*,\.info$,\.swp$,\.o$\.obj$,\.bak$ ~
"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec ~
" ============================================================================ ~
../ ~
./ ~
check/ ~
Makefile ~
autocmd.txt ~
change.txt ~
eval.txt~ ~
filetype.txt~ ~
help.txt.info ~

В данном случае отображается следующее:

1. Название навигатора и его версия.
2. Название просматриваемого каталога.
3. Метод сортировки (сортировка может быть по наименованию, дате или размеру).
4. Порядок сортировки (вначале каталоги, затем файлы *.h, файлы *.c и т. д.).
5. Способ получения справки (по нажатию клавиши <F1>) и сокращённые
    наименования доступных команд
6. Перечень файлов в каталоге, в том числе и ссылка на каталог "../", что
    позволяет просматривать родительский каталог.

При включённой подсветке синтаксиса разные компоненты навигатора будут
подсвечиваться различными цветами.

Для перемещений в окне навигатора можно использовать команды режима команд.
Попробуйте установить курсор на какой-нибудь файл в окне навигаторе и нажать
клавишу <ENTER>, он будет открыт на редактирование. Чтобы вернуться в
навигатор опять наберите `:edit .` или используйте команду ":Explore".
Комбинация клавиш CTRL-O работает также, как и ожидается.

Теперь попробуйте нажать клавишу <ENTER>, когда курсор находится на названии
каталога. В навигаторе будет выполнен переход в этот каталог и показано его
содержимое. Нажатие <ENTER>, когда курсор находится на каталоге "../" будет
выполнен переход на один уровень вверх в иерархии файловой системы. Того же
эффекта можно достичь при нажатии клавиши "-" (дефис-минус) без необходимости
перемещения курсора к позиции "../".

Для получения справки о том, что можно делать в файловом навигаторе netrw
нажмите клавишу <F1>. Будет отображён следующий текст:
>
 9. Directory Browsing	 netrw-browse   netrw-dir   netrw-list   netrw-help 

    MAPS								 netrw-maps 
     	 <F1>.............Help.......................................|netrw-help|
     	 <cr>.............Browsing...................................|netrw-cr|
     	 <del>............Deleting Files or Directories..............|netrw-delete|
     	 -................Going Up...................................|netrw--|
     	 a................Hiding Files or Directories................|netrw-a|
     	 mb...............Bookmarking a Directory....................|netrw-mb|
     	 gb...............Changing to a Bookmarked Directory.........|netrw-gb|
     	 cd...............Make Browsing Directory The Current Dir....|netrw-c|
     	 d................Make A New Directory.......................|netrw-d|
     	 D................Deleting Files or Directories..............|netrw-D|
     	 <c-h>............Edit File/Directory Hiding List............|netrw-ctrl-h|
     	 i................Change Listing Style.......................|netrw-i|
     	 <c-l>............Refreshing the Listing.....................|netrw-ctrl-l|
     	 o................Browsing with a Horizontal Split...........|netrw-o|
     	 p................Use Preview Window.........................|netrw-p|
     	 P................Edit in Previous Window....................|netrw-p|
     	 q................Listing Bookmarks and History..............|netrw-qb|
     	 r................Reversing Sorting Order....................|netrw-r|
<   (и так далее)

Таким образом, при нажатии клавиши <F1> будет открыто оглавление документации
файлового навигатора. Эта документация является стандартным справочным файлом
используемым в редакторе Vim; чтобы перейти в раздел, воспользуйтесь командой
CTRL-], для возврата используйте команду CTRL-O.

Выбор файла для просмотра и правки (при условии, что курсор находится на
названии файла):

	<Enter>         Открытие файла в текущем окне            |netrw-cr|
	o               Открытие файла во вновь созданном окне   |netrw-o|
	                расположенном горизонтально
	v               Открытие файла во вновь созданном окне   |netrw-v|
	                расположенном вертикально
	p               Открытие файла в окне просмотра		 |netrw-p| 
			(см. |окно_предварительного_просмотра|)
	P               Правка файла в окне просмотра	         |netrw-P|
	t               Открытие файла в новой вкладке           |netrw-t|

Следующие команды могут использоваться для переключения представления в окне
навигатора:

	i               Переключение вида отображения перечня файлов (краткий,
	                подробный, табличный, древовидный)
	s               Указание на использование текущего поля, в котором
	                находится курсор, в качестве критерия сортировки. Для
	                использования этой особенности надо включить
	                отображение даты и размера с помощью команды i. Затем
	                подведите курсор, например, к размеру любого файла,
	                нажмите клавишу s и перечень файлов будет отсортирован
	                по размеру файлов. Аналогично, нажатие клавиши s
	                тогда, когда курсор находится на дате файла, вызывает
	                сортировку перечня файлов по дате.
	r               Переключение на обратный порядок сортировки.

Кроме того, имеется ещё несколько команд:

	cd              Изменение текущего каталога редактора на отображаемый
	                в навигаторе (см. параметр |g:netrw_keepdir|).
	R               Переименование файла или каталога, находящегося под
	                курсором. Требуется ввести новое название.
	D               Удаление файла или каталога, находящегося под курсором.
	                Требуется подтверждение.
	mb gb           Установка закладки. Переход к закладке.

И несколько команд набираемые в командной строке редактора:

	:Explore [каталог]    Просмотр текущего или указанного каталога.
	:NetrwSettings        Полный перечень доступных параметров настройки
	                      навигатора с отсылками на справочную информацию.

Навигатор netrw может отображать файлы не только на локальном компьютере, но и
на удалённых ЭВМ по URL (указание завершающей наклонной черты обязательно):

	:Explore ftp://somehost/path/todir/
	:e scp://somehost/path/to/dir/

Подробную информацию см. в справочнике |netrw-browse|.

==============================================================================
*22.2*  Текущий каталог

В редакторе Vim имеется понятие текущего каталога, точно так же как и в
командной оболочке. Представьте, что находясь в домашнем каталоге
пользователя, требуется отредактировать несколько файлов, расположенных в
каталоге "ОченьДлинноеНазваниеКаталога". Для этого можно было бы вводить
следующие команды:
>
	:edit ОченьДлинноеНазваниеКаталога/file1.txt
	:edit ОченьДлинноеНазваниеКаталога/file2.txt
	:edit ОченьДлинноеНазваниеКаталога/file3.txt
<
Но можно поступить проще. Попробуйте такой способ:
>
	:cd ОченьДлинноеНазваниеКаталога
	:edit file1.txt
	:edit file2.txt
	:edit file3.txt
<
По команде ":cd" (change directory, сменить каталог) изменяется текущий
каталог. Для того чтобы выяснить, какой каталог является текущим, используйте
команду ":pwd" (print working directory, напечатать рабочий каталог)
>
	:pwd
	/home/Bram/ОченьДлинноеНазваниеКаталога
<
В редакторе Vim запоминается последний используемый каталог и для возврата
в него наберите `cd -`. Пример. >

	:pwd
	/home/Bram/ОченьДлинноеНазваниеКаталога
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/ОченьДлинноеНазваниеКаталога
	:cd -
	:pwd
	/etc


ЛОКАЛЬНЫЙ КАТАЛОГ ОКНА

При создании нового окна относительно существующего, оба окна будут
использовать один и тот же текущий каталог. Если необходимо в новом окне
редактировать файлы расположенные в другом каталоге, то можно задать текущий
каталог только для данного окна, не меняя значения текущего каталога для
других окон. Это называется локальным каталогом. Пример.
>
	:pwd
	/home/Bram/ОченьДлинноеНазваниеКаталога
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/ОченьДлинноеНазваниеКаталога
<
До того момента, как будет использована команда ":lcd" (local change
directory, изменить локальный каталог), все окна используют один и тот же
текущий каталог. Выполнение команды ":cd" в одном из окон также изменяет
текущий каталог всех остальных окон.
    Окно, в котором была выполнена команда ":lcd" использует собственный
текущий каталог, в этом окне не будут учитываться команды ":cd" и ":lcd",
отданные из других окон.
    По команде ":cd" в окне, в котором установлен свой собственный текущий
каталог, в нём вновь будет использоваться текущий каталог, общий для всех
остальных окон.


ЛОКАЛЬНЫЙ КАТАЛОГ ВКЛАДКИ

При создании новой вкладки в ней используется рабочий каталог того окна, из
которого она была открыта. Чтобы изменить рабочий каталог вкладки, используйте
команду ":tcd". Все окна в этой вкладке будут использовать этот каталог, за
исключением тех окно, для которых установлен локальный каталог по команде
":lcd". Любое новое окно, открываемое во вкладке для которой установлен
локальный рабочий каталог вкладки, использует этот каталог как рабочий каталог
окна. Использование команды ":cd" во вкладке не влияет на те вкладки, в
которых установлен локальный рабочий каталог для этих вкладок. Когда по
команде ":cd" изменяется общий рабочий каталог, то также будет изменён рабочий
каталог для текущей вкладке.


==============================================================================
*22.3*  Обнаружение файла

Предположим, имеется исходный текст программы на языке Си, который содержит
следующую строку

	#include "inits.h" ~

и необходимо посмотреть, что находится в этом файле «inits.h». Чтобы это
сделать, установите курсор на название файла и введите команду
>
	gf
<
и в редакторе Vim будут выполнены действия по поиску данного файла и открытие
его на редактирование.
    А что, если файл находится не в текущем каталоге? Тогда для определения
мест поиска в редакторе Vim будет использоваться значение параметра 'path'.
Значением этого параметра является перечень каталогов, в которых необходимо
производить поиск файлов.
    Предположим, что заголовочные файлы находятся в каталоге «c:/prog/include».
Следующая команда позволит добавить этот каталог к значению параметра 'path'
>
	:set path+=c:/prog/include
<
Маршрут к данному каталогу задан как абсолютный путь, а это означает, что не
зависимо от того, какой каталог в данный момент времени является текущим
(рабочим) он будет ссылаться на одно и то же место в файловой системе. А что,
если заголовочные файлы хранятся в подкаталоге каталога с файлами исходных
текстов программ? Тогда можно указать относительный путь. Он должен
начинаться с точки
>
	:set path+=./proto
<
При указании такого значения, поиск будет также осуществляется в каталоге
расположенном в каталоге содержащем файл в котором выполнена команда `gf`. В
указанном выше примере поиск файла «proto/inits.h» будет выполняться, начиная
от каталога, в котором находится редактируемый файл.
    Указание относительного маршрута без «./», т. е. просто «proto», означает,
что поиск должен вестись от текущего каталога, что не всегда может совпадать с
каталогом, в котором находится редактируемый файл.

В параметре 'path' также допускает ещё несколько способов указания маршрута
поиска файлов. Обратитесь к документации по параметру 'path'.
    Значение параметра 'isfname' используется для определения тех символов,
которые могут быть включены в название файла, и тех, которые не могут
(например, в предыдущем примере, символ ").

Если известно название файла, но оно не встречается в редактируемом файле, то
можно указать его в следующей команде
>
	:find inits.h
<
И в этом случае редактором Vim будет использоваться значение параметра 'path',
чтобы попытаться найти файл. Смысл этой команды такой же, как и у команды
":edit", но принимается во внимание значение параметра 'path'.

Чтобы открыть искомый файл в новом окне, используйте CTRL-W f вместо `gf`,
или команду ":sfind" вместо ":find".

Существует удобный способ запустить редактор Vim и сразу начать правку файла,
который находится в одном из каталогов, указанных в значении параметра 'path'
>
	vim "+find stdio.h"
<
Такая команда позволяет найти файл «stdio.h» и открыть его на редактирование.
Кавычки необходимы, чтобы определить один аргумент |-+c|.

==============================================================================
*22.4*  Список буферов

Термин "буфер" в программе Vim используется для описания редактируемого файла,
или, говоря точнее, копии файла, загруженной в редактор для правки. После
внесения в буфер требуемых изменений, содержимое буфера записывается в файл. В
буферах содержатся не только данные файла, но также закладки, установки
параметров и другие данные, связанные с редактированием файла.


СКРЫТЫЕ БУФЕРЫ

Предположим, что редактируется файл «one.txt» и необходимо переключиться на
редактирование файла «two.txt». Можно было бы воспользоваться командой ":edit
two.txt", но поскольку изменения, сделанные в буфере «one.txt», пока не
записаны в файл, то эта команда не сможет быть выполнена. К счастью, в
редакторе Vim есть решение и на этот случай
>
	:hide edit two.txt
<
Буфер «one.txt» будет скрыт, но в редакторе Vim устанавливается отметка, что
этот буфер по-прежнему редактируется, и внесённые изменения хранится в памяти.
Такой буфер называется скрытым буфером; иными словами буфер существует, но его
нельзя видеть.
    Аргументом команды ":hide" является другая команда. Команда ":hide"
передаёт в команду-аргумент признак того, что как будто установлен параметр
'hidden'. Параметр 'hidden' можно установить и вручную, его смысл в том, что
когда оставляется буфер для работы над другими файлами, то он не выгружается,
а становится скрытым.
    Внимание! Если имеются скрытые буферы, то перед выходом из редактора Vim,
убедитесь, что сохранены изменения во всех требуемых буферах.


НЕАКТИВНЫЕ БУФЕРЫ

    Как только буфер был использован хотя бы один раз, в редакторе Vim
запоминается о нём некоторая информация. Если буфер не является скрытым, но и
не отображается в окне, то он всё равно остаётся в списке буферов. Такой буфер
называется неактивным. В целом, буферы бывают следующих типов:

   активный             отображается в окне, текст загружен;
   скрытый              не отображается в окне, текст загружен;
   неактивный           не отображается в окне, текст не загружен.

В редакторе Vim сохранятся информация о неактивных буферах, и устанавливается
нечто вроде меток во внутренней памяти. Это бывает полезно, потому что имеется
возможность просмотреть, какие файлы редактировались и, возможно, вернуться к
работе над некоторыми из них.


ПЕРЕЧЕНЬ БУФЕРОВ

Посмотреть перечень буферов можно при помощи команды
>
	:buffers
<
То же самое можно сделать и с помощью другой команды, которую гораздо быстрее
набирать, но её наименование не так очевидно передаёт смысл
>
	:ls
<
Вывод команд может выглядеть примерно так:

  1 #h  "help.txt"                      курсор на строке 62 ~
  2 %a+ "usr_21.txt"                    курсор на строке 1 ~
  3     "usr_toc.txt"                   курсор на строке 1 ~

В первом столбце показывается номер буфера. Номер можно использовать для
перехода к редактированию буфера без необходимости вводить название файла, об
этом далее.
    После номера следует набор флагов, затем наименование файла, и номер
строки, на которой в последний раз находился курсор в этом буфере.
    Флаги буферов бывают следующие (слева направо):

	u       буфер не входит в перечень, |буфер_вне_списка|;
	 %      текущий буфер;
	 #      соседний буфер;
	  a     буфер загружен и отображается;
	  h     буфер загружен, но является скрытым;
	   =    буфер только для чтения;
	   -    буфер неизменяемый, параметр 'modifiable' выключен;
	    +   буфер был изменён.


РЕДАКТИРОВАНИЕ БУФЕРА

Перейти к редактированию буфера можно по номеру. Это помогает избежать набора
названия файла
>
	:buffer 2
<
Однако единственный способ узнать номер буфера — это просмотреть перечень
буферов. Вместо этого можно использовать часть наименования, например,
>
	:buffer help
<
В редакторе Vim будет выполнен поиск наибольшего соответствия для введённого
наименования. В том случае, если найдено только одно совпадение, например,
"help.txt", будет использоваться этот буфер.
    Для открытия буфера в новом окне, используйте команду
>
	:sbuffer 3
<
С этой командой также можно использовать наименование (или часть наименования)
буфера.


РАБОТА СО СПИСКОМ БУФЕРОВ

Перемещаться по списку буферов можно при помощи следующих команд:

	:bnext          переход к следующему буферу;
	:bprevious      переход к предыдущему буферу;
	:bfirst         переход к первому буферу;
	:blast          переход к последнему буферу.

Чтобы удалить буфер из списка, используйте команду
>
	:bdelete 3
<
Эта команда также работает и с названиями буферов.
    Если удаляется активный буфер, то окно, в котором он отображается, будет
закрыто. Если это было последнее окно, то редактором Vim будет найден другой
буфер для редактирования, потому что редактор устроен таким образом, что в нём
что-то должно редактироваться.

	Примечание.
	Даже после удаления буфера по команде ":bdelete", в редакторе Vim
	сохраняется о нём информация. Говоря точнее, при удалении буфер
	помещается "вне списка" и не показывается по команде ":buffers". Тем
	не менее, он будет показан по команде ":buffers!" (с соответствующим
	флагом). Чтобы полностью удалить всю информацию о буфере в редакторе
	Vim, используйте команду ":bwipe". Обратите также внимание на параметр
	'buflisted'.

==============================================================================

Следующая глава: |usr_23.txt|  Редактирование особых типов файлов
Авторские права: см. |авторские_права_на_документацию|  

vim:tw=78:ts=8:noet:ft=help:norl:
