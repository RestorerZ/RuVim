*usr_20.txt*	       для Vim version 8.2	      редакция от 24 апр 2006

                  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
                              автор Брам Муленар

                       Быстрый набор в командной строке


В редакторе Vim имеется ряд универсальных функциональных возможностей,
облегчающих ввод команд. Например, команды, начинающиеся с двоеточия, могут
быть сокращены, отредактированы и повторно вызваны для выполнения. А механизм
подстановки при наборе доступна практически для всех команд.

|20.1|  Редактирование в командной строке
|20.2|  Сокращения в командной строке
|20.3|  Подстановка в командной строке
|20.4|  Журнал команд из командной строки
|20.5|  Окно командной строки

 Следующая глава: |usr_21.txt|  Быстрое возобновление работы с редактором Vim
Предыдущая глава: |usr_12.txt|  Интересные приёмы работы     
      Содержание: |usr_toc.txt|

==============================================================================
*20.1*  Редактирование в командной строке

При наборе команд, начинающихся с двоеточия (:), а также команд поиска (/ или
?), курсор будет перемещён в самую нижнюю строку рабочей области редактора
Vim, где и вводится команда или поисковый запрос. Эта строка называется
командной строкой, в том числе и в тех случаях, когда она используется для
ввода команд поиска.

Наиболее очевидный и простой способ редактирования в командной строке —
использовать во время набора клавишу <BS>, при нажатии на которую удаляется
символ перед курсором. Для удаления других символов, набранных раннее,
требуется сначала переместить курсор в необходимую позицию.
    Например, представьте, что в командной строке была набрана следующая
команда
>
        :s/колка/мышка/
<
И в последний момент обнаруживается, что вместо "колка" должно было быть слово
"кошка". Чтобы исправить эту опечатку нажмите клавишу перемещения курсора
<LEFT> девять раз и курсор будет перемещён в позицию перед частью слова "кол".
Теперь нажмите клавишу <BS> и введите букву "ш". Как результат, будет
исправленная команда
>
        :s/кошка/мышка/
<
После внесения исправлений нажмите клавишу <ENTER>, при этом нет необходимости
перемещать курсор в конец строки — команда будет исполнена и так.

Для перемещения в командной строке чаще всего используются следующие клавиши:

        <LEFT>                          один символ влево;
        <RIGHT>                         один символ вправо;
        <SHIFT-LEFT> или <CTRL-LEFT>    одно слово влево;
        <SHIFT-Right> или <CTRL-RIGHT>  одно слово вправо;
        CTRL-B или <HOME>               в начало командной строки;
        CTRL-E или <END>                в конец командной строки.

        Примечание.
	Комбинация <SHIFT-LEFT> (клавиша перемещения курсора влево с
	одновременно нажатой клавишей <SHIFT>) и <CTRL-LEFT> (клавиша
	перемещения курсора влево с одновременно нажатой клавишей <CONTROL>)
	будут работать не на всех клавиатурах. Это же касается и остальных
	комбинаций с клавишами <SHIFT> и <CONTROL>.

Кроме того, для позиционирования курсора в командной строке, можно
использовать манипулятор типа "мышь".


УДАЛЕНИЕ

Как уже было сказано, при нажатии клавиши <BS> выполняется удаление символа
перед курсором. Чтобы удалить в командной строке всё слово целиком,
используйте комбинацию клавиш CTRL-W. Пример.

        /большая белая кошка ~

                            CTRL-W

        /большая белая ~

При нажатии комбинации клавиш CTRL-U будет удалён весь текст в строке,
позволяя начать ввод заново.


ЗАМЕНА

По нажатию клавиши <INSERT> выполняется переключение между режимом вставки
символов и режимом замены символов. После набора текста в командной строке

        /маленькая серая мышка ~

подведите курсор к началу слова "серая", дважды нажав <SHIFT-LEFT> (или 11 раз
клавишу <LEFT>, если <SHIFT-LEFT> не работает). Теперь нажмите клавишу
<INSERT> для переключения в режим замены и наберите "белая".

        /маленькая белая мышка ~


ОТКАЗ ОТ ВЫПОЛНЕНИЯ

Если после набора Ex-команды (:) или команды поиска (/), но до нажатия клавиши
<ENTER>, требуется отменить их выполнение, то нажмите клавишу <ESC> или
комбинацию клавиш CTRL-C.

        Примечание.
	Клавиша <ESC> универсальна и работает везде одинаково. Но, к
	сожалению, в старом добром редакторе Vi нажатие клавиши <ESC> в
	командной строке приводило к исполнению команды! В редакторе Vim
	клавиша <ESC> используется более привычным способом — прекращение
	выполнения команды. При желании можно вернуть редактору Vim поведение
	в стиле редактора Vi через значения параметра 'cpoptions'. Кроме того,
	при использовании клавиатурных составных команд (которые могли быть
	написаны для редактора Vi) клавиша <ESC> работает в стиле редактора
	Vi. Таким образом, CTRL-C будет работать всегда для отказа от
	выполнения команды.
        
Если курсор находится в начале командной строки, то нажатие клавиши <BS>
переключит редактор Vim из режима командой строки в режим команд. Это всё
равно, что удаление символа ":" или "/", с которого начинается строка.

==============================================================================
*20.2*  Сокращения в командной строке

Некоторые команды, начинающиеся с символа ":", слишком длинные для набора. Мы
уже отмечали, что ":substitute" можно сокращать до ":s". Вообще, сокращать
можно любую команду, начинающуюся с символа ":" или, другими словами,
Ex-команду.

Насколько короткой может быть команда? У нас 26 букв латинского алфавита, а
команд намного больше. Из этого получается, что, например, ":set" также
начинается с ":s", но ":s" у нас уже используется для команды ":substitute".
Поэтому, ":set" сокращается до ":se".
    Если для двух команд сокращение совпадает, то оно будет использоваться
только для одной из них. Для какой именно надо запомнить, особой логики в
выборе команды нет. В документации всегда указывается самая краткая форма из
возможных. Например,
>
        :s[ubstitute]
<
Это означает, что самая краткая форма ":substitute" это ":s". Последующие
символы не являются обязательными, так что будут также работать варианты ":su"
и ":sub".

В руководстве пользователя мы используем либо полную форму именования команды,
либо сокращённую форму, которая, тем не менее, понятна. Например, ":function"
можно сократить до ":fu", но поскольку многим людям не понятно, что это
значит, то мы будем использовать ":fun".

В сценариях для редактора Vim рекомендуется использовать полную форму
именования команд. Это позволяет облегчить внесение изменений в сценарий
позднее. Исключение составляют некоторые часто используемые команды, такие как
":w" (":write") и ":r" (":read").
   В частности, команда ":end" могла бы значить ":endif", ":endwhile" или
":endfunction". Так что лучше использовать в сценариях полное название.


КРАТКИЕ НАИМЕНОВАНИЯ ПАРАМЕТРОВ

В руководстве пользователя везде используются полные формы наименований
параметров, но у многих параметров также имеются сокращённые формы
наименований. В отличие от Ex-команд, для параметров всегда существует только
один акроним. Например, краткая форма параметра 'autoindent' — 'ai'. Таким
образом, следующие две команды делают одно и то же
>
        :set autoindent
        :set ai
<
Полный перечень полных и кратких форм наименований параметров можно посмотреть
здесь: |перечень_параметров|.

==============================================================================
*20.3*  Подстановка в командной строке

Данный функционал уже сам по себе является веской причиной для того, чтобы
перейти с использования редактора Vi на редактор Vim. Как только поймёте всю
мощь подстановок в командной строке, вы уже не сможете без них жить.

Предположим, имеется каталог, в котором находятся следующие файлы:

        info.txt
        intro.txt
        bodyofthepaper.txt

Для редактирования последнего файла нужно использовать команду
>
        :edit bodyofthepaper.txt
<
Поскольку название файла длинное, то легко допустить ошибку. Гораздо быстрее
набрать на клавиатуре
>
        :edit b<Tab>
<
В результате получится требуемая команда. Что произошло? При нажатии клавиши
<TAB> выполняется автоматическое дополнение слова, находящегося перед
курсором, в данном случае слова "b". В редакторе Vim реализован механизм
просмотра каталога и поиска файлов, которые начинаются с требуемых символов.
Поскольку такой файл один, то подставляется его название в командную строку
редактора Vim.

Теперь наберите
>
        :edit i<Tab>
<
Редактором Vim будет воспроизведён звуковой сигнал (или визуальная индикация),
а в командной строке подставлено следующее
>
        :edit info.txt
<
Звуковой сигнал означает, что было обнаружено несколько соответствий, и
подставляется первое по алфавиту из найденного. Если нажать клавишу <TAB> ещё
раз, то будет подставлено следующее соответствие из найденного
>
        :edit intro.txt
<
Таким образом, если в первый раз по нажатию клавиши <TAB> не показывается
нужное название файла, то нажмите эту клавишу ещё раз. Процесс можно повторять
пока не будут перебраны все соответствия.
    Если клавиша <TAB> будет нажать на последней записи из имеющихся
вариантов подстановки, то в командной строке редактора Vim будет отображён
первоначально набранный текст
>
        :edit i
<
После этого цикл подстановки снова будет повторён. Это означает, что в
редакторе Vim можно как бы по кругу перебирать все имеющиеся варианты
подстановки. Для того, чтобы просмотреть перечень в обратном порядке,
используйте комбинацию клавиш CTRL-P. Наглядно изобразить это можно так:

              <------------------- <Tab> -------------------------+
                                                                  |
                  <Tab> -->                    <Tab> -->
        :edit i               :edit info.txt               :edit intro.txt
                  <-- CTRL-P                   <-- CTRL-P
           |
           +---------------------- CTRL-P ------------------------>


КОНТЕКСТ

Если вместо ":edit i" набрать ":set i" и нажать клавишу <TAB>, то получится
>
        :set icon
<
Почему не ":set info.txt"? В редакторе Vim подстановка командной строки
является контекстно-зависимой. Это означает, что перечень слов для подстановки
зависит от команды, которая набрана перед этим словом. Сразу после команды
":set" название файла никогда не используется, но зато используется
наименование параметра.
    И вновь, при повторном нажатии клавиши <TAB>, редактором будет предложено
следующее слово из перечня для подстановки. Поскольку параметров, начинающихся
на одну букву, может быть довольно много, то лучше набрать несколько символов
>
        :set isk<Tab>
<
будет дополнено до >

        :set iskeyword

Теперь введите "=" и опять нажмите клавишу <TAB>
>
        :set iskeyword=@,48-57,_,192-255
<
В командной строке будет подставлено текущее значение параметра, которое теперь
можно редактировать.
    По клавише <Tab> выполняется подстановка командной строки с использованием
тех элементов, которые должны быть на месте подстановки. Поэкспериментируйте,
чтобы понять, как это работает. В некоторых ситуациях возможно, что
подстановка не будет выполнена. Такое происходит тогда, когда не удаётся
определить, что необходимо подставлять, или если дополнение в данном случае не
реализовано. При этом в строку будет вставлен буквальный символ <Tab>
(отображается как ^I).


ПЕРЕЧЕНЬ ВАРИАНТОВ ДЛЯ ПОДСТАНОВКИ

Если вариантов достаточно много, то более рационально просмотреть весь
имеющийся перечень подстановок, чтобы это сделать, используйте комбинацию
клавиш CTRL-D. Например, нажатие комбинации клавиш CTRL-D после ввода
>
        :set is
<
приведёт к отображению такого перечня
>
        :set is
        incsearch  isfname    isident    iskeyword  isprint
        :set is
<
Редактором Vim будет выведен перечень вариантов и продолжено ожидание ввода
команды. Если то, что необходимо было набрать, отсутствует в перечне, то для
корректировки слова можно использовать клавишу <BS>. Если вариантов слишком
много, то можно набрать ещё несколько символов перед нажатием <Tab>, чтобы
сразу попасть в точку.
    При внимательном взоре на приведённый выше пример можно заметить, что
предложенный вариант "incsearch" не начинается с символов "is". В данном
случае, "is" является сокращённой формой "incsearch" (многие параметры имеют
полную и краткую форму). В редакторе Vim реализован достаточно
интеллектуальный механизм подстановки, чтобы распознать, что возможно
подразумевалась подстановка вместо сокращённой формы наименования параметра
его полная форма.


ЭТО ЕЩЁ НЕ ВСЁ

По команде CTRL-L выполняется подстановка слова до наиболее длинного
однозначного соответствия. Если набрать ":edit i" и имеются файлы "info.txt" и
"info_backup.txt", то будет получено ":edit info".

Параметр 'wildmode' используется для тонкой настройки подстановок. 
Параметр 'wildmenu' используется для получения перечня подстановки в виде меню.
В параметре 'suffixes' перечисляются расширения файлов, которые менее значимы
и появляются в конце перечня файлов.
В параметре 'wildignore' задаётся шаблон наименований файлов, которые вообще
не появляются в перечне для подстановке.

Более подробно обо всём этом см. |дополнение_командной_строки|.

==============================================================================
*20.4*  Журнал команд из командной строки

В главе 3 уже вкратце рассказывалось о журнале команд из командной строки. Там
говорилось, что используя клавиши управления курсором <UP> и <DOWN> можно
подставлять в командную строку уже ранее выполнявшиеся команды.

На самом деле в редакторе Vim реализовано пять типов журнала. Здесь будет
рассказано о тех, которые предназначены для команд начинающихся с символа ":"
(Ex-команды) и команд поиска "/" и "?". Для команд поиска (/ и ?) ведётся один
журнал, поскольку обе используют одни и те же шаблоны для поиска. Три других
журнала ведутся для выражений, для строк ввода функции input() и для команд
отладочного режима. См. |журнал_командной_строки|.

Предположим, была отдана команда ":set", после этого набрано ещё десять
команд, начинающихся с двоеточия, и теперь необходимо повторить команду ":set"
ещё раз. Вместо того чтобы после набора символа ":", нажимать клавишу <UP>
десять раз подряд, есть более простой способ
>
        :se<Up> 
<
В редакторе Vim будет выполнен автоматический возврат к предыдущей команде,
которая начиналась с "se". Скорее всего, это будет именно та команда ":set",
которая необходима. По крайней мере, придётся нажимать клавишу <UP> гораздо
меньшее количество раз.

После нажатия клавиши <UP> производится сравнение уже набранного в командной
строке текста с хранящимся в журнале и подставляются только совпадающие
строки.
    Если не будет найдено то, что требуется, то воспользуйтесь клавишей
<DOWN>, чтобы вернуться к тому, с чего был начат поиск, и исправить текст
команды. Или нажмите комбинацию клавиш CTRL-U, чтобы очистить командную строку
и начать всё заново.

Для просмотра всех записей в журнале, введите следующую команду:
>
        :history
<
Будет показан перечень всех Ex-команд, хранящихся в журнале. Журнал поиска
может быть вызван следующей командой
>
        :history /
<
При нажатии комбинации клавиш CTRL-P (previous, предыдущий) будет выполнено то
же, что и при нажатии клавиши <UP>, но при этом не имеет значения, что уже
набрано к данному моменту. Аналогично, по CTRL-N (next, следующий) выполняется
то же, что и по клавише <DOWN>.

==============================================================================
*20.5*  Окно командной строки

При наборе в командной строке доступны достаточно ограниченные средства правки
текста по сравнению с теми, что имеются в режиме вставки. Для большинства
команд имеющихся средств редактирования вполне достаточно, но в тех случаях,
когда надо набрать действительно сложную команду, на помощь приходит окно
командной строки.

Окно командной строки открывается при помощи команды
>
        q:
<
Теперь в нижней части рабочей области редактора Vim появилось небольшое окно,
которое содержит журнал команд и пустую строку в самом низу:

        +-------------------------------------+
        |другое окно                          |
        |~                                    |
        |file.txt=============================|
        |:e c                                 |
        |:e config.h.in                       |
        |:set path=.,/usr/include,,           |
        |:set iskeyword=@,48-57,_,192-255     |
        |:set is                              |
        |:q                                   |
        |:                                    |
        |командная-строка=====================|
        |                                     |
        +-------------------------------------+

Редактор при этом переключается в командный режим. Для перемещения курсора
внутри окна командной строки можно использовать обычные команды `hjkl`.
Например, переместите курсор на пять строк вверх к строке ":e config.h.in".
Наберите `$h` для того, чтобы подвести курсор к "i" в "in" и введите `cwout`.
Строка в окне командной строки изменится на

        :e config.h.out ~

После этой правки нажмите клавишу <ENTER> для выполнения команды, а само окно
командной строки будет закрыто автоматически.
    При нажатии клавиши <ENTER> выполняется строка, которая находится под
курсором, независимо от того, в каком режиме находится редактор — в режиме
вставки или команд.
    Правки текста в окне командной строки не изменяют записи в журнале и будут
утрачены, но выполненная команда будет добавлена в конец журнала, как и любая
другая команда. 

Окно командной строки полезно в тех случаях, когда необходимо просмотреть
журнал команд, выбрать подходящую команду и внести в неё некоторые изменения
перед тем, как выполнять. В окне командной строки можно пользоваться командами
поиска.
   В приведённом выше примере для поиска предыдущей команды, содержащей слово
"config" можно было бы использовать команду "?config". При этом набор команды
поиска происходит в командной строке! При наборе команды поиска нельзя открыть
другое окно командной строки, может быть только одно окно командной строки.

[Прим. перевод. По команде q/ или q? будет открыто окно команд поиска]

==============================================================================

Следующая глава: |usr_21.txt|  Быстрое возобновление работы с редактором Vim
Авторские права: см. |авторские_права_на_документацию|  

vim:tw=78:ts=8:noet:ft=help:norl:
