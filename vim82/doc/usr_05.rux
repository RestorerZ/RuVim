*usr_05.txt*	       для Vim version 8.2	      редакция от 23 мая 2019

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРОМ VIM
			      автор Брам Моленар

			     Настройка программы 


Редактор Vim можно настроить в соответствии с требуемыми предпочтениями и
нуждами, начиная с внешнего вида и заканчивая позицией текста при его наборе.
В этой главе рассказывается как выполнять запуск Vim с требуемыми значениями
параметров, как добавлять модули, чтобы расширить возможности редактора Vim
или создавать собственные макрокоманды.

|05.1|  Файл vimrc
|05.2|  Пояснения к шаблонному файлу vimrc
|05.3|  Пояснения к файлу defaults.vim
|05.4|  Основы назначения клавиатурных команд
|05.5|  Добавление пакета файлов
|05.6|  Добавление внешнего модуля
|05.7|  Добавление файла справки
|05.8|  Окно установки параметров
|05.9|  Часто используемые параметры

 Следующая глава: |usr_06.txt|  Использование подсветки синтаксиса
Предыдущая глава: |usr_04.txt|  Основные приёмы правки текстов
      Содержание: |usr_toc.txt|

==============================================================================
*05.1*  Файл vimrc                              *vimrc-intro* *vimrc-введение*

Чтобы каждый раз не набирать одни и те же команды настройки редактора Vim, их
следует записать в так называемый файл инициализации — vimrc (VIM Runtime
Configuration file). Указанные в этом файле команды будут выполнятся при
каждом запуске программы.

Если файл уже существует (например, его создал системный администратор при
установке программы), то его можно открыть для редактирования, использовав
следующую команду
>
        :edit $MYVIMRC
<
Если данного файла ещё нет, то см. |vimrc|, чтобы выяснить, где он может быть
создан. Кроме того, в выводе команды ":version" также есть упоминание о
"файл vimrc пользователя", поиск которого выполняется программой Vim во время
запуска.

На UNIX‐подобных и MacOS системах рекомендуется всегда использовать файл

        ~/.vimrc ~

На системах MS Windows используется один из следующих файлов:

        $HOME\_vimrc ~
        $VIM\_vimrc ~

Если файл vimrc создаётся впервые, то рекомендуем в самом начале этого файла
указать следующую команду
>
        source $VIMRUNTIME/defaults.vim
<
По данной команде будет выполнена начальная инициализация редактора Vim для
новых пользователей (в отличии от пользователей традиционного редактора Vi).
Дополнительные сведения см. в параграфе |defaults.vim|.

Файл vimrc может содержать все команды, начинающиеся с двоеточия. Наиболее
простое их использование — это установка тех или иных параметров. Например,
если требуется, чтобы программа Vim всегда запускалась с установленным
параметром 'incsearch', то добавьте в файл vimrc следующую строку
>
        set incsearch
<
Для того чтобы команда в этой строке была выполнена, необходимо завершить
работу программы Vim и после этого заново запустить её. Далее будет показано,
как это делать без выхода из редактора Vim.

В этой главе объясняются только самые основные вещи. Более подробно о
написании командных файлов для редактора Vim читайте в |usr_41.txt|.

==============================================================================
*05.2*  Пояснения к шаблонному файлу vimrc                   *vimrc_example.vim*
                                                          *пример_файла_vimrc*

В первой главе было показано, как запускать редактор Vim в усовершенствованном
варианте (см. |несовместимость|). Для этого использовался шаблонный файл vimrc
включаемый в поставку программы Vim. Этот файл vimrc находится здесь:

        $VIMRUNTIME/vimrc_example.vim ~

В этом параграфе будут рассмотрены некоторые команды, находящиеся в указанном
файле. В итоге должно появиться представление о том, как создавать собственные
настройки. Однако мы не будем сейчас давать детальных разъяснений о каждой
команде, поэтому для более подробного описания воспользуйтесь командой
":help".
>
	" Выполнить командный файл с предустановленными настройками
	" подходящими для большинства пользователей
	source $VIMRUNTIME/defaults.vim
>
По этой команде будет запущен файл "defaults.vim" расположенный в каталоге
$VIMRUNTIME. В нём находятся команды для настройки параметров, которые
предпочитают большинство пользователей. Если это не требуется, то исключите
эту команду, например, установкой перед ней символа комментария. Команды этого
файла описаны далее в параграфе |defaults.vim-explained|.

>
        if has("vms")
          set nobackup
        else
          set backup
	  if has('persistent_undo')
	    set undofile
	  endif

        endif
<
Эти команды предписывают программе Vim создавать резервную копию файла при его
записи, за исключением системы VMS, которая всегда хранит старые версии
самостоятельно. Резервная копия файла имеет то же самое название, что и
оригинал, с добавлением символа "~". См. параграф |07.4|.

Здесь также задаётся параметр 'undofile', если он поддерживается в данной
версии программы Vim. При установке данного параметра будет сохраняться
полная информация о всех сделанных правках в файле. И теперь если изменить
файл, завершить работу с редактором Vim, а потом вновь начать редактировать
этот файл, то можно отменить ранее сделанные правки. Это очень мощная и
полезная возможность за счёт сохранения информации в файле. Чтоб получить
дополнительные сведения, ознакомьтесь с параграфом |undo-persistence|.

Также стоит упомянуть о весьма полезной команде `if`, которая позволяет
задавать параметры только при соблюдении определённых условий. Подробнее она
описана в главе |usr_41.txt|.

>
        if &t_Co > 2 || has("gui_running")
          set hlsearch
        endif
<
Через параметр 'hlsearch' активируется функционал редактора Vim по
подсветке совпадений с применяемым шаблоном поиска.

>
	augroup vimrcEx
	  au!
	  autocmd FileType text setlocal textwidth=78
	augroup END
<
Здесь даются указания по разбивке строк, длина которых превышает 78 символов,
но это будет применяться только для простых текстовых файлов. На самом
деле для этого использовано две отдельные команды. Первая — это автокоманда
"autocmd FileType text". Она задаёт, что если тип файл будет определён как
текстовый, то будет автоматически исполнена следующая команда. И в данном
случае такой командой является "setlocal textwidth=78". В ней устанавливается
параметр 'textwidth' в значение 78 и этот параметр применяется только к этому
одному файлу.

Начальная и конечная записи "augroup vimrcEx" и "augroup END" позволяют
выполнить удаление автокоманды посредством команды `au!`. См. описание команды
|:augroup|.

>
	if has('syntax') && has('eval)
	  packadd! matchit
	endif
<
При исполнении данных команд будет подключен внешний модуль "matchit" при
условии поддержки в программе требуемого функционала. Этот модуль добавляет
команде |%| дополнительные возможности. Описание этих возможностей можно найти
здесь |matchit-install|.


==============================================================================
*05.3*  Пояснения к файлу defaults.vim		    *defaults.vim-explained*
						    *пояснения_к-defaults.vim*

Если при запуске программы не будет найден пользовательский файл vimrc, то
тогда используется файл с предустановленными настройкам |defaults.vim|.
Чтобы при создании нового файле vimrc иметь уже готовые настройки, добавьте в
в самом начале этого файла следующую команду
>
	source $VIMRUNTIME/defaults.vim
<
Или воспользуйтесь для этого файлом vimrc_example.vim, как описывалось ранее.
Далее будет показано, какие настройки содержаться в файле defaults.vim.

>
	if exists('skip_defaults_vim')
	    finish
	endif
<
Загрузка файла defaults.vim может быть отключена следующей командой
>
	let skip_defaults_vim = 1
<
Эта команда должна быть добавлена в общесистемный файл vimrc (см.
|system-vimrc|). Если же имеется пользовательский файл vimrc, то эта команда не
требуется, т. к. в этом случае файл defaults.vim не будет загружаться
автоматически.

>
        set nocompatible
<
Как уже говорилось в первой главе, в документации подразумевается, что
редактор Vim работает в улучшенном варианте, который не всегда совместим с
редактором Vi. Для этого, прежде всего, необходимо сбросить параметр
'compatible' указанной выше командой.

>
        set backspace=indent,eol,start
<
Этой командой будет задано в какой позиции строки, в режиме вставки, клавишей
<BS> можно удалять символ перед курсором. Перечисленные через запятую значения
позволяют в редакторе Vim удалять пробельные символы в начале строки, символ
перевода строки и символ, перед которым находился курсор в момент переключения
в режим вставки. Подробнее см. 'backspace'.

>
        set history=200
<
Этой командой будет задано хранение в журнале до 200 команд и 200 поисковых
шаблонов. Если необходимо, чтобы в редакторе Vim сохранялось меньшее или
большее количество записей, то можно указать другое число. Подробнее см.
'history'.

>
        set ruler
<
Через эту команду будет активировано постоянное отображение текущего положения
курсора в нижнем правом углу окна редактора Vim. Подробнее см. 'ruler'.

>
        set showcmd
<
Показывать незавершённую команду в правом нижнем углу окна редактора Vim,
слева от информации о местоположении курсора. Например, при наборе "2f",
редактором Vim ожидается ввода символа, который требуется найти и как
подсказка отображается "2f". После нажатия, допустим, "w", выполняется
команда `2fw` и надпись "2f" исчезает с экрана.

        +-------------------------------------------------+
        |текст в окне Vim                                 |
        |~                                                |
        |~                                                |
        |-- РЕЖИМ ВИЗУАЛЬНЫЙ --         2f     43,8   17% |
        +-------------------------------------------------+
         ^^^^^^^^^^^                  ^^^^^^^^ ^^^^^^^^^^
          'showmode'                 'showcmd'  'ruler'

>
	set wildmenu
<
Показывать в строке состояния подходящие для подстановки слова. Если вариантов
для подстановки больше одного, то они отображаются после нажатия клавиши
<TAB>. Подробнее см. 'wildmenu'.

>
	set ttimeout
	set ttimeoutlen=100
<
Через данные команды задаётся время ожидания после нажатия клавиши <ESC>.
Обычно для редактора Vim установлена задержка в одну секунду перед
распознавание ввода <ESC>, как начало управляющей последовательности. В случае
если используется медленное удалённое подключение, то увеличьте это значение.
Подробнее см. 'ttimeout'.

>
	set display=truncate
<
Отображать символы @@@ в последней строке окна при усечении завершающей строки
файла, а не скрывать всю строку. Подробнее см. 'display'.

>
        set incsearch
<
Через данную команду будет включено подсвечивание совпадений с искомым текстом
по мере набора шаблона поиска. Подробнее см. 'incsearch'.

>
	set nrformats-=octal
<
Не интерпретировать числа, начинающиеся с нуля, как числа восьмеричной системы
счисления. Подробнее см. 'nrformats'.

>
        map Q gq
<
Этой командой назначается клавиатурная команда. Подробнее о клавиатурных
командах говорится в следующем параграфе. В данном случае определяется, что по
команде `Q` выполняется форматирование также, как если бы был набран оператора
`gq`. Именно так это работало в редакторе Vim до версии 5.0. Если такая
клавиатурная команда не назначена, то по команде `Q` выполняется переключение
редактор Vim в Ex-режим, но он сейчас вряд ли потребуется.

>
	inoremap <C-U> <C-G>u<C-U>
<
А по этой клавиатурной команде изменяется поведение команды CTRL-U.
При нажатии комбинации клавиш CTRL-U, если редактор находится в режиме
вставки, будет выполнено удаление всего набранного текста в текущей строке.
Здесь же вначале исполняется команда `CTRL-G u`, чтобы прервать отслеживание
изменений. Это используется для того, чтобы можно было отменить изменения
сделанные по команде CTRL-U уже после того, как будет вставлен символ новой
строки. Для возврат к стандартному поведению команды CTRL-U, используйте
команду ":iunmap <C-U>".

>
	if has('mouse')
	  set mouse=a
	endif
<
Будет активирована поддержка манипулятора «мышь», если этот функционал
доступен в программе. Подробнее см. 'mouse'.

>
        vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>
<
В данной клавиатурной команде реализовано следующее: в визуальном режиме по
команде `_g` копируется выделенный текст и выполняется его поиск в файлах
языка программирования Си. Как видите, клавиатурные команды могут делать
довольно сложные вещи, оставаясь при этом всего-навсего последовательностью
команд, исполняемых как если бы их набрали на клавиатуре.

>
        if &t_Co > 2 || has("gui_running")
          syntax on
        endif
<
При исполнении этих команд будет включаться подсветка синтаксиса на
терминалах, где есть поддержка цвета и при запуске редактора Vim с графическим
интерфейсом пользователя.

                                                             *vimrc-тип_файла*
                                                              *vimrc-filetype*
>
        filetype plugin indent on
<
Эта команда позволяет активировать три интеллектуальных механизма:

1. Определение типа файла
   При начале редактирования файла программой Vim будет предпринята попытка
   определения с каким типом файла идёт работа. Если редактируется "main.c",
   то по расширению ".c" определяется данный тип файла как относящийся к языку
   программирования Си. Если редактируется файл, начинающийся с "#!/bin/sh",
   то он распознаётся как командный файл оболочки "sh". Определение типа файла
   используется для подсветки синтаксиса и для двух других операций, которые
   рассматриваются ниже. См. |типы_файлов|.

2. Использование модулей для файлов определённого типа
   Файлы разных типов удобнее редактировать с наиболее подходящими для этого
   параметрами программы Vim. Например, при редактировании файлов относящихся
   к языку программирования Си (*.c), очень полезно включить параметр
   'cindent' для автоматического форматирования отступов строк. Такие часто
   употребляемые параметры описаны в файлах модулей для определённых типов
   файлов. Можно также написать свой собственный модуль для любого типа файла,
   см. |написание_модулей_типа_файла|.

3. Использование файлов форматирования отступов
   При редактировании исходных текстов программ отступ строки часто может быть
   вычислен автоматически. В редакторе Vim имеется набор правил расчёта
   отступов для некоторых типов файлов. См. |:filetype-indent-on| и 'indentexpr'.


				    *restore-cursor* *last-position-jump*
				    *восстановление-позиции‐курсора*
				    *переход-к-предыдущей‐позиции-курсора*
>
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif
<
Это автокоманда. В данном случае она выполняется после чтения файла и здесь
производится проверка наличия закладки '", и переход к этой закладке при её
обнаружении. Обратная косая черта в начале строки используется для продолжения
команды с предыдущей строки, чтобы строка не была слишком длинной. См.
|продолжение_строки|. Этот синтаксис поддерживается только в командных файлах
редактора Vim, но не в командной строке.

>
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | difthis
	\ | wincmd p | diffthis
<
В данном случае задаётся пользовательская команда, которая может быть вызвана
как `:DiffOrig`. Эта команда будет полезна в изменённом буфере, чтобы сравнить
его с файлом из которого он был загружен. Подробнее см. |diff| и |:DiffOrig|.

>
	set nolangremap
<
Данная настройка препятствует применению значений из параметра 'langmap' к
символам в клавиатурных командах. При отсутствии данной настройки (значение
по умолчанию применяемое для обратной совместимости) может быть нарушена
работа некоторых подключаемых модулей. Подробнее см. 'langremap'.

==============================================================================
*05.4*  Основы назначения клавиатурных команд

Составные команды позволяют назначить серию команд редактора Vim на отдельную
клавишу или комбинацию клавиш клавиатуры. Предположим, что требуется часто
выполнять операцию заключения отдельных слов в фигурные скобки, т. е. заменять
слово вроде "количество" на слово "{количество}". Воспользовавшись командой
":map" можно указать, что для этого будет использоваться клавиша F5.
Сама команда выглядит так
>
        :map <F5> i{<Esc>ea}<Esc>
<
        Примечание.
        При наборе этой команды, обозначение <F5> должно вводиться буквально,
        путём набора четырёх символов на клавиатуре. Обозначение <Esc> также
        вводится в пять символов, а не нажатием клавиши <ESC>. Помните об
        этом при чтении данного руководства!

Давайте по порядку разберёмся, что здесь происходит:
    <F5>        Использовать функциональную клавишу F5 для запуска
                последующей серии команд.
                
    i{<Esc>     Вставить символ {. <Esc> - завершить режим вставки.
    
    e           Переместиться к концу слова.
    
    a}<Esc>     Добавить } в конце слова. <Esc> - завершить режим вставки.

После того, как будет выполнена приведённая выше команда ":map", всё что
требуется сделать для того, чтобы заключить слово в фигурные скобки, это
подвести курсор к первому символу слова и нажать клавишу F5.

В этом примере в качестве назначения составной команды используется
единственная клавиша, но это может быть любая строка. Следует, однако, иметь
в виду, что при использовании уже существующей команды редактора Vim эта
команда больше не будет доступна, поэтому таких ситуаций лучше избегать.
    Одним из символов, которые полезно использовать с составными командами,
является обратная наклонная черта. Поскольку, скорее всего, потребуется
определить несколько составных команд, то используйте совместно с ней ещё
какой-нибудь символ. Например, можно назначить, что "\p" будет добавлять
круглые скобки вокруг слова, а "\c" будет добавлять фигурные скобки. Пример.
>
        :map \p i(<Esc>ea)<Esc>
        :map \c i{<Esc>ea}<Esc>
<
Требуется набирать \ и p достаточно быстро друг за другом, чтобы в редакторе
Vim распознавалось, что они связаны друг с другом.

По команде ":map", набранной без аргументов, отображается список текущих
составных команд, как минимум для режима команд. Подробнее о клавиатурных
командах читайте в параграфе |40.1|.

==============================================================================
*05.5* Добавление пакета файлов                  *add-package* *добавление_пакета*
                                           *matchit-install* *установка_matchit*

Пакеты являются набором файлов, которые можно подключать к редактору Vim.
Существует два вида пакетов: дополнения и автозагружаемые при запуске
редактора Vim.

Редактор Vim поставляется с несколькими пакетами, которые можно использовать
как дополнения. Например, модуль matchit. Этот модуль расширяет существующую
команду редактора Vim `%` за счёт поиска и перемещения курсора к
соответствующим парным тегам HTML, операторам if/else/endif в языке сценариев
редактора Vim и прочим парным элементам. Это весьма удобно, хотя и не
является совместимым с предыдущими версиями (это и является причиной, почему
он не подключен при установке).

Чтобы начать использовать модуль matchit, добавьте всего одну строку в
файл vimrc
>
        packadd! matchit
<
И это всё!  После перезапуска редактора Vim, всю информацию об этом модуле
можно прочитать в справочной документации
>
        :help matchit
<
И документация будет тут же отображена, потому что когда по команде ":packadd"
выполнялось подключение модуля был также добавлен и каталог этого модуля в
параметр 'runtimepath', чтобы можно было найти и его файл документации.

Всевозможные пакеты можно найти на просторах Интернет. Как правило они
представлены там или в виде архивов, или на различных файловых хранилищах. В
случае с архивами необходимы следующие действия:
        1. Создать каталог для требуемого пакета
>
            mkdir -p ~/.vim/pack/fancy
<
           вместо "fancy" может быть любое название которое нравится. Лучше
           использовать название соответствующее наименованию пакета.
        2. Распаковать архив в этот каталог. Предполагается, что корневым
           каталогом в архиве является каталог с названием "start"
>
            cd ~/.vim/pack/fancy
            unzip /tmp/fancy.zip
<
          Если внутреннее содержание архива отличается от предполагаемого,
          удостоверьтесь, что маршрут будет соответствовать примерно такому:
	    ~/.vim/pack/fancy/start/fancytext/plugin/fancy.vim ~
          Здесь "fancytext" является названием пакета, ну или это будет
          названием устанавливаемого пакета.

Дополнительную информацию о пакетах можно посмотреть здесь: |packages|.

==============================================================================
*05.6*  Добавление внешнего модуля		*add-plugin* *plugin* *модуль*
						*добавление_модуля*

Функциональность редактора Vim может быть расширена за счёт внешних модулей.
Модулем является файл содержащий команды на языке сценариев редактора Vim,
который подключается автоматически при запуске программы Vim. Подключение
модуля выполняется добавлением соответствующего командного файла в каталог
plugin программы Vim.
{Поддерживается только при компиляции редактора Vim со свойством |+eval|}

Существует два вида модулей:

    модули общего назначения --- используются для всех типов файлов;
    модули файлов --- используются только для определённых типов файлов.

Сначала обсудим общие модули, а затем рассмотрим модули типов файлов
|добавление_модуля_типа_файла|.

МОДУЛИ ОБЩЕГО НАЗНАЧЕНИЯ		 *стандартного_модуля* *standard-plugin*
							 *стандартные_модули*

При запуске редактора Vim будет выполнятся автоматическое подключение
нескольких общих модулей. Такие модули добавляют функциональные возможности,
которые хотелось бы использовать большинству пользователей, но они были
реализованы в виде подключаемых модулей, а не реализованы в коде программы.
Список стандартных модулей можно посмотреть здесь: |список_стандартных_модулей|.
Также смотрите |загрузка_модулей|.

				*add-global-plugin* *добавление_общего_модуля*
Можно добавить общий модуль для расширения функциональности и чтобы он всегда
подключался при запуске редактора Vim, необходимо выполнить всего две операции:
1. Найти требуемый модуль.
2. Поместить его в соответствующий каталог.


ГДЕ ВЗЯТЬ НУЖНЫЙ МОДУЛЬ ОБЩЕГО НАЗНАЧЕНИЯ

Где найти необходимые модули?
- Некоторые модули всегда подключаются при запуске редактора Vim, это модули в
  каталоге $VIMRUNTIME/plugin.
- Некоторые модули включены в поставку программы Vim. Посмотрите в каталоге
  $VIMRUNTIME/macros и его подкаталогах, и в каталогах
						$VIM/vimfiles/pack/dist/opt/.
- Загрузите требуемые модули из Интернет, полезный адрес: http://www.vim.org
- Иногда исходные тексты модулей публикуются в |рассылке| Vim.
- Модуль можно написать самостоятельно. См. |написать_свой_модуль|.

Некоторые модули доступны как vimball архивы, см. |vimball|. Ряд модулей имеют
возможность автоматического обновления, см. |getscript|.

ИСПОЛЬЗОВАНИЕ МОДУЛЯ ОБЩЕГО НАЗНАЧЕНИЯ            *общие_модули-использование*

Прочитайте внимательно поясняющий текст в файле модуля или прилагающийся к
нему файл с описанием, чтобы узнать о правилах использования модуля.
Скопируйте файл модуля в каталог модулей:

	Система         Каталог модулей  ~
	UNIX            ~/.vim/plugin/
	PC		$HOME/vimfiles/plugin или $VIM/vimfiles/plugin
	Amiga		s:vimfiles/plugin
	Macintosh       $VIM:vimfiles:plugin
	Mac OS X	~/.vim/plugin/

Пример для UNIX-подобных систем (предположим, что пока каталога для модулей
нет):
>
	mkdir ~/.vim
	mkdir ~/.vim/plugin
	cp /tmp/yourplugin.vim ~/.vim/plugin
<
Вот и всё! Теперь можно использовать команды, определённые в этом модуле.

Для лучшей организации и упорядочиванию модулей целесообразно помещать
добавляемые модули не в сам каталог plugin, а в подкаталоги этого каталога.
Например, все модули для языка программирования Perl могут быть организованы
таким образом "~/.vim/plugin/perl/".


МОДУЛИ ТИПОВ ФАЙЛОВ			    *add-filetype-plugin* *ftplugins*
			    *модули_типа_файла* *добавление_модуля_типа_файла*

Программа Vim распространяется с набором модулей для ряда типов файлов,
которые можно начать использовать при помощи команды
>
	filetype plugin on
<
Вот и всё, что для этого требуется. См. |vimrc-тип_файла|.

Если для какого-то определённого типа файла нет модуля, или имеется более
качественный модуль чем поставляемый с редактором, то можно его добавить в
свою систему. Для этого нужно:
1. Получить копию модуля.
2. Поместить её в соответствующий каталог.


ГДЕ ВЗЯТЬ МОДУЛЬ ФАЙЛА

Там же, где берутся модули общего назначения. Посмотрите, если есть указание
типа файла, то это модуль для этого типа файла. Модули в каталоге
$VIMRUNTIME/macros являются общими, а модули типов файла находятся в каталоге
$VIMRUNTIME/ftplugin.


ИСПОЛЬЗОВАНИЕ МОДУЛЯ ФАЙЛА                    *			ftplugin-name*
					    *модуль_типа_файла-использование*

Модули файла добавляются копированием в необходимый для этого каталог. Он
находится там же, где и каталог для модулей общего назначения, но называется
"ftplugin". Предположим, есть модуль для типа файла "stuff" и используется
UNIX-подобная система. Тогда требуется поместить файл модуля в каталог
ftplugin
>
	mv thefile ~/.vim/ftplugin/stuff.vim
<
Если такой файл уже существует, то значит, уже установлен модуль для типа
файла "stuff". Проверьте, не конфликтует ли существующий модуль с модулем,
который добавляется. Если всё в порядке, то можете присвоить новому модулю
другое наименование
>
	mv thefile ~/.vim/ftplugin/stuff_too.vim
<
Символ подчёркивания используется для отделения названия типа файла от
остальной части названия, которая может быть чем угодно. Наименование
"otherstuff.vim" не будет работать, поскольку такой модуль будет загружаться
для файла с типом "otherstuff".

В DOS‐подобных файловых системах нельзя использовать длинные наименования
файлов. Если тип файла содержит более шести символов, то при добавлении
дополнительного модуля возникнут осложнения. Для решения задач такого рода
можно использовать подкаталог
>
	mkdir $VIM\vimfiles\ftplugin\fortran
	copy thefile $VIM\vimfiles\ftplugin\fortran\too.vim
<
В общем случае могут использоваться следующие наименования для модулей типа
файла
>
	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim
<
В качестве "<name>" можно использовать любое название. Например, для типа
файла "stuff" в UNIX-подобной системе:
>
	~/.vim/ftplugin/stuff.vim
	~/.vim/ftplugin/stuff_def.vim
	~/.vim/ftplugin/stuff/header.vim
<
Часть наименования <filetype> это название типа файла, для которого будет
применяться данный модуль. Только файлы данного типа будут использовать
настройки, полученные из модуля. Часть <name> не имеет значения и может
использоваться для загрузки дополнительных модулей для данного типа файла.
Обратите внимание, что модуль должен иметь расширение ".vim".


ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

|модули_для_типа_файла|	Документация по модулям типов файлов и информация о
			том, как избежать составных команд, которые могут
			вызвать нежелательные последствия.

|загрузка_модулей|	Загрузка модулей общего назначения при запуске
			редактора Vim.

|переопределение_в_модулях_типов_файлов|    Переопределение установок,
					  заданных в модулях общего назначения.

|написать_свой_модуль|	Как самому написать модуль на языке сценариев
			редактора Vim.

|подробно_о_модулях|	Дополнительная информация об использовании модулей и
			советы о том, что делать, когда модуль не работает.

|новый_тип_файла|	Как настроить распознавание нового типа файлов.

==============================================================================
*05.7*  Добавление файла справки			    *add-local-help*
						    *добавление_файла_справки*


Если повезёт, то модули, которые устанавливаются, будут поставляться вместе с
файлом документации. Давайте посмотрим, как правильно установить файл
документации, чтобы он был доступен в справочной системе.
    Возьмём, например, модуль "doit.vim", у этого модуля есть файл документации
"doit.txt". Для начала скопируем модуль в необходимый каталог. На этот раз
сделаем это непосредственно из редактора Vim, используя переменную окружения
$VIMRUNTIME. (Если уже существуют необходимые каталоги, то можно пропустить
некоторые команды "mkdir").
>
	:!mkdir ~/.vim
	:!mkdir ~/.vim/plugin
	:!cp $VIMRUNTIME/macros/doit.vim
	~/.vim/plugin
<
Команда "cp" используется в UNIX-подобных системах, в системах MS Windows
необходимо использовать команду "copy".

Теперь создадим каталог "doc" в одном из каталогов, указанных в 'runtimepath'.
>
	:!mkdir ~/.vim/doc
<
Скопируем в него файл документации
>
	:!cp $VIMRUNTIME/macros/doit.txt ~/.vim/doc
<
А сейчас, самое интересное --- при помощи команды |:helptags| создадим
сторонний индексный файл, который позволит перемещаться к определённым главам
и параграфам в новом файле справки.
>
	:helptags ~/.vim/doc
<
Теперь можно пользоваться командой 
>
	:help doit
<
чтобы найти информацию о "doit" в файле документации, который мы только что
добавили. Если наберёте
>
	:help local-additions
<
то увидите соответствующую ссылку в файле справки. Заголовки дополнительных
файлов документации автоматически добавляются в этот раздел.

О написании собственного файла документации см. |создание_справки|.

==============================================================================
*05.8*  Окно установки параметров

Справочную информацию по параметрам редактора можно посмотреть здесь:
|параметры|. Альтернативным вариантом может служить использование команды
>
        :options
<
По этой команде будет открыто новое окно с перечнем параметров сгруппированных
по категориям и каждый параметр сопровождается кратким пояснением. Для
перехода к перечню параметров, включённых в необходимую категорию, подведите
курсор к требуемой категории и нажмите клавишу <ENTER>. При повторном нажатии
клавиши <ENTER> будет выполнен возврат к списку категорий. Для возврата к
списку категорий можно также использовать комбинацию клавиш CTRL-O.

Значения параметров можно изменять прямо в этом окне. Например, перейдите в
категорию "Отображение текста", как описано выше, затем переместите курсор к
строке

        set wrap        nowrap ~

После нажатия клавиши <ENTER>, строка изменится на

        set nowrap      wrap ~

Это означает, что теперь этот параметр сброшен.

Краткое описание параметра 'wrap' даётся выше строки со значениями установок.
Переместите курсор вверх к строке с описанием и нажмите клавишу <ENTER> для
перехода к полному тексту справки по параметру 'wrap'.

У тех параметров, которые принимают числовое или строковое значение, можно
редактировать эти значения прямо в окне установок параметров. Чтобы изменения
вступили в силу, нажмите клавишу <ENTER>. Например, переместите курсор
к строке

        set so=0 ~

Установите курсор на цифре, являющейся значением этого параметра, при помощи
команды `$`. Измените текущее значение на, допустим, цифру пять командой `r5`.
Теперь нажмите клавишу <ENTER>, чтобы новое значение параметра вступило в
силу. Заметьте, что теперь при перемещении курсора, прокрутка текста в окне
начинается до того момента, как курсор подходит к границе окна. Именно это и
задаётся в параметре 'scrolloff', он указывает на величину отступа от границы
окна, с которой начинается прокрутка текста.

==============================================================================
*05.9*  Часто используемые параметры

В программе Vim существует огромное количество параметров, но возможно, что
большинство из них не потребуется изменять, так как они имеют оптимальные
настройки для большинства задач. Однако о некоторых параметрах, которые
позволяют более точно настроить редактор под свои потребности, будет
рассказано далее. Не забудьте, что по каждому параметру можно получить
подробную справку при помощи команды ":help", название параметра при этом
следует заключать в одинарные кавычки. Например,
>
        :help 'wrap'
<
Если вдруг что-то напутали с установками параметра, то можно восстановить
значение по умолчанию при помощи символа амперсанда (&), указанного после
названия параметра. Например,
>
        :set iskeyword&
<
ОТКЛЮЧЕНИЕ РАЗБИВКИ СТРОК

В редакторе Vim обычно выполняется разбивка длинных строк, выходящие за
границу области редактирования, что позволяет видеть весь текст целиком. Но
иногда может потребоваться, чтобы строки не переносились, а продолжались далее
за границу области редактирования. Правда, в этом случае придётся
пользоваться горизонтальной прокруткой, чтобы просматривать фрагменты строк
скрытых за границей окна. Разбивка строк отключается командой
>
        :set nowrap
<
Если курсор перемещается к тексту, который скрыт за границей экрана, то в
редакторе Vim выполняется автоматическая прокрутка строк по горизонтали.
Чтобы при прокрутке строки после курсора отображалось, например, десять
символов, введите следующую команду
>
        :set sidescroll=10
<
Это не изменяет сам текст в файле, только способ его отображения, делая
горизонтальную прокрутку более плавной.


ПЕРЕХОД ПО СТРОКАМ КОМАНДАМИ ПЕРЕМЕЩЕНИЯ

При выполнении большинства команд перемещения, движение курсора
останавливается на границе строк. Тем не менее, такое поведение можно
изменить при помощи параметра 'whichwrap'. Следующей командой устанавливается
этот параметр в значение по умолчанию
>
        :set whichwrap=b,s
<
Данное значение параметра позволяет при нажатии клавиши <BACKSPACE>, когда
курсор находится в начальной позиции текущей строки, перемещать его в конечную
позицию предыдущей строки. А нажатием клавиши <SPACE> перемещать курсор с
конечной позиции текущей строки к начальной позиции следующей строки.

Для того чтобы можно было выполнять переход по строкам клавишами управления
курсором <LEFT> и <RIGHT>, используйте команду
>
        :set whichwrap=b,s,<,>
<
Однако это будет работать только в режиме команд. Чтобы поведение клавиш
<LEFT> и <RIGHT> было таким же и в режиме вставки, используйте команду
>
        :set whichwrap=b,s,<,>,[,]
<
Также можно добавить ещё несколько флагов, см. описание 'whichwrap'.


ОТОБРАЖЕНИЕ СИМВОЛОВ ТАБУЛЯЦИИ

Символы табуляции в файле, как правило, не видны, и чтобы сделать их видимыми
используйте команду
>
        :set list
<
Теперь каждый символ табуляции отображается в виде символов ^I. Кроме того, в
конечной позиции строки выводится символ $, так что можно сразу видеть лишние
пробелы в конце строк.
    К сожалению, когда в файле много символов табуляции, то текст при таких
настройках начинает напоминать кашу. На терминалах, поддерживающих цвет, а
также в графическом интерфейсе можно показывать пробелы и символы табуляции в
виде подсвеченных символов. Для этого воспользуйтесь параметром 'listchars'
>
        :set listchars=tab:>-,trail:-
<
Теперь каждый символ табуляции будет показан в виде ">---" (с разным
количеством символов "-"), а пробелы в конце строк в виде "-". Гораздо
приятнее, правда?


УПРАВЛЯЮЩИЕ СЛОВА

Через параметр 'iskeyword' указывается, какие символы могут образовывать
одинарное слово. Подробнее см. |слово|.
Пример.
>
        :set iskeyword
<
	    iskeyword=@,48-57,_,192-255 ~

Символ "@" соответствует всем буквам алфавита, "48-57" соответствует символам
ASCII от 48 до 57 (т. е. цифры от 0 до 9), "192-255" это расширенные латинские
символы  [Прим. перевод. Под «всеми буквами алфавита» подразумевается
латинский алфавит, т. е. a-z и A-Z. Для корректной работы с русским
алфавитом, необходимо добавить диапазон 128-157].
    Для того чтобы команды, подобные команде `w` считали такие слова, как
"что-то", одним словом, необходимо включить в перечень словарных символов
символ дефиса. Это можно сделать так
>
        :set iskeyword+=-
        :set iskeyword
<
            iskeyword=@,48-57,_,192-255,- ~

Как можно заметить, при добавлении нового флага была автоматически вставлена
запятая, разделяющая значения параметра.
    Чтобы удалить флаг параметра, используйте операцию "-=". Например, удалим
символ подчёркивания
>
        :set iskeyword-=_
        :set iskeyword
<
            iskeyword=@,48-57,192-255,- ~

При этом разделяющая запятая будет автоматически удалена.


ОБЛАСТЬ УВЕДОМЛЕНИЙ

Изначально в редакторе Vim под область уведомлений отводится лишь одна нижняя
строка. Однако, когда сообщение слишком длинное, то оно либо обрезается, и
будет видна только часть сообщения, либо текст прокручивается, так что для
продолжения работы требуется нажимать клавишу <ENTER>.
    Для изменения этой ситуации, можно задать параметр 'cmdheight',
посредством которого указывается количество строк, используемых для вывода
сообщений. Пример.
>
        :set cmdheight=3
<
В этом случае, конечно, на экране остаётся меньше места для редактирования
текста, так что приходится идти на компромисс.

==============================================================================

Следующая глава: |usr_06.txt|  Использование подсветки синтаксиса
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:ft=help:noet:norl:
