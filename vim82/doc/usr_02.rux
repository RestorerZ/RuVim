*usr_02.txt*	       для Vim version 8.2	      редакция от 21 ноя 2019

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар


			 Введение в редактор Vim

В этой главе даются начальные сведения, необходимые для правки текста в
редакторе Vim. Ознакомившись с ней, можно будет более или менее уверенно
пользоваться редактором, пусть даже и не используя всех его возможностей.
Уделите некоторое время изучению приведённых здесь команд — это послужит
основой для дальнейшей работы с программой.

|02.1|  Первый запуск редактора Vim
|02.2|  Ввод текста
|02.3|  Перемещение по тексту
|02.4|  Удаление символов
|02.5|  Отмена операции и возврат изменений
|02.6|  Другие команды редактирования
|02.7|  Завершение работы редактора
|02.8|  Доступ к справочной информации

 Следующая глава: |usr_03.txt|  Навигация по документу
Предыдущая глава: |usr_01.txt|  О документации
      Содержание: |usr_toc.txt|

==============================================================================
*02.1*  Первый запуск редактора Vim

Для запуска редактора Vim введите команду

>
	gvim file.txt
<

В UNIX-подобных системах команду можно набирать прямо в командной строке
оболочки. Если используется Microsoft Windows, то необходимо запустить окно
Командной строки и набрать эту команду в нём. Независимо от того, как это было
сделано, редактор Vim будет запущен для редактирования файла «file.txt».
Поскольку это новый файл, то будет отображаться пустое окно программы.
Примерно вот так это будет выглядеть на экране:

	+--------------------------------------------------------+
	|#                                                       |
	|~                                                       |
	|~                                                       |
	|~                                                       |
	|~                                                       |
	|"file.txt" [Новый]                                      |
	+--------------------------------------------------------+
	    (Здесь символом «#» показано положение каретки)

Тех строк, которые начинаются с символа тильды (~) на самом деле нет в файле.
То есть когда всё содержимое файла уже показано в окне редактора Vim, то
оставшееся пустое пространство окна заполняется строчками, начинающимися с
символа тильды. В нижней части окна программы отображается сообщение,
информирующее о том, что создан новый файл и называется он «file.txt». Данное
сообщение, и все последующие, будут замещаться другими служебными сообщениям
программы, возникающими в ходе работы редактора Vim.

КОМАНДА VIM

По команде gvim будет создано новое графическое окно программы для
редактирования файлов. Если для запуска используется команда

 >
	vim file.txt
<

, то работа с редактором Vim будет выполняться внутри существующего окна
командной оболочки. Другими словами, если запуск программы выполняется из
оболочки xterm, то редактором используется уже существующее окно xterm. Если
запуск выполняется из окна Командной строки в системе Microsoft Windows, то
редактирование будет выполняться внутри этого окна. Текст в этих окнах будет
выглядеть одинаково для обоих вариантов, но вариант gvim предоставляет ещё и
дополнительный функционал, например строка меню. Подробнее об этом далее.

==============================================================================
*02.2*  Ввод текста

Программа Vim является режимным или иными словами, модальным редактором. Это
означает, что функциональность программы зависит от того, в каком режиме она
работает в данный момент. Два основных режима работы программы называются
«режим команд» и «режим вставки». В режиме команд все символы, которые
вводятся с клавиатуры, интерпретируются в программе как команды. В режиме
вставки, набираемые на клавиатуре символы, являются для программы текстом,
который необходимо добавить в редактируемый файл.
    Поскольку редактор Vim только что был запущен, то он находится в режиме
команд. Для того чтобы переключить программу в режим вставки, наберите команду
`i` (где i от английского insert, вставка). После этого можно вводить текст,
который будет вставляться в файл. Не переживайте, если будете допускать
ошибки, их можно исправить позднее. Например, попробуйте ввести этот фрагмент
из романа «Понедельник начинается в субботу» братьев Стругацких:

>
	iСтранный это был отдел. Лозунг у них был такой:
	«Познание бесконечности требует бесконечного времени».
<

После набора слова «такой:» нажмите клавишу <ENTER> для перевода строки. По
окончанию набора нажмите клавишу <ESC> для завершения режима вставки и
возврата в режим команд. Теперь в окне редактора Vim есть две строки текста

	+--------------------------------------------------------+
	|Странныйэто был отдел. Лозунг у них был такой:          |
	|«Познаниебесконечности требует бесконечного времени».   |
	|~                                                       |
	|~                                                       |
	|                                                        |
        +--------------------------------------------------------+

КАКОЙ СЕЙЧАС РЕЖИМ

Чтобы видеть в каком режиме сейчас работает редактор, наберите команду

>
	:set showmode
<

Обратите внимание, что при наборе двоеточия, каретка перемещается в последнюю
строку окна редактора Vim. В этой строке осуществляется ввод команд,
начинающихся с двоеточия. Завершите ввод команды нажатием клавиши <ENTER> (все
команды, начинающиеся с двоеточия, завершатся нажатием на клавишу <ENTER>).
    Теперь, если набрать команду `i`, то в нижней части окна редактора Vim
будет отображаться текст -- РЕЖИМ ВСТАВКИ --. Это означает, что сейчас
программа находится в режиме вставки.

	+--------------------------------------------------------+
	|Странныйэто был отдел. Лозунг у них был такой:          |
	|«Познание бесконечности требует бесконечного времени».  |
	|~                                                       |
	|~                                                       |
	|-- РЕЖИМВ СТАВКИ --                                     |
	+--------------------------------------------------------+

Если нажать на клавишу <ESC> для возврата в режим команд, то последняя строка
окна очистится.

ЕСЛИ ВОЗНИКЛИ ТРУДНОСТИ

Одна из самых основных сложностей, с которой сталкиваются новички при работе с
редактором Vim, заключается в том, что они путают режимы, забывают, в каком
режиме сейчас находится программа или случайно вводят команду, которая
вызывает переключение редактора в другой режим. Чтобы вернуться в режим
команд, независимо от того, в каком режиме находится программа, нажмите на
клавишу <ESC>, иногда её придётся нажать дважды. Если редактором Vim подаётся
звуковой сигнал, то значит, что он уже переключён в режим команд.

==============================================================================
*02.3*  Перемещение по тексту

После переключения редактора в режим команд можно перемещать каретка по всему
документу и используются для этого следующие клавиши:
									*hjkl*
	h --- влево;
	j --- вниз;
	k --- вверх;
	l --- вправо;

Поначалу может показаться, что эти команды выбраны случайно. Разве l
используется где-нибудь для перемещения вправо? Однако для такого выбора есть
очень веская причина: перемещение каретки это одна из самых частых операций,
выполняемых в текстовых редакторах, а эти клавиши находятся под пальцами
правой руки. Другими словами, эти клавиши находятся там, где их можно нажать
быстрее всего (особенно если печатать «слепым десятипальцевым методом»).

    Примечание.
    Каретку можно также перемещать при помощи клавиш со стрелками. Однако в
    этом случае сильно замедляется редактирование, поскольку для нажатия
    клавиш со стрелками требуется перенести руку от клавиш с буквами к
    клавишам со стрелками. Поскольку эту операцию приходится проводить сотни
    раз в час, то, используя буквы, можно сэкономить значительное количество
    времени.
	Также имейте в виду, что на некоторых клавиатурах отсутствуют клавиши
    со стрелками, либо они размещены в необычных местах; поэтому, знание о том,
    как пользоваться клавишами hjkl может помочь в таких ситуациях.

Запомнить эти команды очень просто: h находится слева, l справа, j показывает
вниз. Представьте себе такую картинку:

>
				   k
				h     l
				   j
<

Самый простой способ приучить себя к этим командам — это начать их
использовать. Воспользуйтесь командой `i` для вставки дополнительного текста.
Затем используйте клавиши hjkl для перемещения и напечатайте где-нибудь в
тексте ещё одно слово. Не забывайте нажимать клавишу <ESC> для возврата в
режим команд. Поставляемый с программой |учебник| также помогает запомнить эти
команды на практике.

Например, Хироши Иватани (Hiroshi Iwatani) для запоминания японским
пользователям предлагает такую схему:

			Komsomolsk na Amure
			    ^
			    |
	   Huan Ho      <--- --->   Los Angeles
        (Yellow River)      |
			    v Java (остров, а не язык программирования)

==============================================================================
*02.4*  Удаление символов

Чтобы удалить символ, подведите к нему каретку и нажмите клавишу с обозначением
латинской буквы "x" (раньше, во времена пишущих машинок, текст удалялся путём
набивки xxxx над текстом). Например, переместите каретку к началу первой строки
и нажмите xxxxxxxxx (девять раз x), чтобы удалить слово «Странный ». Результат
должен выглядеть так:

	+--------------------------------------------------------+
	|это был отдел. Лозунг у них был такой:                  |
	|«Познание бесконечности требует бесконечного времени».  |
	|~                                                       |
	|~                                                       |
	|                                                        |
	+--------------------------------------------------------+

Теперь можно вставить новый текст, например, так:

>
	iНеобычный <ESC>
<

В результате этих действий происходит переключение редактора в режим вставки
(i), вставка слова «Необычный » и, затем, выполняется выход из режима вставки
(<ESC>). Итогом этого будет следующее:

	+--------------------------------------------------------+
	|Необычный это был отдел. Лозунг у них был такой:        |
	|«Познание бесконечности требует бесконечного времени».  |
	|~                                                       |
	|~                                                       |
	|                                                        |
	+--------------------------------------------------------+


УДАЛЕНИЕ СТРОКИ

Чтобы удалить целую строку, используйте команду "dd". Последующие строки
переместятся вверх, заполняя образовавшееся пространство.

	+--------------------------------------------------------+
	|«Познание бесконечности требует бесконечного времени».  |
	|~                                                       |
	|~                                                       |
	|~                                                       |
	|                                                        |
	+--------------------------------------------------------+

УДАЛЕНИЕ СИМВОЛА ПЕРЕВОДА СТРОКИ

В редакторе Vim возможно объединить две строки в одну, удалив символ перевода
строки между ними. Для этого применяется команда `J` (латинская прописная
буква J). Например, имеется две строки:

   Познание бесконечности ~
   требует ~

Подведите каретку к первой строке и нажмите "J":

   Познание бесконечности требует ~

==============================================================================
*02.5*  Отмена операции и возврат изменений

Предположим, что было удалено слишком много текста. Можно, конечно, набрать
его снова, но существует гораздо более простой способ. По команде `u` (undo,
отмена) происходит отмена последней операции редактирования. Рассмотрим такой
пример: после использования команды "dd" для удаления первой строки, по
команде `u` она будет восстановлена.
    Вот ещё один пример. Подведите каретку к букве «Н» в первой строке

    Необычный это был отдел. Лозунг у них был такой: ~

Теперь наберите xxxxxxxxx, чтобы удалить «Необычный». Результат выглядит так:

    это был отдел. Лозунг у них был такой: ~

Наберите `u` для отмены последнего удаления. Это было удаление буквы «й»,
которая теперь будет восстановлена.

    й это был отдел. Лозунг у них был такой: ~

Повторное применение команды `u` вызывает восстановление предыдущего
удалённого символа.

    ый это был отдел. Лозунг у них был такой: ~
    ный это был отдел. Лозунг у них был такой: ~
    чный это был отдел. Лозунг у них был такой: ~
    ычный это был отдел. Лозунг у них был такой: ~
    бычный это был отдел. Лозунг у них был такой: ~
    обычный это был отдел. Лозунг у них был такой: ~
    еобычный это был отдел. Лозунг у них был такой: ~
    Необычный это был отдел. Лозунг у них был такой: ~

    Примечание.
    Если нажатие клавиши "u" дважды, приводит к тому, что только что
    восстановленный текст будет вновь удалён, то это означает, что редактор
    Vim работает в режиме совместимости с редактором Vi. Для исправления этой
    неприятности, прочитайте раздел |несовместимость|.
	В тексте документации предполагается, что исполнение команд выполняется
    так, как это принято в редакторе Vim. Можно, конечно, предпочесть старый,
    проверенный редактор Vi, но тогда в действительности будут наблюдаться
    расхождения с текстом документации.

ВОЗВРАТ ИЗМЕНЕНИЙ (ОТМЕНА ОТМЕНЫ)

Если будет отменено слишком много команд, то можно нажать комбинацию клавиш
CTRL-R (redo, выполнить повторно) для возврата предыдущей команды. Другими
словами, это отменяет команду отмены. Для демонстрации, нажмите CTRL-R два
раза. Символы «Не» исчезают:

    обычный это был отдел. Лозунг у них был такой: ~

Также существует специальная разновидность команды отмены — `U` (прописная
латинская буква U) — отмена для всей строки. Эта команда отменяет все
изменения на последней строке, над которой выполнялось редактирование.
Повторное использование этой команды отменяет действие предшествующей команды
`U`.

    Необычный это был отдел. ~
	      xxxx                  Будет удалено «это»

    Необычный был отдел.~
	          xxxxxx            Будет удалено «отдел.»

    Необычный был ~
				Восстановление строки по команде `U`
    Необычный это был отдел. ~
				Отменяется действие `U` по команде `u`
    Необычный был ~

Команда `U` сама по себе является изменяющей, поэтому её действие может быть
отменено по команде `u` и восстановлено командой CTRL-R. Всё это может
показаться немного запутанным, но не стоит волноваться: команды `u` и CTRL-R
будут работать во всех ситуациях. Дополнительную информацию можно прочитать в
параграфе |32.2| руководства.

==============================================================================
*02.6*  Другие команды редактирования

В редакторе Vim имеется большое количество команд для изменения текста.
Краткое описание дано в справочнике начиная с |Q_in| и далее. Вот наиболее
часто используемые операции.

ДОПОЛНЕНИЕ

Как мы уже рассмотрели, по команде "i" выполняется вставка символа перед
символом под кареткой. А что если необходимо добавить текст в окончание
строки? Ведь для этого потребуется вставить текст после каретки. Это
выполняется по команде `a` (append, добавить). Например, для изменения строки

    «Познание бесконечности требует бесконечного времени». ~
на
    «Познание бесконечности требует бесконечного времени»!!! ~

подведите каретку к символу точки в конце строки. Затем нажмите "x", чтобы
стереть точку. Теперь каретка находится на символе » (кавычка).  Наберите

>
	a!!!<ESC>
<

для добавления трёх восклицательных знаков после кавычки:

    «Познание бесконечности требует бесконечного времени»!!! ~


ОТКРЫТИЕ НОВОЙ СТРОКИ

По команде `o` (open, открыть) создаётся новая пустая строка ниже текущей
строки с кареткой и выполняется переключение редактора Vim в режим вставки.
Теперь можно набирать текст в новой строке.
Предположим, каретка находится где-либо в первой строке.

    Необычный это был отдел. ~
    «Познание бесконечности требует бесконечного времени»!!! ~

Если воспользоваться командой `o` и набрать новый текст

>
	oЛозунг у них был такой:<ESC>
<

то результатом будет:

    Необычный это был отдел. ~
    Лозунг у них был такой: ~
    «Познание бесконечности требует бесконечного времени»!!! ~

По команде `O` (прописная латинская буква O) будет выполнено открытие новый
строки выше текущей строки с кареткой.


ПРИМЕНЕНИЕ СЧЁТЧИКОВ

Предположим, что необходимо переместить каретку на девять строк вверх. Можно
набрать для этого "kkkkkkkkk" или сделать проще — ввести команду "9k". Очень
многие команды можно предварять числом. Например, ранее, в этой главе, для
добавления трёх восклицательных знаков в конце строки использовалось
"a!!!<ESC>". Того же результата можно было бы достичь командой "3a!<ESC>".
Цифра 3 указывает последующей команде, что она должна быть выполнена трижды.
Аналогично, для удаления трёх символов можно ввести "3x". Число всегда
предшествует команде, к которой относится.

==============================================================================
*02.7*  Завершение работы редактора

Для выхода из редактора используется команда `ZZ`. По этой команде
записывается файл и выполняется завершение работы программы.

    Примечание.
    В отличие от многих других редакторов, редактор Vim автоматически не
    создаёт резервных копий файла. Если будет применена команда `ZZ`, то
    изменения сохраняются и отменить их уже нельзя. Но программу можно
    настроить так, чтобы она создавала резервные копии, см. параграф |07.4|.

ВЫХОД БЕЗ СОХРАНЕНИЯ ИЗМЕНЕНИЙ

Иногда бывает так, что лучше начать всё сначала и не сохранять внесённые
изменения. В редакторе Vim есть команда, по которой будет завершена работа
редактора без сохранения изменений. Это команда

>
	:q!
<

Не забудьте нажать клавишу <ENTER> для выполнения команды.

Для тех, кого интересуют подробности, поясним, что эта команда состоит из трёх
частей. По команде двоеточие (:) выполнятся переключение редактора в режим
командной строки; по команде `q` выполняется завершение работы программы, а
добавление модификатора ! (восклицательный знак), отменяет в редакторе
проверку наличия изменений в файле.
    Добавление модификатора команд «восклицательный знак» требуется, поскольку
в редактор Vim его разработчиками заложено, что негоже выбрасывать результаты
многочасовых трудов. Если просто набрать ":q", то будет выведено сообщение об
ошибке и завершение работы программы не произойдёт7

E37: Данные в буфере не сохранены (чтобы игнорировать, укажите модификатор !) ~

Фактически, используя модификатор !, мы как бы говорим Vim:
«Я знаю, что это может показаться глупым, но я действительно хочу это сделать».

Если требуется продолжить работу с редактором Vim, то по команде ":e!" будет
перезагружена оригинальная версия файла.

==============================================================================
*02.8*  Доступ к справочной информации

В справочных файлах редактора Vim можно найти всё, что требуется для работы с
программой. Не стесняйтесь спрашивать!

Если известно, что надо найти, то для этого лучше пользоваться справочной
системой, чем поисковыми службами типа Яндекс или Google. Во-первых, разделы
следуют в определённом порядке и представлены в едином стиле справочной
системы, и, во-вторых, информация в справочной системе, поставляемой с
программой, актуальна именно для используемой версии редактора Vim.

    Для получения общего описания используется команда

>
	:help
<

Чтобы просмотреть справочные материалы можно также воспользоваться
функциональной клавишей <F1>. Если на клавиатуре есть клавиша <HELP>, то она,
вероятно, тоже будет работать.
    Если не указано название раздела справки, то по команде ":help" будет
открыто окно с основной справочной информацией. Создатели редактора Vim
поступили довольно мудро (или просто поленились?) — окно со справочными
материалами выглядит как обычное окно внутри редактора. Для навигации по
справке можно использовать все стандартные команды редактора Vim. Например,
команды `h`, `j`, `k` и `l` позволяют перемещать каретку влево, вниз, вверх и
вправо.
    Чтобы закрыть окна со справочными материалам, используйте ту же команду,
по которой осуществляется выход из редактора: `ZZ`. В этом случае будет
закрыто только окно справки, без выхода из редактора.

Знакомясь с текстом справки, обратите внимание, что некоторые фрагменты текста
заключены в |вертикальных_линиях|. Это обозначение гиперссылки.  Если
поместить каретку где-либо между вертикальными линиями и нажать CTRL-] (команда
перехода по индексу), то будет открыта требуемая страница справочной системы.
(По причинам, которые сейчас не обсуждаются, термин, который используется в
редакторе Vim для гиперссылки — индекс (tag). Таким образом, по команде
CTRL-] осуществляется переход к индексу, обозначенному словом, находящимся под
кареткой).
    После нескольких переходов по индексам всегда можно вернуться назад. По
команде CTRL-T (предыдущий индекс) выполняется возврат к предыдущему индексу,
также можно использовать команду CTRL-O (переход к предшествующей позиции).
    В верхней части страницы со справочными материалами имеется надпись типа
*help.txt*. Слова, расположенные между символами «*» используются справочной
системой для определения индекса (пункта назначения гиперссылки).
Подробно об индексах рассказывается в параграфе |29.1|.

Для получения справки по конкретному запросу, используйте команду

>
	:help {запрос}
<

Например, для справки о команде `x`, введите

>
	:help x
<

Для того чтобы узнать об удалении текста, используйте команду

>
	:help deleting
<

или

>
	:help удаление
<

Для получения полного списка команд редактора Vim, используйте команду

>
	:help index
<

или

>
	:help список
<

Если требуется справка о команде с управляющим символом (например, CTRL-A), то
необходимо набрать её с приставкой «CTRL-».

>
	:help CTRL-A
<

Так как в редакторе Vim имеется несколько режимов работы, то по умолчанию
справочная система показывает статьи для режима команд. Например, приведённый
ниже пример покажет справку для команды CTRL-H режима команд

>
	:help CTRL-H
<

Но точно так же можно получить справку по командам других режимов, для этого
используется буквенное обозначение режима в качестве приставки к команде. Если
требуется справка для команды в режиме вставки, то используйте приставку «i_».
Например, справку для команды CTRL-H в режиме вставки можно получить по
команде

>
	:help i_CTRL-H
<

При запуске редактора Vim можно использовать несколько аргументов командной
строки. Все аргументы начинаются со знака дефиса (-).  Например, чтобы
получить справку о том, что делает аргумент -t, наберите

>
	:help -t
<

В редакторе Vim имеется множество параметров позволяющих настроить работу
программы под собственные нужды. Если требуется справка по какому-либо
параметру, то необходимо указывать этот параметр в одинарных кавычках.
Например, чтобы выяснить, на что влияет параметр 'number', используйте команду

>
	:help 'number'
<

Перечень всех доступных приставок, указывающих на режим работы редактора Vim,
находится в разделе |справка-сводная_информация|.

Специальные клавиши указываются в угловых скобках. Например, для получения
информации о клавише ВВЕРХ в режиме вставки, используйте команду

>
	:help i_<Up>
<

Если отображается сообщение об ошибке, смысл которого не понятен, например,

E37: Данные в буфере не сохранены (чтобы игнорировать, укажите модификатор !) ~

То для получения разъяснений можно использовать номер ошибки

>
	:help E37
<

				*help-summary*    *справка-сводная_информация*
СВОДНАЯ ИНФОРМАЦИЯ

1) После начала ввода названия темы используйте комбинацию клавиш Ctrl+D,
   чтобы отобразить в окне Vim перечень всех доступных тем с этим названием.
   Или нажмите клавишу <TAB>, чтобы была выполнена автоматическая подстановка
   завершение слова

>
	:help sampl<Tab>
<

   Дополнительная информация об использовании справочных материалов редактора
   Vim доступна по команде

>
	:help helphelp
<

2) Чтобы просматривать взаимосвязанные материалы в справочной системе,
   используйте ссылки, помеченные вертикальными линиями. Таким образом можно
   переходить, к примеру, из справочной документации содержащей подробные
   характеристики самих команд к непосредственному описанию их применения в
   руководстве пользователя. Например, после ввода

>
	:help pattern.txt
<

   в ведении открывшейся страницы справки будут соответствующие отсылки |03.9|
   и |usr_27.txt| к описаниям в руководстве пользователя.

3) В справочной документации наименования параметров заключаются в
   машинописный апостроф. Чтобы перейти к разделу справки с описанием
   параметра, например list, наберите следующее

>
	:help 'list'
<

   Если не известно точное название какого-то параметра, то можно сделать
   следующее

>
	:help optinos.txt
<

   чтобы открыть страницу справки с описанием всех параметров и затем в ней
   искать посредством регулярных выражений, например, ширина текста. У
   некоторых параметров есть своё пространство имён, например,

>
	:help cpo-<letter>
<

   Так для получения описания необходимого флага настройки параметра
   'cpoptions', замените <letter> из примера выше, на соответствующий флаг,
   например,

>
	:help cpo-:
<

   А для флагов параметра 'guioption' синтаксис будет следующим

>
	:help go-<letter>
<

4) При поиске информации о командах режима команд, эти команды указываются без
   каких-либо приставок. Например, показать справку по команде `gt`

>
	:help gt
<

5) При поиске информации о командах режима вставки, эти команды указываются с
   приставкой i_. Например, показать справку по команде удаления слова

>
	:help i_CTRL-W
<

6) При поиске информации о командах визуального режима, эти команды
   указываются с приставкой v_. Например, показать справку по команде перехода
   к противоположной стороне выделенной области

>
	:help v_o
<

7) При поиске информации о командах правки и специальным символам в режиме
   командной строки, эти команды указываются с приставкой c_. Например,
   показать справку по специальному символу режима командной строки

>
	:help c_%
<

8) При поиске информации о командах режима командной строки (Ex-команды или
   команды режима исполнения), эти команды всегда указываются с приставкой :
   (двоеточие). Например, показать справку по команде ":s"

>
	:help :s
<

9) При поиске информации о командах отладочного режима эти команды указываются
   с приставкой > (знак больше). Например, показать сведения по команде
   отладки cont

>
	:help >cont
<

10) При поиске информации по клавиатурным комбинациям они, как правило,
   набираются с приставкой, указывающей на режим, в котором эти клавиатурные
   команды будут использоваться. Например, по команде

>
	:help i_CTRL-X
<

    будет показана информация по семейству команд CTRL-X в режиме вставки
    используемых для подстановки. Обратите внимание на то, что определённые
    названия клавиш всегда записываются как в приведённом примере, например,
    управляющая клавиша Control, всегда пишется как CTRL. Для режима команд
    клавиатурные команды указываются без всяких приставок как :h CTRL-<буква>.
    Например,

>
	:help CTRL-W
<

    в отличие от запроса

>
	:help c_CTRL-R
<

    по которому будет показана информация о команде CTRL-R для вставки
    содержимого регистра в режиме командной строки или

>
	:hlep v_CTRL-A
<

    с информацией о приращении чисел в визуальном режиме, или

>
	:help g_CTRL-A
<

    показана информация о команде g<C-A> (такая запись означает, что
    необходимо набрать на клавиатуре "g" и затем нажать клавиши <CTRL+A>).
    Здесь «g» означает стандартную команду `g`, которая всегда ожидает в
    течение секунды нажатия последующей клавиши, прежде чем будет выполнено
    что-то подобное командам, начинающимся с «z».

11) При поиске информации об элементах регулярных выражений эти элементы
    всегда предваряются символом наклонной черты — /. Так для получения
    информации по квантификатору или, иными словами, повторителю \+ регулярных
    выражений в редакторе Vim

>
	:help /\+
<

    А чтобы знать всё о регулярных выражениях, используемых в редакторе Vim,
    начните с этого

>
	:help pattern.txt
<

12) При поиске информации о регистрах редактора Vim всегда используйте слово
    «quote» или «кавычка» перед указанием искомого регистра. Например, получить
    информацию о специальном регистре «:»

>
	:help quote:
<

13) Чтобы ознакомиться с описанием командного языка автоматизации редактора
    Vim, введите следующий запрос

>
	:help eval.txt
<

   Информацию по определённым составляющим этого языка можно найти по запросу
   вида :h expr-X, где «X» — предопределённый символ. Например,

>
	:help expr-!
<

   откроет описание по оператору "!" (логическое НЕ) в языке VimL. Также
   весьма полезным будет следующее обращение к справочной документации

>
	:help function-list
<

   которое предоставит краткое описание по всем доступным в языке функциям.
   При поиске информации по какой-то конкретной функции всегда завершайте её
   наименование символами открывающейся и закрывающейся круглой скобки «()»,
   так по запросу

>
	:help append()
<

   будет показана информации по функции append командного языка автоматизации
   редактора Vim, а не о том, как дописать текст к содержимому текущего
   буфера.

14) О назначении клавиатурных команд рассказывается в справочной документации
    |maps.txt|. Воспользуйтесь командой

>
	:help mapmode-i
<

   , чтобы получить сведения о команде |:imap|. Чтобы получить информацию из
   подразделов посвящённым отдельным вопросам клавиатурных команд, используйте
   запросы вида :map-topic. Например,

>
	:help :map-local
<

    по клавиатурным составным командам назначаемых только для текущего буфера,
    или

>
	:help map-bar
<

    по использованию символа «|» (вертикальная черта) в клавиатурных командах.

15) При поиске информации по созданию команд, используйте запросы вида
    :h command-topic, так, например, по запросу

>
	:help command-bar
<

    будут показаны сведения об аргументе '!' в командах созданных
    пользователем. 16) При поиске информации по командам для управления окнами
    всегда используйте приставку CTRL-W, соответственно запросы для требуемой
    команды будут иметь вид :h CTRL-W_символ. Например,

>
	:help CTRL-W_p
<

    будут показаны сведения по команде перемещения к предыдущему используемому
    окну. Чтобы ознакомиться со всеми командами для управления окнами, введите
    следующий запрос

>
	:help windows.txt
<

17) При поиске информации во всей документации (и документации любого
    установленного модуля) используйте команду |:helpgrep|. Подробности по
    использованию этой команды см. в разделе |:helpgrep|. Чтобы найти
    какой-нибудь раздел, укажите название этого раздела

>
	:helpgrep раздел
<

    и будет показано первое совпадение с искомым словом. Чтобы перейти к
    следующему совпадению из найденых, используйте команду

>
	:cnext
<

    Все найдены совпадения с искомым словом, можно просмотреть в окне
    результатов, для открытия которого используйте команду

>
	:copen
<

    Установите каретку на строку, соответствующую искомому из всех найденных
    совпадений и выполните переход в этот раздел, нажав клавишу <ENTER>.

18) В руководстве пользователя в достаточно простом и подробном виде
    представлены справочные материалы для осваивающих редактор Vim. Начните с
    |usr_toc.txt|, чтобы попасть в оглавление руководства пользователя.

>
	:help usr_toc.txt
<

    Просмотрите оглавление, чтобы выбрать требуемый раздел. Описание таких
    понятий как «Диграфы» и «Ввод специальных символов» находятся в главе 24
    руководства пользователя, чтобы сразу открыть определённую главу,
    используйте команду

>
	:help usr_24.txt
<

    А если требуется ознакомиться с каким-то конкретным параграфом главы, то
    для этого используйте его номер, например,

>
	:help 10.1
<

    откроет параграф 10.1 главы |usr_10.txt|, в котором рассказывается о
    записи макрокоманд.

19) При поиске информации о группах цветовой подсветки синтаксиса, используйте
    запросы вида hl-название_группы. Так, например, по запросу

>
	:help hl-WarningMsg
<

     будет выведена информация с описанием группы подсветки WarningMsg.

20) При поиске информации о синтаксической подсветке файлов, используйте
    пространство имён :syn-раздел. Так, например, по команде

>
	:help :syn-conceal
<

    будет выведена информация по аргументу conceal команды ":syn".

21) Команды, используемые в окне списка результатов, обычно начинаются с
    приставки «:c», а команды окна локального списка результатов с приставки
    «:l».

22) При поиске информации по событиям, активирующим автокоманды, используйте
    их наименования

>
	:help BufWinLeave
<

    Чтобы просмотреть все доступные в редакторе Vim события, используйте
    команду

>
	:help autocommand-events
<

23) Аргументы командной строки запуска редактора Vim всегда начинаются с
    символа «-» (дефис-минус). Так, чтобы получить информацию об аргументе -f
    запуска программы, используйте следующий запрос

>
	:help -f
<

24) При поиске информации о факультативном функционале редактора Vim, всегда
    предваряйте название искомого функционала символом «+» (плюс). Чтобы
    получить информации о дополнительном функционале conceal, введите запрос

>
	:help +conceal
<

25) При поиске информации по определённому функционалу модулей типов файлов,
    поставляемых вместе с редактором Vim, используйте запрос вида
    ft-<filetype>-<functionality>. Так по запросу

>
	:help ft-c-syntax
<

    будет выведена информация о файле синтаксиса языка программирования Си и
    поддерживаемые им параметры. В то же время для поиска разделов по
    контекстной подстановке, зависимой от типа файла, используйте запросы

>
	:help ft-php-omni
<

    , а модулям типов файлов, запросы вида

>
	:help ft-tex-plugin
<

25) Описание кодов ошибок и предупреждений могут быть просмотрены
    непосредственно в документации. Так, запрос

>
	:help E297
<

    выведет описание сообщения об ошибке файла подкачки, а

>
	:help W10
<

    описание предупреждения при изменении файла открытого только для чтения.
    Однако бывает, что некоторые коды не имеют подробных описаний, а
    перечислены при описании команд редактора Vim, способных вызвать эти
    предупреждения и ошибки. Так, например, запрос

>
	:htlp E128
<

   покажет описание команды |:function|, из которого можно понять причину
   возникновения этой ошибки.

==============================================================================

Следующая глава: |usr_03.txt|  Навигация по документу
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:ft=help:noet:norl:
