*usr_07.txt*	       для Vim version 8.2	      редакция от 23 мар 2020

		   РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		    Редактирование сразу нескольких файлов


Вне зависимости от того, сколько файлов требуется отредактировать их все можно
править, не покидая редактор Vim. Укажите перечень файлов, над которыми будете
работать, и переходите от одного файла к другому. При этом без труда копируя
текст из одного файла, и вставляя его в другой файл.

|07.1|  Редактирование ещё одного файла
|07.2|  Перечень файлов
|07.3|  Перемещение между файлами
|07.4|  Резервные копии файлов
|07.5|  Копирование текста между файлами
|07.6|  Просмотр файла
|07.7|  Переименование файла

 Следующая глава: |usr_08.txt|  Работа с окнами
Предыдущая глава: |usr_06.txt|  Цветная подсветка текста
      Содержание: |usr_toc.txt|

==============================================================================
*07.1*  Редактирование ещё одного файла

До сих пор для каждого файла, который требовалось отредактировать, мы заново
запускали программу Vim. Но есть более удобный способ! Чтобы начать
редактирование другого файла, воспользуйтесь командой

>
	:edit foo.txt
<

Вместо «foo.txt», естественно, набираем необходимое название файла. В
редакторе Vim будет закрыт текущий файл и открыт указанный файл. Если в
текущем файле есть несохранённые изменения, то в программе будет выдано
предупреждение и открытие нового файла будет приостановлено:

E37: Данные в буфере не сохранены (чтобы игнорировать, укажите модификатор !) ~

	Примечание.
	Вначале каждого сообщения об ошибке или предупреждения указывается его
	номер. Если не совсем понятен смысл сообщения или причины, которые
	привели к возникновению ошибки, то, указав этот номер, можно получить
	разъяснение в справочной системе. Например, в данном случае

>
	:help E37
<

В данном случае есть несколько возможных решений. Во-первых, можно сохранить
текущий файл при помощи команды

>
	:write
<

Во-вторых, можно указать редактору Vim, проигнорировать внесённые изменения,
используя модификатор принудительного выполнения (!)

>
	:edit! foo.txt
<

В-третьих, если требуется редактировать другой файл, но пока нет необходимости
сохранять изменения в текущем файле, то можно «спрятать» текущий файл командой

>
	:hide edit foo.txt
<

Текст с изменениями будет по-прежнему загружен в редактор, но не будет
отображаться на экране. Подробнее читайте в параграфе |22.4| «Список буферов».

==============================================================================
*07.2*  Перечень файлов

При запуске редактора Vim можно сразу указать перечень файлов, которые будут
редактироваться. Например,

>
	vim one.c two.c three.c
<

По этой команде происходит запуск программы с указанием, что будут
редактироваться перечисленные файлы. После того как редактор Vim будет
запущен, на экране отобразится первый файл из списка. По окончанию работы с
этим файлом, можно перейти к следующему файлу из перечня при помощи команды

>
	:next
<

Если в текущем файле есть несохранённые изменения, то редактором Vim будет
выдано предупреждение, а выполнение команды ":next" остановлено, аналогично
приведённому выше примеру с командой ":edit". Чтобы отменить внесённые
изменения и перейти к следующему файлу, используйте команду

>
	:next!
<

Чаще всего всё-таки требуется сохранить изменения и затем перейти к следующему
файлу. Для этого существует специальная команда

>
	:wnext
<

По этой команде делается то же самое, что и по набранным последовательно
командам

>
	:write
	:next
<


ОТСЛЕЖИВАНИЕ ТЕКУЩЕГО РЕДАКТИРУЕМОГО ФАЙЛА

Чтобы проверить какой файл из списка аргументов редактируется, взгляните на
заголовок окна. В нём должно быть показано что-то вроде «(2 из 3)». Это
означает, что редактируется второй файл из трёх. Чтобы посмотреть перечень
файлов указанных в списке аргументов, используйте команду

>
	:args
<

Данная команда, сокращение от английского слова «arguments» (аргументы). Вывод
команды может выглядеть, например, так:

	one.c [two.c] three.c ~

Это перечень файлов, с которыми был запущен редактор Vim. Файл, который
редактируется в данный момент, показывается в квадратных скобках.


ПЕРЕМЕЩЕНИЕ ПО СПИСКУ АРГУМЕНТОВ

Для возврата к предыдущему файлу, используйте команду

>
	:previous
<

Действие этой команды аналогично действию команды ":next", но в
противоположном направлении. Есть и краткая команда для записи изменений перед
тем, как перейти к предыдущему файлу

>
	:wprevious
<

Для перехода к последнему файлу из перечня, используйте команду

>
	:last
<

а для перехода к первому файлу — команду

>
	:first
<

Между тем, команды ":wlast" и ":wfirst" не предусмотрены.

С командами ":next" и ":previous" можно использовать числовую приставку.
Например, чтобы перейти на два файла вперёд, используйте

>
	:2next
<


АВТОМАТИЧЕСКАЯ ЗАПИСЬ ИЗМЕНЕНИЙ

Чтобы не получать предупреждения, при перемещении между файлами после
изменения одного из файла, нужно помнить о сохранении изменений командой
":write". Однако если требуется всегда сохранять сделанные изменения в файлах,
то можно установить параметр 'autowrite', который предписывает сохранять все
изменения автоматически

>
	:set autowrite
<

Если редактируется файл, изменения в котором не требуется сохранять
автоматически, то не забудьте сбросить этот параметр

>
	:set noautowrite
<


ИЗМЕНЕНИЕ ПЕРЕЧНЯ РЕДАКТИРУЕМЫХ ФАЙЛОВ

Перечень файлов можно переопределить без необходимости завершения работы и
повторного запуска редактора. Например, для редактирования других трёх файлов,
воспользуйтесь такой командой

>
	:args five.c six.c seven.h
<

Можно также использовать символы подстановки, как в командной оболочке.
Например,

>
	:args *.txt
<

Редактор Vim снова перейдёт к редактированию первого файла из списка. Если
текущий файл был изменён, то перед этим потребуется либо сохранить изменения в
файле, либо использовать команду ":args!" (команда `args` с модификатором !)
для принудительного выполнения.


ОСТАВШИЕСЯ НЕ ОТРЕДАКТИРОВАНЫ ФАЙЛЫ
				    *arglist-quit* *выход-список_аргументов*

Редактор Vim устроен таким образом, что при указании списка файлов в качестве
аргументов запуска, работа считается выполненной после редактирования каждого
файла из перечня. Если при завершении работы программы остались какие-то файлы
не отредактированными, то будет выдано следующее предупреждение:

    E173: Остались не отредактированными 46 файла ~

Это значит, что ещё 46 файлов в списке, которые так и не дождались своей
очереди. В такой ситуации просто отдайте команду выхода ещё раз, и она
отработает как обычно (при условии, что между двумя командами выхода не было
отдано других команд).

==============================================================================
*07.3*  Переключение между файлами

Для быстрого переключения между двумя файлами используйте в режиме команд
комбинацию клавиш CTRL-^ (на клавиатуре с американской раскладкой этот символ
расположен над цифрой 6). Например, выполним команду

>
	:args one.c two.c three.c
<

Предположим, что открыт для редактирования файл «one.c», введём команду

>
	:next
<

Теперь открыт для редактирования файл «two.c». При нажатии клавиш CTRL-^ на
экране опять отобразится файл «one.c». При повторном нажатие CTRL-^ вновь
отобразится файл «two.c». Последующее нажатие этих клавиш вернёт файл «one.c».
Если теперь ввести команду

>
	:next
<

то откроется для редактирования файл «three.c». Обратите внимание, что команда
CTRL-^ не изменяет положение активного файла в списке аргументов, это делается
только командами вроде ":next" или ":previous".

Файл, который был открыт на редактирование, перед выполнением команды
переключени, называется «соседний». Если редактор Vim был только что запущен,
то команда CTRL-^ не сработает, поскольку соседний файл не определён.


ПРЕДОПРЕДЕЛЁННЫЕ ЗАКЛАДКИ

После перехода к другому файлу из списка аргументов можно использовать две
предопределённые закладки, которые будут весьма полезны для быстрой навигации
по файлам. По команде

>
	`"
<

(символы обратной кавычки и прямой машинописной кавычки), каретка переместится
к той позиции в предыдущем файле, в которой она находилась перед переходом к
следующему файлу. Ещё одна закладка, которая также устанавливается
автоматически, отмечает позицию последнего внесённого изменения в файле
(символы обратной кавычки и точки)

>
	`.
<

Предположим, что редактируется файл «one.txt». Где-то в середине файла для
удаления символа была использована команда `x`, а затем по команде `G` переход
к концу файла и сохранение изменений командой ":w". После этого выполнялось
редактирование других файлов из перечня, и потом возврат к файлу «one.txt» по
команде ":edit one.txt". Если теперь воспользоваться командой ``"`, то каретка
переместится в конец файла, а по команде ``.`, каретка переместится к позиции,
где был удалён символ. Даже после нескольких перемещений по данному файлу,
команды ``"` и ``.` всегда будут возвращать каретку к этим помеченным
позициям, до тех пор, пока не будут внесены новые изменения или не закрыт
данный файл.


ГЛОБАЛЬНЫЕ ЗАКЛАДКИ

В параграфе |03.10| было показано, как можно установить в файле закладку «x»
при помощи команды `mx`, чтобы затем переместить каретку к этой закладке по
команде ``x`. Эти команды работают в пределах одного файла. Если будет
редактироваться другой файл, и в нём установлена закладка «x», то она будет
иметь значение только в пределах этого файла. Таким образом, каждый файл может
иметь свой набор закладок, имеющих локальный контекст. До сих пор мы
пользовались закладками, наименования которых начинаются со строчной буквы. Но
что если в качестве наименования использовать прописную букву? Такие закладки
так же существуют, но они имеют глобальный контекст, и перейти к такой
закладке можно из любого файла. Предположим, редактируется файл «foo.txt».
Перейдите к середине файла (`50%`) и установите там закладку «F»

>
	50%mF
<

А сейчас откройте на редактирование файл «bar.txt» и установите в нём закладку
«B» на последней строке

>
	GmB
<

Теперь можно пользоваться командой `'F` для быстрого перехода к середине файла
«foo.txt» и командой `'B` для быстрого перехода в конец файла «bar.txt» из
любого файла открытого на редактирование.

Глобальные закладки сохраняются до тех пор, пока они не будут переопределены в
каком-либо другом месте. Иными словами, если установить глобальную закладку в
файле, то даже по истечении какого-то времени будет возможность вернуться к
этой позиции в файле, где установлена эта закладка. Часто бывает полезно
придумать простое соответствие между буквой, выбранной для закладки и файлом,
в котором она используется. Например, установите закладку «H» в файле
заголовка (header), «M» в сборочном файле (Makefile) и «C» в файле с исходным
кодом на языке Си.

Чтобы посмотреть, где определена та или иная закладка, задайте её название в
качестве аргумента команды ":marks"

>
	:marks M
<

Для этой команды можно указывать несколько аргументов

>
	:marks MCP
<

Не забывайте, что можно использовать команды CTRL-O и CTRL-I, чтобы перейти к
следующей и предыдущей позиции каретки не устанавливая в них закладки.

==============================================================================
*07.4*  Резервные копии файлов

По умолчанию в редакторе Vim не активирована возможность сохранения резервных
копий редактируемых файлов, но если это необходимо, то достаточно ввести
команду

>
	:set backup
<

Наименование файла резервной копии представляет собой название оригинального
файла с добавлением к нему символа ~ (тильда). Например, если файл называется
«data.txt», то наименование резервной копии файла будет «data.txt~». Если не
устраивает, что наименования резервных копий заканчиваются символом ~, то
можно изменить используемое по умолчанию расширение при помощи параметра
'backupext'

>
	:set backupext=.bak
<

В данном случае вместо названия «data.txt~» для резервной копии файла будет
использоваться наименование «data.txt.bak». Другой важный параметр называется
'backupdir'. Он определяет каталог, в котором будет сохранена резервная копия.
Значение по умолчанию, — текущий каталог, — обычно является самым подходящим
решением.

	Примечание.
	Если параметр 'backup' выключен, но параметр 'writebackup' включён, то
	резервная копия будет всё равно сохраняться. Тем не менее, она будет
	удаляться, как только запись файла успешно завершится. Этот механизм
	используется в качестве меры предосторожности, чтобы не потерять
	оригинальный файл, если запись будет неудачной по той или иной причине
	(например, недостаток места на диске, удар молнии, или что угодно
	ещё). [Прим. перевод. Брам пишет, что недостаток места на диске может
	быть причиной, по которой запись файла может завершиться неудачей.
	Странно, в данном контексте, если учесть, что для записи резервной
	копии также требуется место на диске]


СОХРАНЕНИЕ ОРИГИНАЛА ФАЙЛА

Если редактируются исходные тексты программ, то, возможно, необходимо
сохранить первоначальный файл перед тем, как в него будут внесены какие-либо
изменения. Резервная же копия файла будет перезаписана всякий раз, когда
сохраняется файл и поэтому всегда содержит предыдущую версию, а не
первоначальную. Чтобы редактором Vim сохранялся оригинал файла, установите
параметр 'patchmode'. Для этого необходимо указать расширение, используемое
для первоначальной резервной копии оригинального файла. Например,

>
	:set patchmode=.orig
<

Теперь, когда начнёте редактировать файл «data.txt» и запишите первую порцию
изменений, редактором Vim будет сохранён первоначальный вариант с названием
«data.txt.orig». Если продолжить вносить изменения в файл, то программой будет
определено, что файл «data.txt.orig» уже существует, и он не будет
перезаписан. Дальнейшие резервные копии файла будут называться «data.txt~»
(или в соответствии с установками параметра 'backupext'). Если же оставить
значение параметра 'patchmode' пустым (по умолчанию), то первоначальный файл
не будет сохраняться.

==============================================================================
*07.5*  Копирование текста между файлами

Объясним теперь, как копировать текст из одного файла в другой. Для примера,
начните редактировать текст, содержащий фрагмент, который требуется
скопировать. Подведите каретку к началу текста и нажмите клавишу `v`. Теперь,
когда редактор переключён в визуальный режим, переместите каретку к концу
фрагмента и нажмите клавишу `y`. Эта операция копирует выделенный фрагмент
текста. Чтобы скопировать вышеприведённый абзац, введите команды:

>
	:edit usr_07.rux
	/Объясним
	vjjjjj$y
<

Теперь откройте файл, в который требуется вставить скопированный текст.
Подведите каретку к символу, после которого должен находиться это фрагмент
текста и воспользуйтесь командой `p` для вставки текста.

>
	:edit другой_файл
	/выставить здесь
	p
<

Конечно, для копирования текста можно использовать разные команды. Например,
для выделения целых строк текста переключите редактор в визуальный режим
командой `V`. Или используйте команду CTRL-V для выделения прямоугольного
блока. Команда `Y` позволяет скопировать текущую строку, по "yaw" копируется
слово под кареткой, и т. д. По команде `p` вставляется текст после позиции
каретки. Для вставки текста перед позицией каретки воспользуйтесь командой `P`
(прописная латинская буква P). Обратите внимание, что редактором Vim
запоминается, что именно копируется — строка целиком или блок — и текст будет
вставлен в том же виде, в котором он был при копировании.


ИСПОЛЬЗОВАНИЕ РЕГИСТРОВ

Если требуется скопировать несколько фрагментов текста из одного файла в
другой, то перемещение между файлами и запись изменений могут потребовать
много времени. Чтобы этого избежать, скопируйте каждый фрагмент текста в
отдельный регистр. Регистр — это то место, где хранится текст для оперативного
использования в редакторе Vim. Сейчас мы будем использовать именованные
регистры от a до z, а позднее расскажем и о других регистрах. Давайте
скопируем предложение в регистр «f»

>
	"fyas
<

По команде "yas", как и раннее, копируется целое предложение, а команда `"f`
предписывает редактору, что текст следует поместить в регистр «f». Указание на
регистр должно следовать непосредственно перед командой копирования. Теперь
скопируем три целых строки в регистр «l»

>
	"l3Y
<

Число 3 можно было бы так же указать и перед командой `"l`. Чтобы скопировать
блок текста в регистр «b», воспользуемся следующей командой

>
	CTRL-Vjjww"by
<

Обратите внимание, что указание на регистр «b» находится непосредственно перед
командой `y`. Это необходимое требование. Если поместить указание на регистр
перед командой `w`, то это бы не сработает. Теперь можно вставлять содержимое
регистров в текст в любом порядке. При этом содержимое регистра остаётся
неизменным до тех пор, пока в этот регистр не будет скопировано что-либо ещё.
Таким образом, операцию вставки текста можно повторять сколько угодно раз.

Можно также указать регистр и при удалении текста. Эту возможность можно
использовать при перемещении текста из одного места в другое. Например, для
удаления слова в регистр «w»

>
	"wdaw
<

Обратите ещё раз внимание, что указание на регистр идёт непосредственно перед
командой удаления `d`.


ДОБАВЛЕНИЕ В ФАЙЛ

Для добавления текста в файл можно использовать команду

>
	:write >> logfile
<

Это позволит дописать текст из текущего файла в конец файла «logfile» без
необходимости копирования текста, открытия файла «logfile» на редактирование и
вставки скопированного текст в этот файл. Но при этом дописывать можно только
в конец файла. Чтобы добавить только несколько строк, выберите их в визуальном
режиме перед тем, как отдавать команду ":write". В главе 10 будет рассказано о
других способах выборки определённого диапазона строк.

==============================================================================
*07.6*  Просмотр файла

Иногда требуется только взглянуть на содержимое файла, без необходимости
вносить в него изменения. Чтобы избежать случайной перезаписи файла при
ошибочном наборе команды ":w", можно открыть файл в режиме только для чтения.
Чтобы запустить редактор Vim в варианте работы только для чтения, используйте
команду

>
	vim -R файл
<

В UNIX-подобных системах того же самого можно добиться командой

>
	view файл
<

После исполнения одной из вышеуказанных команд файл будет открыт в режиме
только для чтения. Если отдать редактору команду ":w", то будет выдано
сообщение об ошибке и запись файла не будет выполнена. При попытке внесения
изменений в файл, открытый только для чтения, редактор Vim выведет
предупреждение:

    W10: Внимание! Обнаружена попытка правки файла открытого только для чтения ~

Тем не менее, внесение этих изменений не блокируется в редакторе Vim. Так,
например, можно переформатировать текст для более удобного чтения. Если
требуется сохранить изменения в файле, открытом только для чтения, то
необходимо добавить к команде записи модификатор !, чтобы принудительно записать
такой файл.

Если требуется полностью запретить внесение изменений в файл, то его открытие
выполняется командой

>
	vim -M файл
<

В этом случае все попытки изменить текст будут обречены на провал. Подобным
образом открываются, например, файлы встроенной документации. Если попытаться
внести изменения в такой файл, то будет выдано сообщение об ошибке

    E21: Буфер не может быть изменён. Не установлен параметр 'modifiable' ~

Аргумент командной строки -M можно использовать для запуска редактора Vim в
режиме просмотра файла. Имейте, однако, в виду, что такая защита легко
отключается при помощи двух команд:

>
	:set modifiable
	:set write
<

==============================================================================
*07.7*  Переименование файла

При создании нового файла порой проще отредактировать существующий файл,
который уже содержит большую часть того, что нужно. Например, при написании
программы, которая выполняет перемещение файлов и при наличии программы,
которая выполняет копирование, создание новой программы начнётся, скорее
всего, следующим образом

>
	:edit copy.c
<

Теперь, после внесения необходимых правок, требуется сохранить этот файл под
другим наименованием и для этого можно использовать команду ":saveas"

>
	:saveas move.c
<

Редактор Vim выполнит запись файла с указанным названием и после этого можно
продолжить редактирование данного файла. Для записи последующих изменений
используйте команду ":write", и они будут сохраняться в файле «move.c», а файл
«copy.c» останется неизменённым. Если требуется изменить название файла,
который редактируется, но при этом пока нет необходимости сохранять его на
диске, то используйте команду

>
	:file move.c
<

Редактором Vim будет выполнена пометка этого файл как «Не редактировался» и
это указывает, что это не тот файл, который редактировался изначально. При
попытке записи этого файла, возможно, что будет выдано предупреждение

    E13: Файл уже существует (чтобы заменить, укажите модификатор !) ~

Это защита от случайной перезаписи существующих файлов.

==============================================================================

Следующая глава: |usr_08.txt|  Работа с окнами
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:noet:ft=help:norl:

