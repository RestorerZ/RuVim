*usr_30.txt*	       для Vim version 8.2	     редакция от 10 ноя 2007

		  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
			      автор Брам Моленар

		       Редактирование текстов программ


В редакторе Vim имеется несколько встроенных команд, которые сильно облегчают
жизнь программиста. Можно компилировать программу, не покидая редактор, и
затем попасть сразу в то место исходного кода программы, которое указано как
ошибка в сообщении компилятора. Также можно настроить автоматическую
расстановку отступов и формат комментариев в тексте программ для многих языков
программирования.

|30.1|	Компилирование
|30.2|	Отступ строк в стиле языка Си
|30.3|	Активация расстановки отступов
|30.4|	Другие способы форматирования отступов
|30.5|	Пробелы и табуляция
|30.6|	Разметка комментариев

 Следующая глава: |usr_31.txt|	Работа с графическим интерфейсом
Предыдущая глава: |usr_29.txt|	Навигация по программному коду
      Содержание: |usr_toc.txt|

==============================================================================
*30.1*	Компилирование

В редакторе Vim есть целый набор команд позволяющих выполнять быстрое
исправление исходного кода программы. Посредством этих команд можно
компилировать исходный текст программы прямо из редактора Vim с последующим
исправлением ошибок, которые проявились в процессе компиляции. После
исправления ошибок можно попытаться снова скомпилировать программу и, если
потребуется, вновь исправить возникшие ошибки. Цикл повторяется до тех пор,
пока программа не будет компилироваться без ошибок. 

По следующей команде выполняется запуск программы «make» с указанными
аргументами и «перехват» возвращаемых ей сообщений

>
	:make {аргументы}
<

Если в процессе исполнения программы «make» были выявлены какие-либо ошибки в
исходном коде компилируемой программы, то встроенными в редакторе Vim
алгоритмами это будет распознано и выполнено перемещение каретки в то место
исходного кода, где была допущена первая ошибка.
    Посмотрите на пример сеанса работы с командой ":make" (обычно в сеансе
работы с командой выдаётся гораздо больше ошибок, и не таких дурацких, как в
этом примере). После исполнения команды ":make" на экран выводятся примерно
такие сообщения:

>
	:!make | &tee /tmp/vim215953.err
<    gcc -g -Wall -o prog main.c sub.c ~
    main.c: In function 'main': ~
    main.c:6: too many arguments to function 'do_sub' ~
    main.c: At top level: ~
    main.c:10: parse error before '}' ~
    make: *** [prog] Error 1 ~

    2 returned ~
    "main.c" 11L, 111C ~
    (3 из 6): too many arguments to function 'do_sub' ~
    Чтобы продолжить, нажмите клавишу <ENTER> или введите команду ~

Здесь видно, что есть ошибки в файле «main.c». После нажатия клавиши <ENTER>,
в редакторе Vim будет открыт файл «main.c» и каретка будет установлена на
шестую строку, где произошла первая ошибка. В редакторе Vim это всё будет
сделано без всякого участия пользователя, а используя для этого информацию,
полученную из вывода программы «make».

		+---------------------------------------------------+
		|int main()					    |
		|{						    |
		|	int i=3;				    |
    каретка ->  |	do_sub("foo");				    |
		|	++i;					    |
		|	return (0);				    |
		|}						    |
		|}						    |
		| ~						    |
		|(3 из 6): too many arguments to function 'do_sub'  |
		+---------------------------------------------------+

Чтобы перейти к строке, где возникла следующая ошибка, воспользуйтесь командой

>
	:cnext
<

и будет выполнен переход к десятой строке, последней в файле, где вставлена
лишняя скобка «}».
    В редакторе Vim сообщения об ошибках будут сокращаться, если на экране не
хватает места. Чтобы просмотреть сообщение целиком, используйте команду

>
	:cc
<

Просмотреть список результатов можно по команде ":clist". Вывод результата
исполнения этой команды выглядит примерно так:

>
	:clist
<    3 main.c: 6:too many arguments to function 'do_sub' ~
    5 main.c: 10:parse error before '}' ~

Будут показаны только те сообщения, для которых было распознано наименование
файла и номер строки с указанной ошибкой. Предполагается, что наибольший
интерес представляют именно эти сообщения. Но что если требуется просмотреть
все записи: на вывод сборщика относительно неопределённой функции, например?
Чтобы просмотреть все сообщения, укажите для команды ":clist" флаг "!":

>
	:clist!
<    1 gcc -g -Wall -o prog main.c sub.c ~
    2 main.c: In function 'main': ~
    3 main.c:6: too many arguments to function 'do_sub' ~
    4 main.c: At top level: ~
    5 main.c:10: parse error before '}' ~
    6 make: *** [prog] Error 1 ~

Текущая запись в списке будет выделена. Для перехода к предыдущей записи в
списке результатов, используйте команду

>
	:cprevious
<

Другие команды, которые предназначены для просмотра списка результатов:

	:cfirst		переход к первой записи из списка
	:clast		переход к последней записи из списка
	:cc 3		переход к записи номер 3 в списке


ИЗМЕНЕНИЕ ИСПОЛЬЗУЕМОЙ ПРОГРАММЫ КОМПИЛЯЦИИ

Наименование программы, которая запускается при исполнении команды ":make",
определяется в параметре 'makeprg'. Обычно это «make», но пользователи Visual
C++, возможно, захотят использовать «nmake». Это возможно сделать при помощи
команды

>
	:set makeprg=nmake
<

В этом же параметре можно указывать и аргументы, которые передаются внешней
программе. Спецсимволы в данном случае должны вводиться с обратной наклонной
чертой. Пример.

>
	:set makeprg=nmake\ -f\ project.mak
<

В команде также могут быть применены специальные определения, используемые в
программе Vim. Одно из таких спецопределений — символ «%», который при
исполнении команды будет заменён наименованием текущего файла. Так что, если
для установки параметра будет выполнена команда

>
	:set makeprg=make\ %:S
<

то при редактировании файла «main.c» исполнение команды ":make" будет
идентично такой команде:

>
	make main.c
<

Это не так полезно, поэтому мы немного изменим установки параметра 'makeprg',
указав модификатор :r (корневой элемент наименования, root)

>
	:set makeprg=make\ %:r:S.o
<

Теперь результатом выполнения команда ":make" будет

>
	make main.o
<

Подробнее о таких модификаторах можно прочитать здесь:
|имя_файла-модификаторы|.


РАНЕЕ СОЗДАННЫЕ СПИСКИ РЕЗУЛЬТАТОВ

Опишем некоторую ситуации и способ решения. Представьте, что после исполнения
команды ":make" в списке результатов показано, что для одного из компилируемых
файлов программа компилятор выдала предупреждение, а для другого — сообщение
об ошибке. Исправим указанную ошибку и вызовем команду ":make" повторно для
этого файла. Убедившись, что ошибка исправлена, требуется проверить, с чем
было связано ранее выданное предупреждающее сообщение. Но так как
компилировался только файл, в котором ранее была обнаружена ошибка, а не файл
для которого выдано предупреждение, то в текущем списке результатов этого
предупреждения нет. Как же проверить это предупреждение, не выполняя повторную
компиляцию? Для этой и подобных ситуаций существует команда, при исполнении
которой будет возврат к ранее созданному списку результатов. Это команда

>
	:colder
<

Теперь воспользуемся командами ":clist" и ":cc {номер}" для перехода в то
место в файле, из‐за которого было выдано предупреждение.
    Чтобы перейти к более свежему списку результатов, используйте команду

>
	:cnewer
<

В редакторе Vim реализована возможность работы с десятью списками результатов.


ПЕРЕКЛЮЧЕНИЕ МЕЖДУ ПРОГРАММАМИ КОМПИЛЯЦИИ

Чтобы в редакторе Vim корректно обрабатывался вывод программы компиляции,
необходимо указать, в каком формате представлены сообщения того или иного
компилятора и это делается через установки параметра 'errorformat'. Синтаксис,
используемый при задании значений этого параметра, довольно сложный, но с его
помощью можно описать формат сообщений, выдаваемый практически любой
программой компиляции. Подробное описание настроек дано в параграфе
|формат_ошибок|.

В случае если в ходе роботы используются различные программы компиляции, то
перенастройка параметров 'makeprg' и, особенно, 'errorformat' при каждом
переключении на другой компилятор дело хлопотное. В редакторе Vim реализована
возможность облегчить этот процесс. Например, чтобы выполнить переключение на
использование программы компиляции «Microsoft Visual C++», введите команду

>
	:compiler msvc
<

По этой команде будет выполнен поиск командного файла редактора Vim для
компилятора «msvc» и установка необходимых параметров в соответствии с
заданными условиями.
    Также возможно создание собственных определений для различных
компиляторов. См. |создание_модулей_для_компиляторов|.


ПЕРЕНАПРАВЛЕНИЕ ВЫВОДА

По команде ":make" выполняется перенаправление вывода выполняемой программы
компиляции в файл списка результатов. Работа этого механизма перенаправления
зависит от нескольких факторов, например, от значения параметра 'shell'. Если
при исполнении команды ":make" не происходит перенаправление вывода в файл, то
проверьте значения параметров 'makeef' и 'shellpipe'. Кроме того, своё влияние
могут оказывать и параметры 'shellquote' и 'shellxquote'.

В случае если перенаправление вывода программы компиляции по команде ":make"
так и не удалось достичь, то можно выполнить компиляцию в другом окне консоли
с перенаправлением вывода в файл. Чтобы редактором Vim было выполнено
считывание этого файла, введите в окне редактора команду

>
	:cfile {наименование_файла}
<

В этом случае команды переходов по сообщениям файла результатов будут работать
точно так же, как если бы была исполнена команда ":make".

==============================================================================
*30.2*	Отступ строк в стиле языка Си

Просматривать и анализировать исходный текст программы намного проще, если
строки имеют определённые отступы от левого края по всему тексту. И в
редакторе Vim реализовано несколько механизмов, позволяющих автоматизировать
процесс установки отступов для требуемых строк. Так, например, для программ на
языке Си или Java и Си++, использующих такой же стиль написания кода программ,
можно активировать параметр 'cindent'. Алгоритмы, реализованные в программе
Vim, достаточно хорошо проработаны, чтобы наиболее корректно выполнялась
автоматическая установка отступов для строк в таких исходных текстах. Саму же
ширину отступа можно регулировать через значение параметра 'shiftwidth', и для
исходных текстов программ в стиле языка Си чаще всего задаётся значение,
равное четырём пробелам. Все эти установки можно выполнить, набрав
единственную команду ":set" вот так:

>
	:set cindent shiftwidth=4
<

После активации этих параметров и после набора, например, строки кода вроде
этой «if (x)», при наборе следующих строк, будет автоматически изменена ширина
отступа.

						    if (flag)
	Отступ автоматически увеличивается  --->	do_the_work();
	Отступ автоматически уменьшается    <--	    if (other_flag) {
	Отступ автоматически увеличивается  --->	do_file();
	Отступ с сохранением прежней ширины		do_some_more();
	Отступ автоматически уменьшается    <--	    }
 
При наборе текста в фигурных скобках, отступы будут увеличены в начале блока,
и уменьшены в конце. Уменьшение отступов произойдёт и после набора символа
«}», поскольку существующие алгоритмы не могут предсказать, что будет
напечатано далее.

«Побочный эффект» от автоматического способа расстановки отступов состоит в
более раннем обнаружении ошибок в коде. Если при наборе символа «}»
обнаружится, что автоматически установленный отступ для этой строки больше,
чем ожидалось, то, скорее всего где-то ранее пропущен символ «}». Используйте
команду "%" для поиска парной «{» для набранной скобки «}».
    Причиной увеличенного отступа также может быть пропущенные символы «)» и
«;». Так что если у строки больший отступ, чем ожидалось, проверьте предыдущие
строки кода.

Если имеется код, который неправильно отформатирован, либо выполнялась вставка
и удаление строк кода, то потребуется переформатировать отступы в строках. Для
этого используется оператор `=`. Самая простая форма этой команды, это

>
	==
<

В этом случае будет выполнено форматированию отступов в текущей строке. Как и
любой другой оператор, оператор `=` можно использовать тремя способами. В
визуальном режиме по команде `=` будут установлены отступы у выделенных строк.
Полезным для такого рода форматирования является текстовый объект "a{",
который выделяет текущий блок в фигурных скобках. Таким образом, для
оформления отступов в блоке, в котором размещена каретка, используйте команду

>
	=a{
<

Если код совсем никак не отформатирован, то можно воспользоваться командой

>
	gg=G
<

Тем не менее, не стоит применять эту команду в файлах, в которых строки были
тщательно отформатированы вручную. Автоматическое форматирование отступов
работает «на ура», но в некоторых ситуациях может потребоваться поправить
отступы вручную.


НАСТРОЙКА СТИЛЯ ОТСТУПОВ

Расстановка отступов в редакторе Vim работает весьма хорошо, и с настройками
по умолчанию используется такой стиль, к которому привыкло где‐то девяносто
процентов программистов. Но некоторые люди предпочитают иные стили расстановки
отступов, которых существует несколько видов. При желании можно настроить
стиль по своему вкусу, задавая для этого определённые значения параметра
'cinoptions'.
    Изначально значение параметра 'cinoptions' не установлено и в редакторе
Vim использует стиль по умолчанию. Если необходимо как‐то переопределить
стиль, используемый по умолчанию, то требуется назначить те элементы текста,
для которых стиль будет изменён, указав их в значении этого параметра.
Например, чтобы размещать фигурные скобки таким образом

	if (flag) ~
	  { ~
	    i = 8; ~
	    j = 0; ~
	  } ~

используйте нижеприведённую команду для установки значений параметра

>
	:set cinoptions+={2
<

Элементов текста, для которых можно настроить отступы, довольно много.
Подробнее смотрите в главе |cinoptions-значения|.

==============================================================================
*30.3*	Активация расстановки отступов

Чтобы при редактировании файлов с исходными текстами программы на языке Си не
приходилось для каждого из них вручную активировать параметр 'cindent',
существует способ автоматизировать это действие следующим образом

>
	:filetype indent on
<

На самом деле, по этой команде выполняется несколько больше, чем активация
параметра 'cindent' для файлов на языке программирования Си. Перед активацией
параметра выполняется определение типа файла, аналогично тому, как
определяется тип файла для подсветки синтаксиса.
    Когда тип файла распознан, то будет выполнен поиск командного файла с
правилами расстановки отступов для данного типа файлов. В поставку с
редактором Vim включён целый комплект таких командных файлов для различных
языков программирования. Эти командные файл предназначены для настройки
редактора на автоматическое форматирование отступов с использованием правил,
применимых к данному типу файлов.

Если не требуется использование автоматического форматирования отступов, то
можно выключить его при помощи команды

>
	:filetype indent off
<

Если же требуется отключить форматирование отступов только для одного типа
файлов, то это можно сделать так, как описано далее. Создайте файл и наберите
в нём следующую строку

>
	:let b:did_indent = 1
<

Теперь запишите этот файл под требуемым наименованием:

	{каталог}/indent/{тип-файла}.vim

Где {тип-файла} это наименование типа файла, например «cpp» или «java». Чтобы
посмотреть точное обозначение типа файла, под которым он определяется в
редакторе Vim, воспользуйтесь командой

>
	:set filetype
<

Например, для данного файла вывод должен быть

    filetype=help ~

Так что для этого файла {тип-файла} будет «help». В качестве {каталога}
необходимо указать рабочий каталог программы Vim. Посмотрите на вывод команды

>
	:set runtimepath
<

и используйте ту часть, которая указанна перед первой запятой. Если вывод
выглядит так:

    runtimepath=~/.vim,/usr/local/share/vim/vim82/runtime,~/.vim/after ~

то в качестве {каталога} надо использовать «~/.vim». Таким образом,
наименование файла и каталог для его сохранения в нашем случае должны быть 

	~/.vim/indent/help.vim ~

Вместо того чтобы выключать автоматическое форматирование отступов, можно
написать собственный командный файл с правилами расстановки отступов. Подробно
о том, как это сделать, рассказывается в параграфе |отступы-выражения|.

==============================================================================
*30.4*	Другие способы форматирования отступов

Самый простой способ автоматической расстановки отступов — это активация
параметра 'atoindent', и тогда для новой строки будет использован такой же
отступ, как и в предыдущей строке. Несколько более интеллектуальный механизм
применяется при активации параметра 'smartindent', что бывает полезно при
редактировании текстов на языках программирования, для которых отсутствуют
командные файлы с описанием правил расстановки отступов. И хотя алгоритмы,
применяемые при активации параметра 'smartindent' не такие точные, как при
активации параметра 'cindent', но более точные, чем применяемые при активации
параметра 'autoindent'.
    При активации параметра 'smartindent' будет увеличиваться величина
отступов с каждым набранным символа «{» (и уменьшаться отступ с каждым
набранным «}»). Дополнительный уровень отступа также задаётся для каждого
слова из перечисленных в значении параметра 'cinwords'. Строки, которые
начинаются с символа «#», обрабатываются особым образом — в них убираются
любые отступы. Это сделано для того, чтобы все директивы препроцессора
начинались в первой колонке. В последующих строках требуемый уровень отступов
восстанавливается. 


КОРРЕКТИРОВКА ОТСТУПОВ

В случае если активен параметр 'autoindent' или 'smartindent', часто возможны
ситуации, что для установки такого же или отличающегося от отступа в
предыдущей строке, требуется увеличить или уменьшить отступ, величина которого
равна значению, заданному в параметре 'shiftwidth'. И в режиме вставки это
быстрее всего можно сделать с помощью команд CTRL-D и CTRL-T.
    Например, представьте, что редактируется командный файл оболочки, который
должен выглядеть следующим образом

	if test -n a; then ~
	   echo a ~
	   echo "-------" ~
	fi ~

Прежде всего, выполним установку параметров

>
	:set autoindent shiftwidth=3
<

Теперь, после набора первой строки и нажатия клавиши <ENTER>, начните ввод
второй строки

    if test -n a; then ~
    echo ~

Поскольку здесь требуется добавить отступ, то нажмите комбинацию клавиш
CTRL-T. В результате получится следующее:

    if test -n a; then ~
	echo ~

По команде CTRL-T в режиме вставки всегда выполняется увеличение отступа на
величину, заданную в параметре 'shiftwidth', независимо от того, где в строке
находится каретка.
    Закончив набор второй строки, начните набор третьей строки после нажатия
клавиши <ENTER>. На этот раз отступ такой, как требуется. Нажмите клавишу
<ENTER> и начните набор последней строки. В этой строке есть лишний отступ:


    if test -n a; then ~
	echo a ~
	echo "-------" ~
	fi ~

Чтобы удалить отступ в последней строке, нажмите комбинацию клавиш CTRL-D. По
этой команде выполняется уменьшение отступа строки на величину, заданную в
параметре 'shiftwidth', независимо от того, где в строке находится каретка.
    В режиме команд для увеличения и уменьшения отступов строк можно
воспользоваться командами ">>" и "<<". Где `>` и `<` являются операторами,
поэтому можно использовать любой из трёх доступных способов указания строк, в
которых следует изменить отступ. Полезный текстовый объект для использования с
этими командами — "i{":

>
	>i{
<

По этой команде возможно добавление отступа в строках внутри блока фигурных
скобок. Отступы самих строк с символами «{» и «}» останутся без изменений. По
команде ">a{" будет выполнено также и изменение отступа в строках, содержащих
символы «{» и «}». В приведённом ниже примере каретка находится на слове
«printf»:

	изначальный текст	после команды ">i{"	после команды ">a{"

	if (flag)		if (flag)		if (flag) ~
	{			{			    { ~
	printf("yes");		    printf("yes");	    printf("yes"); ~
	flag = 0;		    flag = 0;		    flag = 0;  ~
	}			}			    } ~

==============================================================================
*30.5*	Пробелы и табуляция

По умолчанию в редакторе Vim значение параметра 'tabstop' равно восьми
символам, и хотя всегда можно изменить это значение, но почти наверняка это
вызовет в дальнейшем множество неприятностей. Ведь в других программах
невозможно вычислить, какое количество символов было использовано для
представления табуляции. Как правило, в программах используется стандартное
значение, равное восьми символам и текст с нестандартным значением табуляции
будет выглядеть весьма своеобразно. К тому же в большинстве печатающих
устройств значение в восемь символов для табуляции жёстко фиксировано и не
может быть изменено. Так что лучше всего не менять предустановленное значение
параметра 'tabstop'. (Если редактируется текст, в котором используется другое
значение табуляции, то прочитайте параграф |25.3| чтобы узнать, как поступать
в этом случае).
    С другой стороны, используя отступы, ширина которых кратна восьми
символам, при форматирования исходных текстов программ, довольно быстро
приведёт к тому, что строки будет начинаться за правым краем экрана.
Использование же в качестве отступа ширину одного пробельного символа не
способно дать хорошего визуально различимого форматирования. И в этой ситуации
многие используют в качестве компромиссного решения ширину отступов, равную
четырём пробельным символам.
    Поскольку при нажатии клавиши <TAB> будет вставляться один символ
табуляции, величина которого равна восьми пробельным символам, то это не
подходит для вставки необходимых четырёх пробельных символов в качестве
отступа. И в данном случае для решения этой задачи существует два варианта:

1.  Использовать совместно табуляцию и пробелы. Поскольку символ табуляции
    заменяет собой восемь символов, то в файле будет меньше символов.
    Однократное нажатие клавиши <TAB> гораздо быстрее, чем восемь нажатий
    клавиши <SPACE> для вставки восьми пробелов, кроме того, быстрее работает
    и забой символа слева от каретки.

2.  Всегда использовать только пробелы. Это позволяет избежать осложнений с
    отображением текста в тех программах, которые используют иное значение для
    табуляции.

К счастью, в редакторе Vim отлично реализована поддержка этих двух вариантов.


КАК ПРОБЕЛЫ, ТАК И ТАБУЛЯЦИЯ

Если в качестве отступов применять и пробелы, и табуляцию, то набор текста
можно выполнять как обычно, а через реализованные в программе Vim механизмы в
текст будут вставляться необходимые символы без всякого вмешательства
пользователя.
    Чтобы это всё работало так, как сказано, требуется задать необходимое
значение отступа в параметре 'softtabstop'. После установки этого параметра,
при нажатии клавиши <TAB> в текст будет добавлен отступ, выглядевший как
символ табуляции заданной ширины, но на самом деле для установки отступа
используется комбинация из символов пробелов и табуляции.
    После исполнения приведённой ниже команды каждое нажатие клавиши <TAB>
вызовет перемещение каретки вперёд сразу на четыре колонки

>
	:set softtabstop=4
<

Когда каретка находится в первой колонке, то при нажатии клавиши <TAB> в текст
будет вставлено четыре пробела. При втором нажатии клавиши <TAB> будут удалены
эти четыре пробела и добавлен один символ табуляции, а каретка сдвинута на
девятую колонку. В редакторе Vim используется столько символов табуляции,
сколько возможно, и остаток дополняется необходимым количеством пробелов.
    При использовании клавиши <BS>, всё происходит в обратном порядке. При
нажатии клавиши <BS> будет удаляться количество пробелов, указанное в значении
параметра 'softtabstop'. После этого, для заполнения пустоты, вставляется
необходимое количество символов табуляции с дополнением символами пробелов.
    Приведём пример, иллюстрирующий, что происходит, когда нажимается клавиша
<TAB> несколько раз, а затем клавиша <BS>. Символ пробела представлен как «.»,
а символ табуляции выглядит на нашей схеме как «------->».

	нажата клавиша		  результат ~
	<TAB>			  ....
	<TAB><TAB>		  ------->
	<TAB><TAB><TAB>		  ------->....
	<TAB><TAB><TAB><BS>	  ------->
	<TAB><TAB><TAB><BS><BS>   ....

Другим решением является активация параметра 'smarttab'. В этом случае
значение параметра 'shiftwidth' используется для установки ширины отступа при
нажатии клавиши <TAB>, только когда каретка находится в начале строки, а после
первого непробельного символа будет вставляться действительный символ
табуляции. Однако при этом и забой символов по клавише <BS> будет работать
иначе.


ТОЛЬКО ПРОБЕЛЫ

Если необходимо полностью отказаться от использования символов табуляции в
тексте, то можно активировать параметр 'expandtab'

>
	:set expandtab
<

При включённом параметре 'expandtab' при нажатии на клавишу <TAB> в текст
будет вставлена серия пробелов. Таким образом, внешне это выглядит так, как
если бы вставлялся настоящий символ табуляции, между тем, как в файле будут
присутствовать только пробелы.
    При нажатии клавиши <BS> будет выполняться удаление вставленных пробелов
по одному. Таким образом, после нажатия клавиши <TAB>, для отмены её действия
придётся нажимать клавишу <BS> восемь раз. Если речь идёт об отступе в строке,
то гораздо быстрее выполнить это с помощью команды CTRL-D.


ЗАМЕНА ТАБУЛЯЦИИ НА ПРОБЕЛЫ (И ОБРАТНО)

Активация параметра 'expandtab' никак не влияет на существующие символы
табуляции. Другими словами, все символы табуляции в документе остаются
символами табуляции. Если требуется преобразовать их в набор пробелов, то
используйте команду ":retab". Например,

>
	:set expandtab
	:%retab
<

И после этого в редакторе Vim будет выполнена замена во всех отступах, в
которых использовались символы табуляции, на такое же количество пробелов.
Однако, все символы табуляции, которые находятся после непробельного символа,
будут сохранены. Если необходимо заменить и эти символы табуляции, то добавьте
к команде модификатор "!"

>
	:%retab!
<

Это немного опасная операция, поскольку она может также заменить символы
табуляции внутри строковых констант. Поэтому перед выполнением такой команды
лучше проверить существование подобных констант, используя команду поиска

>
	/"[^"\t]*\t[^"]*"
<

Настоятельно рекомендуется внутри строковой константы не использовать символы
табуляции. Во избежание неприятностей, замените их метасимволом "\t".

Можно также выполнить и обратное преобразование:

>
	:set noexpandtab
	:%retab!
<

==============================================================================
*30.6*	Разметка комментариев

Одна из классных особенностей редактора Vim состоит в том, что в нём есть
механизм распознавания комментариев в исходных текстах программ. Можно просто
отдать команду на форматирование комментария, и всё будет сделано правильно.
Предположим, имеется такой комментарий:

	/* ~
	 * Это тестовый комментарий ~
	 * для проверки форматирования текста. ~
	 */ ~

Поместим каретку в начало комментария и наберём команду

>
	gq]/
<

где "gq" это оператор форматирования текста, а "]/" это команда перемещения,
по которой каретка будет перемещена к окончанию комментария. Результат
выглядит так:

    /* ~
     * Это тестовый комментарий для проверки форматирования текста. ~
     */ ~

Обратите внимание, что в редакторе Vim корректно обрабатывается начало каждой
строки.
    Также можно выделить текст комментария в визуальном режиме и набрать
команду `gq`.

Чтобы добавить новую строку в комментарий, поместите каретку на среднюю строку
и нажмите клавишу "o". Результат выглядит так:

    /* ~
     * Это тестовый комментарий для проверки форматирования текста. ~
     *  ~
     */ ~

В новой строке будут автоматически добавлены символ звёздочки и пробел. Теперь
можно набрать необходимый текст. Если его длина будет превышать значение
указанное в параметре 'textwidth', то реализованные в редакторе Vim механизмы
выполнят перенос строки с автоматической вставкой символа звёздочки в
необходимом месте

    /* ~
     * Это тестовый комментарий для проверки форматирования текста. ~
     * Набор длинного текста приведёт к тому, что в редакторе Vim текст ~
     * будет автоматически разбиваться на отдельные строки ~
     */ ~

Чтобы эта особенность работала правильно, нужно назначить некоторые флаги в
параметре 'formatoptions':

	r	добавлять символ звёздочки при нажатии клавиши <ENTER> в
		режиме вставки
	o	добавлять символ звёздочки при исполнении команд "o" или "O"
		в режиме команд
	c	разбивать текст комментария в соответствии со значением
		параметра 'textwidth'

Подробнее о флагах смотрите в параграфе |fo-таблица|.


ОПРЕДЕЛЕНИЕ КОММЕНТАРИЯ

Виды комментариев задаются в параметре 'comments'. В редакторе Vim
распознаются однострочные комментарии и блоковые комментарии, состоящие из
нескольких частей.
    Однострочные комментарии, как правило, начинаются с определённого символа.
В языке программирования Си++ используются символы «//», в файлах Makefiles —
«#», в командных файлах программы Vim символ «"». Например, чтобы в редакторе
Vim распознавались комментарии в стиле языка программирования Си++, введите
команду

>
	:set comments=://
<

Здесь символ двоеточия отделяет флаг параметра от текста, по которому
распознаётся комментарий. Общий синтаксис записей параметра 'comments' таков:

	{флаги}:{текст}

при этом поле {флаги}, как это было в примере выше, может отсутствовать.
    В параметре можно указывать несколько записей, разделяя их запятыми. Это
позволяет распознавать несколько различных типов комментариев. Например, если
редактируются письма, где текст, который написан другими, оформляется с
помощью символов «>» или «!», то в этом случае можно использовать команду

>
	:set comments=n:>,n:!
<

Здесь два записи, одна для комментариев, начинающихся с «>», другая для
комментариев, начинающихся с «!». Обе записи имеют флаг "n" (nest, вложен).
Это указывает на то, что оба комментария могут быть вложенными. Строка,
которая начинается с «>», может иметь и другой комментарий, после символа «>».
Эта настройка позволит форматировать такие сообщения примерно так:

    > ! Ты что, не видел сайт? ~
    > ! Очень классно сделан. ~
    > Мне не нравится. Цвета вообще ~
    > ужасные. ~
    А какой у того сайта URL? ~

Попробуйте установить параметр 'textwidth' в другое значение, например 80, и
переформатировать текст, набрав команду `gq`, предварительно выделив в
визуальном режиме. Результат будет выглядеть примерно так:

    > ! Ты что, не видел сайт? Очень классно сделан. ~
    > Мне не нравится. Цвета вообще ужасные. ~
    А какой у того сайта URL? ~

Обратите внимание, что при использовании редактора Vim, различные типы
комментариев не были перемешаны. Слово «Мне» находится, как и положено, в
отдельной строке, поскольку эта строка начинается с символа «>», а предыдущая
строка начинается с символов «> !». И в ректоре Vim было распознано, что это
разные комментарии.


ТРЁХКОМПОНЕНТНЫЕ КОММЕНТАРИИ

Блоковые комментарий в языке программирования Си начинается с символов «/*»,
средние строки начинается с символа «*», а окончание комментария обозначается
символами «*/». Определение таких комментариев в параметре 'comments' выглядит
так:

>
	:set comments=s1:/*,mb:*,ex:*/
<

Начало комментария определено записью «s1:/*». Здесь флаг "s" (start, начало)
указывает на начало комментария из трёх частей. Флаг "1" указывает на то, что
в средней части используется отступ в один пробел. Двоеточие отделяет флаги от
текста, по которому и распознаётся комментарий, «/*».
    Вторая запись «mb:*» начинается с флага "m" (middle, середина), что
указывает на среднюю часть комментария. Флаг "b" (blank) указывает, что после
символа комментария должен следовать пробел. Если этот флаг отсутствует, то
текст вроде «*pointer» также будет распознаваться как средняя часть
комментария.
    Третья запись «ex:*/» задаёт окончание комментария через флаг "e" (end,
окончание). Флаг "x" имеет особое значение; он указывает на то, что после
того, как будет добавлен символ звёздочки, при вводе символа «/» необходимо
выполнить удаление лишнего пробела.

Подробности смотрите параграф |форматирование-комментарии|.

==============================================================================

Следующая глава: |usr_31.txt|  Работа с графическим интерфейсом
Авторские права: см. |авторские_права_на_документацию|  

vim:tw=78:ts=8:noet:ft=help:norl:
