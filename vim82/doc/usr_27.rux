*usr_27.txt*	       для Vim version 8.2	     редакция от 24 июля 2019

                  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
                              автор Брам Муленар

			   Шаблоны и команды поиска


В редакторе Vim реализованы достаточно мощные средства поиска с применением
разнообразных шаблонов. Так в параграфе |03.9| главы 3 рассматривалось
несколько простых примеров задания шаблонов поиска. В этой же главе
рассказывается о наиболее часто употребляемых элементах шаблонов. Более
подробное описание шаблонов можно прочитать здесь — |шаблон|.

|27.1|  Поиск без учёта регистра символов
|27.2|  Сквозной поиск по всему документу 
|27.3|  Смещения
|27.4|  Квантификаторы
|27.5|  Варианты
|27.6|  Символьные диапазоны
|27.7|  Символьные классы
|27.8|  Соответствие для переноса строки
|27.9|  Примеры

 Следующая глава: |usr_28.txt|  Структурирование текста
Предыдущая глава: |usr_26.txt|  Выполнение повторяющихся операций
      Содержание: |usr_toc.txt|

==============================================================================
*27.1*  Поиск без учёта регистра символов

По умолчанию поиск в редакторе Vim зависим от регистра символов,
использованных в шаблоне. Запросы "Include", "INCLUDE" и "include"
воспринимаются как три разных слова и будет найдено только одно из этих слов.
    Установка параметра 'ignorecase' позволяет включить регистронезависимый
 поиск. Пример.
>
        :set ignorecase
<
Теперь, если повторить поиск для слова «include», то будут найдены также слова
«Include», «INCLUDE» и «InClUDe». (Чтобы наглядно видеть на экране совпадения
с шаблоном поиска, установите параметр 'hlsearch').
    Выключить регистронезависимый поиск можно по команде
>
        :set noignorecase
<
Однако оставим этот параметр включеным и попробуем поискать слово «INCLUDE».
Совпадения с шаблоном останутся без изменений. Теперь, установим параметр
'smartcase': >

        :set ignorecase smartcase

Если в шаблоне есть хотя бы один символ в верхнем регистре, то поиск будет
регистрозависимым. Иными словами, если необходимо точное соответствие только
слову с символами в верхнем регистре, то укажите его в шаблоне так как оно
есть, в противном случае просто набирайте шаблон строчными буквами. Разве не
классно?
    Вот что будет найдено с обеими включёнными параметрами в зависимости от
шаблона:

        шаблон                  соответствия ~
        слово                   слово, Слово, СЛОВО, СлОВо и т.д.
        Слово                   Слово
        СЛОВО                   СЛОВО
        СлОВо                   СлОВо


РАЗОВОЕ ПРИМЕНЕНИЕ РЕГИСТРОЗАВИСИМОГО ПОИСКА

Если необходимо отменить регистрозависимый характер поиска для одного шаблона,
то начните шаблон с указания флага "\c". Использование флага "\C", наоборот,
сделает данный шаблон регистрозависимым. При использовании в шаблоне флага
"\c" или "\C", значение параметров 'ignorecase' и 'smartcase' не учитывается.

        шаблон                  соответствия ~
        \Cслово                 слово
        \CСлово                 Слово
        \cслово                 слово, Слово, СЛОВО, СлОВо и т.д.
        \cСлово                 слово, Слово, СЛОВО, СлОВо и т.д.

Преимущество использования флагов "\c" и "\C" состоит в том, что они связаны с
самим шаблоном, поэтому, независимо от текущих значений параметров
'ignorecase' и 'smartcase', такой шаблон можно повторно задействовать из
журнала поиска с таким же результатом, как и до этого.

        Примечание.
	Использование элементов, начинающихся с символа «\», в шаблонах поиска
	зависит от значения параметра 'magic'. В данной главе подразумевается,
	что этот параметр установлен, поскольку это стандартное и
	рекомендованное значение параметра. Если изменить значение параметра
	'magic', то многие шаблоны поиска перестанут работать правильно.

        Примечание.
	Если поиск выполняется дольше, чем ожидалось, то его можно прервать
	командой CTRL-C в UNIX-подобных системах, и CTRL-Break в системах MS
	Windows.

==============================================================================
*27.2* Сквозной поиск по всему документу

По умолчанию поиск вперёд ищет совпадения с шаблоном начиная от текущей
позиции курсора и продолжается до конца файла. Если требуемая строка не была
найдена, то поиск продолжится уже от начала файла до позиции курсора откуда он
был начат, пока таким образом не будет просмотрен весь файл.
    Имейте в виду, что повторяя поиск по команде `n`, вы рано или поздно
вернётесь к первому найденному соответствию. Если этого не заметить, то можно
продолжать поиск до бесконечности. Для предотвращения этого в редакторе будет
выведено предупреждающее сообщение:

Поиск будет продолжен от ВЕРХНЕЙ ГРАНИЦЫ документа ~

Если используется команда `?` для поиска в обратном направлении, то сообщение
будет следующее:

Поиск будет продолжен от НИЖНЕЙ ГРАНИЦЫ документа ~

Чтобы нагляднее видеть, где находится первое совпадение, включите «линейку»,
установив параметр 'ruler'. Пример.
>
        :set ruler
<
Теперь в редакторе Vim будет показываться позиция курсора в нижнем правом углу
окна (или в строке состояния):

        101,29       84% ~

Первое число это номер строки. Запомните его при первом совпадении, чтобы не
пойти на второй круг при поиске.


ОТКЛЮЧЕНИЕ СКВОЗНОГО ПОИСКА ПО ДОКУМЕНТУ

Чтобы отключить продолжение поиска от противоположной границы документа,
используйте команду
>
        :set nowrapscan
<
Теперь при достижении нижней границы файла появится сообщение об ошибке:

E385: Достигнута нижняя граница документа. Нет совпадений с навсегда ~

В этом случае, чтобы найти все соответствия, можно перейти в начало файла по
команде `gg` и вести поиск до появления такого сообщения об ошибке.
    При поиске в обратном направлении по команде `?`, в конце поиска появится
сообщение:

E384: Достигнута верхняя граница документа. Нет совпадений с навсегда ~

==============================================================================
*27.3*  Смещения

По умолчанию, после выполнении команды поиска, курсор помещается в начало
найденного соответствия шаблону. При использовании смещения можно указать куда
должен быть перемещён курсор после того как будет найдено совпадение с
шаблоном. Для команды поиска в прямом направлении `/`, смещение указывается
добавлением наклонной черты (/) и величины смещения. Пример.
>
        /умолчанию/2
<
По приведённой команде будет выполнен поиск соответствия шаблону "умолчанию" и
курсор перемещён в начало второй строки после первого найденного совпадения.
Применив эту команду к предыдущему абзацу, мы увидим, как будет найдено на
первой строке слово «умолчанию» и затем курсор переместится на две строки вниз
в соответствии с заданным смещением.

Если заданным смещением является число, то курсор будет помещён в начало
строки, отстоящей от совпадения на указанное в смещении число строк. Число,
задаваемое как смещение, может быть отрицательным или положительным. При
положительной величине смещения курсор перемещается вниз по тексту, при
отрицательной величине, курсор перемещается вверх по тексту.


СИМВОЛЬНЫЕ СМЕЩЕНИЯ

Смещение "e" (end, конец) указывает на смещение к концу слова, совпадающего с
искомым шаблоном.
Команда
>
        /констант/e
<
вызывает перемещение курсора к последнему символу соответствия, в данном
случае к символу «т» в слове «констант».
    Посредством указания числа совместно со смещением "e", можно задавать
количество символов, начиная от последнего символа совпадения, на которое
следует переместить курсор. Например, по команде
>
        /констант/e+1
<
курсор перемещается на один символ от последнего символа соответствия шаблону
"констант". При положительном значении смещения курсор перемещается вправо,
при отрицательном — влево. Например, по команде >

        /констант/e-1

курсор будет перемещён к символу «н» в слове «констант».

Если смещение указано как символ "b" (beginning, начало), то курсор
перемещается в начало совпадения. Это может показаться не столь полезным,
поскольку отсутствие смещения "b" выполняет ту же самую операцию, но со
смещением "b" также можно указывать положительные или отрицательные значения.
Например, по команде
>
        /констант/b+2
<
курсор будет перемещён к началу соответствия и затем на два символа вправо.
Таким образом, курсор оказывается на символе «н» в слове «констант».


ПОВТОРНЫЙ ПОИСК С ДРУГИМ СМЕЩЕНИЕМ

Чтобы повторить поиск по указанному раннее шаблону, но с использованием нового
смещения, не указывайте в новом поисковом запросе шаблон. Например,
>
        /этот
        //e
<
что равноценно команде
>
        /этот/e
<
Для повторного поиска со смещением, указанным раннее, используйте команду
>
        /
<
То же самое делается, кстати, и по команде `n`. Для повторного поиска без
использования раннее указанного смещения, применяйте команду
>
        //
<

ПОИСК В ОБРАТНОМ НАПРАВЛЕНИИ

С командой поиска в обратном направлении `?` смещения используются аналогичным
образом, но для отделения шаблона от смещения используется символ «?» вместо
символа «/»: >

        ?констант?e-2

Символы смещения "b" и "e" сохраняют своё значение, а не меняют его на
обратное, при использовании команды поиска в обратном направлении `?`.


НАЧАЛЬНАЯ ПОЗИЦИЯ ПОИСКА

Обычно поиск начинается с позиции, в которой находится курсор. При указании
числового смещения это может привести к некоторым осложнениям. Например,
>
        /констант/-2
<
Эта команда поиска найдёт следующее слово «констант» и переместит курсор на
две строки вверх. Если воспользоваться командой `n` для повтора поиска, то
будет найдено то же самое соответствие, что и раннее, и возврат курсор обратно
в ту же самую позицию!
    Но всё может быть даже хуже! Предположим, что на следующей строке, после
строки в которую был перемещён курсор при выполнения предыдущей команды, также
есть слово «констант». В таком случае, это соответствие будет обнаружено, и
курсор будет перемещён ещё дальше назад по тексту.

При указании символьного смещения в редакторе Vim сохраняется информация об
этом, так что при повторном поиске позиция курсора будет соответствующим
образом скомпенсирована, чтобы то же самое соответствие больше не стояло на
пути команды поиска.

==============================================================================
*27.4*  Квантификаторы

В шаблоне поиска символом «*» (звёздочка) указывается, что предшествующий ему
элемент шаблона может повторяться любое количество раз, в том числе и нулевое.
Например, по шаблону
>
        /а*
<
будут обнаружены совпадения с «а», «аа», «ааа» и т. п., в том числе и пустая
строка, поскольку нулевое число совпадений также считается соответствием
шаблону.
    В шаблонах символ "*", так же называемый квантификатором или повторителем,
применяется только к элементу, который стоит непосредственно перед ним.
Шаблону "аб*" будут соответствовать «а», «аб», «абб», «аббб» и т. п. Чтобы
найти соответствие нескольким символам как одной подстроке повторяющейся
несколько раз, они должны быть представлены как один элемент шаблона. Это
можно сделать, поместив шаблон внутри круглых скобок, экранировав их символом
наклонной черты, вот так "\(" и "\)". Таким образом, по команде
>
        /\(аб\)*
<
будут найдены следующие соответствия: «аб», «абаб«, «абабаб» и т. п, а также
«», т. е. пустая строка.

Чтобы избежать появлению пустой строки среди результатов поиска шаблона,
используйте символы "\+". Этот квантификатор указывает на то, что
предшествующий элемент шаблона может повторяться один и более раз. Шаблону
>
        /аб\+
<
будут соответствовать «аб», «абб», «аббб« и т. п., но не будет соответствовать
«а» без последующего «б».

Для указания на возможный элемент шаблона, используйте символы "\=". Данный
повторитель указывает на совпадение ноль или один раз. Например, шаблону
>
        /авторы\=
<
будут соответствовать как «автор», так и «авторы».


ТОЧНОЕ УКАЗАНИЕ КОЛИЧЕСТВА СОВПАДЕНИЙ ЭЛЕМЕНТА ШАБЛОНА

Чтобы указать точное значение повторений элемента шаблона, используйте форму
"\{n,m}". Здесь «n» и «m» это числа. При поиске, предшествующий элемент должен
повторяться от "n" до "m" раз |включительно|. Пример.
>
        /аб\{3,5}
<
будут соответствовать «аббб», «абббб» и «аббббб».
    Если значение "n" опущено, то по умолчанию оно принимается равным нулю.
Если опущено значение "m", то по умолчанию оно принимается равным
бесконечности. Если опущено всё выражение ",m", то по умолчанию оно
принимается равным "n". Примеры:

        шаблон          возможное количество повторений ~
        \{,4}           0, 1, 2, 3 или 4
        \{3,}           3, 4, 5 и т. д.
        \{0,1}          0 или 1, то же, что и \=
        \{0,}           0 и более, то же, что и *
        \{1,}           1 и более, то же, что и \+
        \{3}            3


ПОИСК МИНИМАЛЬНОГО СОВПАДЕНИЯ

Предыдущие примеры включали в соответствие как можно больше символов. Чтобы
находить минимальное количество соответствующих символов, используйте форму
"\{-n,m}". Она работает точно так же, как и "\{n,m}", за исключением того, что
в соответствие будет включено минимальное количество повторяющихся элементов.
    Например, шаблону
>
        /аб\{-1,3}
<
будут соответствовать «аб» в «аббб». В действительности, по этому шаблону
никогда не будет найдено более одного символа b, поскольку в этом нет никакой
необходимости. Чтобы было найдено больше, чем указано в минимальном
ограничении, требуется какое-либо ещё влияние на шаблон.
    При отсутствии "n" и "m" применяются те же самые правила. Более того,
можно убрать оба значения, оставляя в шаблоне лишь "\{-}". При таком шаблоне
будет найден предшествующий элемент минимальное количество раз от нуля до
бесконечности. Сам по себе элемент всегда будет указывать на нулевое
количество повторений. Но посмотрите, что если такая конструкция используется
совместно с чем-то ещё:
>
        /а.\{-}б
<
По такому шаблону будет найдено соответствие «аяб» в «аябяб». Если бы
использовался шаблон
>
        /а.*б

то было бы найдено максимально возможное количество символов, то есть
соответствием было бы целое «аябяб».

==============================================================================
*27.5*  Варианты

Для обозначения операции "или" в шаблоне используются символы "\|". Пример.
>
        /foo\|bar
<
Такому шаблону соответствует как «foo», так и «bar». Можно использовать и
несколько вариантов
>
        /один\|два\|три
<
будут соответствовать любое из слов «один», «два» или «три».
    Чтобы соответствие варианту в шаблоне могло повторяться один и более раз,
заключите определение вариантов в скобки "\(" и "\)". Пример.
>
        /\(foo\|bar\)\+
<
Шаблону будут соответствовать «foo», «foobar», «foofoo», «barfoobar» и т. д.
    Другой пример,
>
        /end\(if\|while\|for\)

ему соответствует любое из слов «endif», «endwhile» или «endfor».

Похожий по смыслу действия оператор в шаблоне — "\&". Он требует, чтобы оба
варианта совпадали в одном и том-же найденном соответствии. Само соответствие
при этом использует последний указанный вариант. Например,
>
        /forever\&...
<
Соответствует «for» в «forever», но не в «fortuin».

==============================================================================
*27.6*  Символьные диапазоны

При поиске совпадений с «а», «б» или «в» можно использовать достаточно простой
шаблон "/а\|б\|в", но чтобы найти совпадение с одной из букв от «а» до «я»,
потребуется задать весьма длинный шаблон с перечислением всех вариантов. Но
есть краткая запись такого шаблона —  
>
        /[а-я]
<
Конструкцией [] задаётся поиск соответствия для одного символа из указанных.
Внутри квадратных скобок перечисляются различные варианты символов, которые
могут быть использованы. Например,
>
        /[0123456789abcdef]
<
определяет соответствие шестнадцатеричной цифре. Для символов, находящихся
рядом в таблице, можно также задавать символьный диапазон. Диапазон "0-3"
можно подставить вместо «0123», "ь-я" вместо «ьэюя».
Таким образом, предыдущий пример шаблона может быть сокращён до
>
        /[0-9a-f]
<
Для включения в перечень символьных диапазонов самого символа «-», указывайте
его в самом начале или конце перечня. Кроме того, можно использовать такие
специальные символы (их можно использовать в любом месте шаблона, не только в
[]):

        \e      <Esc>
        \t      <Tab>
        \r      <CR>
        \b      <BS>

Имеется также несколько дополнительных возможностей для использования внутри
диапазонов [], см. |/[]|.


ДИАПАЗОН С ИСКЛЮЧЕНИЕМ

Для того, чтобы исключить какой-либо символ из диапазона, используйте в начале
диапазона символ "^". В этом случае диапазон будет соответствовать любому
символу, кроме указанных в диапазоне []. Пример. >

        /"[^"]*"
<
где
         "        Двойная кавычка
          [^"]    любой символ, кроме двойной кавычки
              *   любое количество раз
               "  ещё раз двойная кавычка

соответствует «foo» и «3!x», включая двойные кавычки.


СТАНДАРТНЫЕ ДИАПАЗОНЫ

Некоторые диапазоны используются в работе постоянно. Для таких диапазонов в
редакторе Vim имеются короткие обозначения. Например, >

        /\a

будет находить алфавитные символы. Это эквивалентно использованию "/[a-zA-Z]".
Вот ещё несколько примеров:

      элемент   соответствует               эквивалент ~
        \d      цифре                       [0-9]
        \D      не цифре                    [^0-9]
        \x      шестнадцатеричной цифре     [0-9a-fA-F]
        \X      не шестнадцатеричной цифре  [^0-9a-fA-F]
        \s      пробельному символу         [       ]     (<Tab> и <Space>)
        \S      не пробельному символу      [^      ]     (не <Tab> и <Space>)
        \l      букве в нижнем регистре     [a-z]
        \L      не букве нижнего регистра   [^a-z]
        \u      букве в верхнем регистре    [A-Z]
        \U      не букве верхнего регистра  [^A-Z]

        Примечание.
	Использование стандартных диапазонов позволяет осуществлять поиск
	значительно быстрее, чем с использованием их эквивалентов. Стандартные
	диапазоны не могут использоваться внутри []. Поэтому, "[\d\l]" не
	будет соответствовать цифре или букве в нижнем регистре. Вместо этого,
	используйте форму "\(\d\|\l\)".

Полный перечень стандартных диапазонов см. в |/\s|.

==============================================================================
*27.7*  Символьные классы

Символьный диапазон определяет соответствие заданному набору символов.
Символьный класс работает похожим образом, но с одним важным отличием — набор
символов можно переопределить без изменения шаблона поиска.
    Например, попробуйте поиск по такому шаблону: >

        /\f\+

Здесь "\f" обозначает символы, которые могут входить в названия файлов. Таким
образом, шаблон соответствует строке, которая может быть именем файла.
    Набор символов, которые могут входить в название файла, зависит от
операционной системы. В MS Windows этот набор включает обратную наклонную
черту, а в UNIX‐подобных — нет. Перечень символов определяется значением параметра
'isfname'. Значение этого параметра по умолчанию для UNIX‐подобных следующее:
>
        :set isfname
        isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=

Для других систем значение по умолчанию отличается. Поэтому, можно
пользоваться шаблоном с классом "\f" для поиска названий файла, и он
автоматически будет подстраиваться под используемую операционную систему.

        Примечание.
	В действительности, UNIX позволяет использовать в названии файла
	практически любой символ, включая пробел. Поэтому, теоретически,
	включение этих символов в значение параметра 'isfname' было бы
	правильным, но это сделало бы невозможным определение окончания
	названия файла в тексте. Поэтому принято указанное выше компромиссное
	значение этого параметра.

Другие символьные классы:

      элемент      соответствует                параметр  ~
        \i      символам наименований           'isident'
        \I      как \i, исключая цифры
        \k      символам управляющих слов       'iskeyword'
        \K      как \k, исключая цифры
        \p      печатаемым символам             'isprint'
        \P      как \p, исключая цифры
        \f      символам названий файлов        'isfname'
        \F      как \f, исключая цифры

==============================================================================
*27.8*  Соответствие для перевода строки

В редакторе Vim можно осуществлять поиск по шаблону, включающему символы
перевода строки. Для этого необходимо указать, где происходит перевод строки.
    Чтобы указать на перевод строки в определённом месте шаблона, используйте
символьный класс "\n": >

        /это\nслово

будет соответствовать слову «это» в конце строки, если следующая строка
начинается со слова «слово». Чтобы также искать соответствия строке «это
слово», шаблон должен быть составлен так, чтобы соответствовать пробелу или
переносу строки. Это достигается с использованием элемента "\_s": >

        /это\_sслово

Чтобы шаблон мог соответствовать любому количеству пробельных символов,
используйте >

        /это\_s\+слово

Такой шаблон также будет соответствовать и такой ситуации: «это   » в конце
одной строки и «   слово» в начале другой.

Символьный класс "\s" соответствует пробелу, а "\_s" соответствует символу
пробела или перевода строки.
Аналогично, "\a" соответствует символу латинского алфавита, а "\_a"
соответствует символу латинского алфавита или переводу строки. При помощи
модификатора "_" можно изменить подобным образом и другие символьные классы
и диапазоны.

Соответствие символу перевода строки можно также определить и для многих
других элементов при указании перед ними модификатора "\_" . Например, "\_."
соответствует любому символу или переводу строки.

        Примечание.
	Шаблон "\_.*" соответствует всем символам до конца файла. Будьте
	осторожны с использованием этого шаблона, поскольку поиск по нему
	может быть очень медленным.

Другой пример, шаблон "\_[]", символьный диапазон, включающий перевод строки. >

        /"\_[^"]*"

Этот шаблон позволяет найти текст в двойных кавычках, который может быть
разделён на несколько строк.

==============================================================================
*27.9*  Примеры

Вот ещё несколько полезных примеров задания шаблонов для поиска. В них
показано, как можно комбинировать элементы, которые обсуждались в этой главе.


ПОИСК АВТОМОБИЛЬНЫХ НОМЕРНЫХ ЗНАКОВ ШТАТА КАЛИФОРНИЯ

Номерные знаки в Калифорнии выглядят так: «1MGU103». Они включают цифру, три
символа в верхнем регистре и три цифры. Иными словами, говоря на языке
шаблонов: >

        /\d\u\u\u\d\d\d

Другой способ задания шаблона заключается в применении числа повторений: >

        /\d\u\{3}\d\{3}

Можно также использовать диапазоны []: >

        /[0-9][A-Z]\{3}[0-9]\{3}

Так каким же шаблоном пользоваться лучше всего? А любым, который сможете легко
запомнить, чем проще, тем лучше. Если без труда запоминаете все три варианта,
то лучше всё-таки воздержаться от использования третьего, поскольку он требует
слишком много лишних нажатий на клавиши и более медленный в работе.


ПОИСК НАИМЕНОВАНИЙ ИДЕНТИФИКАТОРОВ

В программах на языке Си, да и многих других языках программирования,
идентификатор начинается с буквы и состоит в дальнейшем из букв и цифр. Также
может использоваться символ подчёркивания. Шаблон для поиска наименований
идентификаторов выглядит так: >

        /\<\h\w*\>

где символы "\<" и "\>" используются для поиска целых слов. Символьный класс
"\h" эквивалентен "[A-Za-z_]", а "\w" это то же самое, что и "[0-9A-Za-z_]".

        Примечание.
	Поведение метасимволов "\<" и "\>" полагается на значение параметра
	'iskeyword'. Если в его значении указано, например, "-", то
	наименование идентификатора "ident-" не будет найдено. В этой ситуации
	используется шаблон
>
                /\w\@<!\h\w*\w\@!
<
        который проверяет соответствие "\w" перед именем и после имени.
        См. |/\@<!| и |/\@!|.

==============================================================================

Следующая глава: |usr_28.txt|  Структурирование текста
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:noet:ft=help:norl:
