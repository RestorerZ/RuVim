*usr_24.txt*	       для Vim version 8.2	      редакция от 18 мар 2018

                  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
                              автор Брам Муленар

			Приёмы упрощающие ввод текста


В редакторе Vim имеется несколько удобных способов уменьшить количество
нажатий на клавиши и избежать опечаток при вводе текста. Для повтора введённых
раннее слов можно использовать дополнение слов, а длинные слова можно набирать
через их сокращения. В этой главе также будет показано, как вводить символы,
которых нет на клавиатуре.

|24.1|  Корректура текста
|24.2|  Показ соответствующего парного символа
|24.3|  Дополнение в режиме вставки
|24.4|  Дублирование ранее напечатанного
|24.5|  Копирование символов из соседней строки
|24.6|  Вставка содержимого регистра
|24.7|  Сокращения
|24.8|  Ввод специальных символов
|24.9|  Диграфы
|24.10| Команды режима команд

 Следующая глава: |usr_25.txt|  Редактирование форматированного текста
Предыдущая глава: |usr_23.txt|  Редактирование особых типов файлов
      Содержание: |usr_toc.txt|

==============================================================================
*24.1*  Корректура текста

Когда редактор Vim в режиме вставки и надо откорректировать набранный текст,
то для удаления символа перед курсором используйте клавишу <BS>, как об этом
уже говорилось ранее, а вот для удаления символа после (под) курсором
используйте клавишу <DEL>.
    Если целое слово набрано неправильно, то для удаления его в режиме
вставки, используйте команду CTRL-W. Пример.

        Лошадь упала на небо ~
                            CTRL-W
        Лошадь упала на ~

Если набирая текст замечаете, что ранее в строке набрано что-то совсем не то и
надо начинать с самого начала, то в режиме вставки для этого используйте
команду CTRL-U. При этом будет удалён текст только от месторасположения
курсора до начала строки, при чём с сохранением как отступа в строке, так и
текста после месторасположения курсора. В примере, приведённом ниже, нажатие
комбинации клавиш CTRL-U когда курсор находится на букве «у» в слове «упала»,

        Лошадь упала на ~
               CTRL-U

приведёт к такому результату

        упала на ~

Если обнаружится ошибка в каком-то ранее набранном слове, а уже набрано
какое-то количество текста, то для её исправления потребуется переместить
курсор назад. Например,

        Лошадь упало на землю ~

Здесь надо исправить слово «упало» на «упала». Если курсор находится в конце
строки, то для исправления потребуется ввести следующую команду
>
       <Esc>3berаA
< где
       <ESC>            выход из режима вставки,
            3b          перемещение курсора на три слова назад,
              e         перемещение курсора в конец слова на символ «о»,
                rа      замена на символ «а»,
                   A    переключение редактора в режим вставки.


Другой способ получить то же самый результат и без выхода из режима вставки
>
       <C-Left><C-Left><Right><Right><Del>a<End>
< где
       <CTRL-LEFT><CTRL-LEFT>			    перемещение курсора на
						    два слова назад,
		    <RIGHT><RIGHT>		    перемещение курсора к
						    символу «о»,
				   <DEL>	    удаление символа «o»,
                                        a	    вставка символа «a»,
					 <END>	    перемещение к концу строки.

В этом случае используются в режиме вставки специальные клавиши для
перемещения курсора. Это похоже на метод, который бы использовался в без
режимном редакторе. Возможно, этот метод проще для запоминания, но требует
больше времени. Судите сами, необходимо переносить руки от буквенно-цифровых
клавиш к клавишам управления курсором, а если это ещё и ноутбук с
нестандартным расположением этих клавиш, то для нажатия клавиши <END>
наверняка придётся оторвать глаза от экрана.
    Эти специальные клавиши наиболее полезны в тех случаях, когда нужно
создать клавиатурные составные команды для использования их без выхода из
режима вставки. В этом случае дополнительные усилия не имеют большого
значения.
    В режиме вставки можно пользоваться следующими специальными клавишами и
комбинациями с их участием:

        <CTRL-HOME>         в начало файла;
        <PAGEUP>            на один экран вверх;
        <HOME>              в начало строки;
        <SHIFT-LEFT>        на одно слово влево;
        <CTRL-LEFT>         на одно слово влево;
        <SHIFT-RIGHT>       на одно слово вправо;
        <CTRL-RIGHT>        на одно слово вправо;
        <END>               в конец строки;
        <PAGEDOWN>          на один экран вниз;
        <CTRL-END>          в конец файла.

Есть ещё несколько специальных клавиш, см. |вставка-спец-спец|.

==============================================================================
*24.2*  Показ соответствующего парного символа

Было бы неплохо, если бы можно было бы видеть, какой именно символ )
соответствует парному символу ( прямо в процессе набора. В редакторе Vim этот
функционал реализован и он активируется установкой параметра 'showmatch'
>
        :set showmatch
<
Например, при наборе текста «(пример)», как только будет набран символ ),
курсор будет перемещён к соответствующей открывающей скобке на какое-то
мгновение и затем возвращён на прежнее место.
    Если соответствующего символа ( не будет найдено, то программой будет
подан звуковой сигнал. Таким образом, будет просигнализировано, что где-то
пропущен символ (, либо набрано слишком много ).
    Соответствие также будет показано и для пар квадратных [] и фигурных {}
скобок. Совсем не обязательно ждать, когда курсор будет возвращён в исходную
расположение — как только будет продолжен ввод, курсор сразу же будет
перемещён в требуемую позицию и продолжится вставка символов.
    Время, которое требуется для показа соответствия, можно изменить при
помощи значения параметра 'matchtime'. Например, для показа соответствующей
скобки в течение полутора секунд, установите следующее значение
>
        :set matchtime=15
<
Значение этого параметра указывается в десятых долях секунды.

==============================================================================
*24.3*  Подстановка в режиме вставки

В редакторе Vim реализовано подстановка слов при наборе текста в режиме
вставки. Она работает следующим образом, после набора части слова и нажатия
комбинации клавиш CTRL-P, через механизм, реализованный в программе, будет
предпринята попытка подбора окончания слова и его подстановка в позицию
курсора.
    Предположим, например, что при набора программы на языке Си необходимо
набрать следующую строку кода:

        total = ch_array[0] + ch_array[1] + ch_array[2]; ~

Начните набор текста как обычно

        total = ch_array[0] + ch_ ~

и в этом месте, посредством команды CTRL-P, задействуйте механизм подстановки
остальной части набираемого слова. Будет выполнен поиск слова, в тексте
текущего файла, которое начиналось бы так же, как и слово, расположенное под
курсором. В данном случае, для «ch_» есть совпадение с «ch_array». Поэтому,
после нажатия комбинации клавиш CTRL-P будет получен следующий результат:

        total = ch_array[0] + ch_array ~

Продолжите набор текста и набрав пробел после знака плюс

        total = ch_array[0] + ch_array[1] +  ~

повторно отдайте команду CTRL-P, чтобы вновь был выполнен поиск слова для
подстановки. Поскольку перед курсором находится пробел, то будет выполнена
подстановку первого слова, которое было набрано перед этим, в данном случае
«ch_array». Если ещё раз нажать комбинацию клавиш CTRL-P, то будет выполнена
подстановка предыдущего слова, в данном случае это слово «total». Все
последующие команды CTRL-P будет вызывать продолжение подстановки слов,
найденных в обратном порядке. Если больше ничего подходящего не будет найдено,
то произойдёт возврат к первоначальному тексту, который в данном примере
отсутствует, и при последующей команде вновь будет показано слово «ch_array».

Чтобы был выполнен поиск для подстановки в прямом порядке следования слов,
используйте команду CTRL-N. Поскольку поиск по достижению верхней или нижней
границы содержания файла продолжается от противоположной стороны, то при
использовании команд CTRL-N и CTRL-P будут найдены одни и те же слова для
подстановки, но в разном порядке.
Команда CTRL-N это команда для поиска следующего («Next») соответствия для
подстановки, а команда CTRL-P для поиска предыдущего («Previous»).

При поиске требуемого слова для выполнения подстановки, программой
проделывается огромная работа. По умолчанию поиск выполняется в следующих
местах:

        1. Текущий файл.
        2. Файлы в других окнах.
        3. Другие загруженные файлы (скрытые буферы).
        4. Файлы, которые есть в списке буферов, но не загружены (неактивные).
        5. Индексные файлы.
        6. Все файлы, на которые ссылаются директивы #include в данном файле.


ПАРАМЕТРЫ

Порядок и места поиска вариантов для подстановки можно настроить с помощью
значений параметра 'complete'.

Также учитывается установка параметра 'ignorecase'. Если он включен, то
различия в регистре символов при подборе слова для подстановки не учитываются.

Специально для выполнения подстановок используется параметр 'infercase'. Он
полезен для поиска соответствий без учёта регистра (параметр 'ignorecase'
также должна быть включен), но при этом для подстановки будет использовано
слово без изменения регистра уже набранных символов. Иными словами, если
набрано слово "Высоко" и найдено для подстановки слово «высококачественный»,
то в результате дополнения будет подставлено слово «Высококачественный».


ПОДСТАНОВКА ОПРЕДЕЛЁННЫХ ЧАСТЕЙ

Если известно, что именно должно быть использовано для подстановки, то
применяются следующие команды:

        CTRL-X CTRL-F           наименования файлов;
        CTRL-X CTRL-L           строки целиком;
        CTRL-X CTRL-D           макроопределения в #define
                                (в т. ч. и из файлов в #include);
        CTRL-X CTRL-I           из текущего файла и из файлов в #include;
        CTRL-X CTRL-K           слова из словаря;
        CTRL-X CTRL-T           слова из тезауруса;
        CTRL-X CTRL-]           из индексного файла;
        CTRL-X CTRL-V           командная строка редактора.

После каждой из этих команд можно использовать команды CTRL-N и CTRL-P для
поиска следующего или предыдущего варианта для подстановки.
    Подробнее о каждой из этих команд читайте во |вставка-подстановка|.


ПОДСТАНОВКА НАИМЕНОВАНИЙ ФАЙЛОВ

В качестве примера рассмотрим команду CTRL-X CTRL-F использующуюся для поиска
наименований файлов. При поиске подстановок будет просматриваться текущий
каталог и подставляться название файла, соответствующее набранному фрагменту
одно за другим.
    Предположим, в текущем каталоге имеются следующие файлы:

        main.c  sub_count.c  sub_done.c  sub_exit.c

Теперь, переключите редактор в режим вставки и начните ввод текста

        Коды выхода приводятся в файле sub ~

В этот момент отдайте команду CTRL-X CTRL-F, чтобы посредством функционала
редактора Vim была выполнена подстановка в слове «sub» с использованием
названий файлов из текущего каталога. Первая подстановка будет sub_count.c, но
поскольку это не то, что требуется, продолжайте перебор вариантов при помощи
команды CTRL-N. В итоге будет подставлено требуемое название файла

        Коды выхода приводятся в файле sub_exit.c ~

Если перед наименованием файла указать корневой каталог \ в UNIX-подобной
системе или C:\ в системе MS Windows, то можно найти любой файл в файловой
системе. Например, наберите /u и нажмите комбинации клавиш CTRL-X CTRL-F, и,
если это в UNIX-подобной системе, будет подставлено название "/usr"

        файл находится в каталоге /usr/ ~

Если теперь нажмёте комбинацию клавиш CTRL-N, то будет выполнен возврат к
исходному состоянию ввода слова для подстановки «/u». А если вместо команды
CTRL-N ещё раз используете команду CTRL-X CTRL-F, то будет принята подстановка
значения и выполнен переход на один каталог ниже по дереву файловой системы

        файл находится в каталоге /usr/X11R6/ ~

Результаты, конечно же, зависят от того, что на самом деле находится в текущей
файловой системе. Соответствующие значения подстановки упорядочены по
алфавиту.


ПОДСТАНОВКА В ИСХОДНОМ КОДЕ ПРОГРАММ

Исходные коды программ очень хорошо структурированы, и это позволяет делать в
таких файлах интеллектуальную подстановку. В редакторе Vim такая подстановка
называется Omni-подстановка или контекстная подстановка.
В некоторых редакторах это называется intellisense, но данное название
является зарегистрированной торговой маркой.

Комбинация клавиш для вызова контекстной подстановки — CTRL-X CTRL-O.
Очевидно, что O (латинская буква O) в данном случае означает Omni и выбрано
для того, чтобы можно было легче запомнить эту команду. Давайте попробуем это
на примере редактирования кода на языке программирования Си. Пример.

        { ~
            struct foo *p; ~
            p-> ~
 
Когда курсор будет находиться после «p->», нажмите комбинацию клавиш CTRL-X
CTRL-O. В редакторе Vim будет выведен перечень элементов, которые содержатся в
«struct foo». Это отличается от того, что было бы при использовании команды
CTRL-P. В последнем случае были бы любые возможные слова для подстановки, в то
время как здесь допустимо использовать только элементы «struct foo».

Для работы контекстной подстановки возможно потребуется сделать некоторые
настройки. По крайней мере, удостоверьтесь, что модули типов файлов
активированы. Для этого в файле vimrc должны быть следующие строки:
>
        filetype plugin on
< или >
        filetype plugin indent on
<
Для кода на языке Си необходимо создать индексный файл и установить параметр
'tags'. Подробнее см. |ft-c-omni|. Для других типов файлов, возможно,
требуется сделать что-то подобное, подробнее см. |compl-omni-filetypes|.
Функционал контекстной подстановки применяется только для перечисленных там
типов файлов. Проверьте значение параметра 'omnifunc' чтобы узнать будет ли
это работать.

==============================================================================
*24.4*  Дублирование ранее напечатанного

Если в режиме вставки нажать комбинацию клавиш CTRL-A, то будет вставлен текст,
который был набран в последний раз, когда редактор находились в режиме вставки.
   Например, есть файл, который начинается так

        "file.h" ~
        /* Main program begins */~

Отредактируйте этот файл, напечатав в начале первой строки слово «#include »

        #include "file.h" ~
        /* Main program begins */ ~

Наберите команды `j^`, чтобы было выполнено перемещение курсора в начало
следующей строки и для вставки в этой строке нового слова «#include», наберите
команду
>
        i CTRL-A
<
В результате будет

        #include "file.h" ~
        #include /* Main program begins */ ~

Слово «#include » было вставлено потому, что именно этот текст был набран в
предыдущий раз, когда редактор был в режиме вставки. Теперь просто наберите
"main.h" и нажмите клавишу <ENTER>, чтобы завершить правку этой строки

        #include "file.h" ~
        #include "main.h" ~
        /* Main program begins */ ~

По команде CTRL-@ выполняется команда CTRL-A и выход из режима вставки. Это
позволит быстро повторить вставку того же фрагмента ещё раз.

==============================================================================
*24.5*  Копирование символов из соседней строки

По команде CTRL-Y будет вставлен символ из строки, расположенной над курсором.
Это полезно, если необходимо скопировать содержимое предыдущей строки.
Например, имеется такая строка

        b_array[i]->s_next = a_array[i]->s_next; ~

Теперь нужно повторить эту строку, но вместо «s_next» необходимо набрать
«s_prev». Начните новую строку и нажмите клавиши CTRL-Y четырнадцать раз, пока
курсор не окажется под символом «n» слова «next»

        b_array[i]->s_next = a_array[i]->s_next; ~
        b_array[i]->s_ ~

Теперь наберите «prev»

        b_array[i]->s_next = a_array[i]->s_next; ~
        b_array[i]->s_prev ~

Продолжайте нажимать CTRL-Y, пока не окажетесь под следующим словом «next»

        b_array[i]->s_next = a_array[i]->s_next; ~
        b_array[i]->s_prev = a_array[i]->s_ ~

Теперь наберите «prev;» чтобы закончить строку.

По команде CTRL-E выполняются те же действия, как и по команде CTRL-Y, но
копируются символы из строки, расположенной ниже курсора.

==============================================================================
*24.6*  Вставка содержимого регистра

По команде CTRL-R {регистр} будет вставлено содержимое регистра. Этим можно
пользоваться для быстрого набора длинного слова. Например, нужно набрать
следующее

        r = VeryLongFunction(a) + VeryLongFunction(b) + VeryLongFunction(c) ~

Указанная функция определена в другом файле. Откройте его, установите курсор
в начало названия функции и скопируйте его в регистр "v
>
        "vyiw
<
Здесь "v это указание на регистр, `yiw` — команда копирования «внутреннего»
слова. Теперь вернитесь к редактированию исходного файла, в который требуется
вставить новую строку, и начните набор в режиме вставки

        r = ~

Вставьте название функции из регистра при помощи команды CTRL-R v

        r = VeryLongFunction ~

Продолжайте набор, используя команду CTRL-R v по мере необходимости, чтобы было
вставлено слово «VeryLongFunction».
    Того же самого эффекта можно было бы достичь и при помощи подстановки,
но использование регистра позволяет сократить время, если на одни и те же
символы начинается слишком много слов.

Если в регистре хранятся специальные символы, такие как <BS>, то при вставке
они интерпретируются так, как если бы они были набраны с клавиатуры. Если не
требуется, чтобы так происходило (то есть, действительно хотите вставить в
текст <BS>), то используйте команду CTRL-R CTRL-R {регистр}.

==============================================================================
*24.7*  Сокращения

Сокращением или акронимом называется краткое обозначение на письме какого-либо
понятия. Например, «см.» является общепринятым сокращением для слова «смотри».
В редакторе Vim реализована возможность автоматически подставлять полный текст
при наборе сокращений.
    Чтобы в редакторе автоматически подставлялось «смотри» вместо «см.» во
время набора, используйте следующую команду
>
        :iabbrev см. смотри
<
Теперь, при наборе «см.» в текст будет подставляться слово «смотри».
Подстановка осуществляется после набора сокращённой формы с последующим вводом
символа, который не может являться частью слова, например, пробела. Пример.

        Что вводится с клавиатуры       Что получается
        Подробнее об этом с             Подробнее об этом с ~
        Подробнее об этом см            Подробнее об этом см ~
        Подробнее об этом см.           Подробнее об этом см. ~
        Подробнее об этом см.<SPACE>    Подробнее об этом смотри<SPACE> ~

Подстановка выполняется только после завершения ввода сокращённого слова.


СОКРАЩЕНИЯ ДЛЯ НЕСКОЛЬКИХ СЛОВ

Можно определить сокращения, полная форма которых включает несколько слов.
Например, чтобы задать «ВВП» как «Василий Васильевич Пупкин», используйте
такую команду
>
        :iabbrev ВВП Василий Васильевич Пупкин
<
Автор использует два специфических сокращения, смысл которых должен быть
понятен любому программисту
>
        :iabbrev #b /****************************************
        :iabbrev #e <Space>****************************************/
<
Эти сокращения полезны для создания блочных комментариев (комментариев в
«рамочках»). Комментарий начинается с #b, затем следует текст комментария, и,
наконец, #e рисует последнюю строку.
    Обратите внимание, что сокращение #e начинается с пробела. Обычно
в редакторе Vim игнорируются пробелы между левой и правой частями команды
сокращения. Чтобы всё сработало правильно, пробел указывается как семь
набранных последовательно символов: <, S, p, a, c, e, >.

        Примечание.
	Слово «:iabbrev» слишком долго набирать! Не стесняйтесь пользоваться
	сокращением для команды сокращения: «:iab»!


ИСПРАВЛЕНИЕ ОПЕЧАТОК

Часто бывает, что одна и та же опечатка встречается постоянно. Например, набор
слова «тог» вместо «ток». Исправить эту огрешность (помимо внимательности)
можно при помощи сокращения
>
        :abbreviate тог ток
<
Есть возможность составить целый перечень таких опечаток. И расширять этот
перечень мере необходимости.


ПЕРЕЧЕНЬ СОКРАЩЕНИЙ

По команде ":abbreviate" будет выведен перечень имеющихся сокращений. Пример.

        :abbreviate
        i  #e             ****************************************/
        i  #b            /****************************************
        i  ВВП           Василий Васильевич Пупкин
        i  см.          смотри
        ! тог           ток

Символ «i» в первой колонке указывает на режим вставки (insert). Это означает,
что сокращение будет расширятся до полного слова только в режиме вставки.
Возможны также и другие варианты:

        c       режим командной строки                  :cabbrev
        !       как режим вставки, так и режим          :abbreviate
                 командной строки

Поскольку сокращения не так часто используются в режиме командной строки, то
лучшего всего пользоваться командой ":iabbrev". Это позволяет избежать
расширения сокращения до полного слова при наборе команд.


УДАЛЕНИЕ СОКРАЩЕНИЙ

Чтобы избавиться от какого-либо сокращения, используйте команду
":unabbreviate". Предположим, имеется сокращение созданное такой командой
>
        :abbreviate итд и так далее

Чтобы удалить это сокращение, используйте команду
>
        :unabbreviate итд
<
При наборе аргумента этой команды (итд), он будет расширен до полной формы (и
так далее). Не стоит переживать, механизм обработки сокращений, реализованный
в редакторе Vim, достаточно интеллектуален, чтобы распознать требуемые
действия. Правда, существует маловероятная возможность, что полная форма
сокращения сама используется в каком-нибудь сокращении как краткая форма.
    Чтобы избавиться от всех сокращений, используйте команду
>
        :abclear
<
Для режима вставки и режима командной строки также существуют свои варианты
команд ":unabbreviate" и ":abclear":
    режим вставки >
        :iunabbreviate
        :iabclear
<   режим командной строки >
        :cunabbreviate
        :cabclear
<

СОКРАЩЕНИЯ И КЛАВИАТУРНЫЕ СОСТАВНЫЕ КОМАНДЫ

При использовании сокращений есть один нюанс: необходимо следить, чтобы полная
форма сокращения не включала в себя символов, используемых в левой части
клавиатурных составных команд.
Например,
>
        :abbreviate @a adder
        :imap dd disk-door
<
В этом случае, если набрать `@a`, то получится «adisk-doorer» вместо «adder».
Чтобы избежать этого, можно использовать команду ":noreabbrev", результат
исполнения которой будет то же, что и ":abbreviate", но при этом запрещено
использование полной формы сокращения для клавиатурных составных команд
>
        :noreabbrev @a adder
<
К счастью, ситуация, при которой результат расширения сокращения используется
в клавиатурных составных командах, является достаточно редкой.

==============================================================================
*24.8*  Ввод специальных символов

По команде CTRL-V происходит вставка символа как есть. Иными словами, любой
особый смысл, который может иметь символ, будет игнорироваться. Например, по
команде
>
        CTRL-VESC
<
выполняется вставка символа esc прямо в текст, а не выход из режима вставки.

        Примечание.
	В системе MS Windows комбинация клавиш CTRL-V используется для вставки
	текста из буфера обмена, поэтому для этой платформы вместо комбинации
	клавиш CTRL-V используйте комбинацию клавиш CTRL-Q. С другой стороны,
	в UNIX-подобных системах комбинация клавиш CTRL-Q не будет работать на
	всех терминалах, поскольку часто имеет другое специальное значение.

Также можно использовать такую форму команду CTRL-V {цифры} для вставки
символа, десятичный код которого указан как {цифры}. Например, символ <Del>
имеет код 127 в таблице ASCII (но не обязательно клавиша <Del> должна иметь
этот же код). Для вставки этого символа наберите: >

        CTRL-V 127
(Не нажимайте после CTRL-V клавишу пробел! В примерах так сделано для удобства
чтения).

Этот способ позволяет вводить символы с кодами до 255. Если требуется набрать
менее трёх символов, то окончанием ввода команды является любой нецифровой
символ, либо можно использовать ведущие нули.
    Каждая из перечисленных ниже команд вызовет вставку в текст символа <Tab>
и следующей за ним точки:

        CTRL-V 9.
        CTRL-V 09.
        CTRL-V 009.

Для ввода кода символа в шестнадцатеричном формате, используйте после нажатия
комбинации клавиш CTRL-V символ "x"
>
        CTRL-V x7f
<
Таким способом также можно вводить символы с кодами до 255 (CTRL-V xff).
Восьмеричные символы вводятся с помощью приставки "o", 16-битные символы с
помощью приставки "u", а 32-битные с помощью приставки "U". Два последних
примера относятся к символам Unicode:
>
        CTRL-V o123
        CTRL-V u1234
        CTRL-V U12345678
<
==============================================================================
*24.9*  Диграфы

Как известно, некоторые символы отсутствуют на клавиатуре, например, символ
авторского права (©). Для набора таких символов применяются так называемые
диграфы, т. е. символы, для набора которых используется два символа. Для ввода
©, к примеру, служит следующая команда
>
        CTRL-K Co
<
(Не нажимайте после CTRL-K клавишу пробел! В примерах так сделано для удобства
чтения).

Чтобы просмотреть таблицу диграфов, используйте команду
>
        :digraphs
<
Вот несколько строк из этой таблицы:

  AC ~_ 159  NS |  160  !I ¡  161  Ct ¢  162  Pd £  163  Cu ¤  164  Ye ¥  165 ~
  BB ¦  166  SE §  167  ': ¨  168  Co ©  169  -a ª  170  << «  171  NO ¬  172 ~
  -- ­  173  Rg ®  174  'm ¯  175  DG °  176  +- ±  177  2S ²  178  3S ³  179 ~

Как видно из таблицы что, например, по команде CTRL-K Pd в текст будет
вставлен символ £. Десятичный код этого символа — 163.
    Символы Pd это сокращение для Pound (фунт). Название большинства диграфов
выбраны так, чтобы их было проще запомнить. Если внимательно посмотрите на
таблицу, то поймёте логику.
    Если для обратной комбинации символов нет отдельного диграфа, то порядок
символов в диграфе не имеет значения. Например, CTRL-K dP также вводит символ
фунта, поскольку в редакторе будет выполнен поиск диграфа "Pd", после не
удачного поиска диграфа "dP".

        Примечание.
	Диграфы зависят от кодировки, которая используется. В системе MS-DOS
	диграфы будут отличаться от таких же в системе MS Windows. Всегда
	применяйте команду ":digraphs", чтобы выяснить, какие диграфы доступны
	на используемой платформе.

[Прим. перевод. Исходный текст русской документации набран в кодировке UTF-8.
В зависимости от кодировки, установленной в терминале, а также от кодировки
используемого языкового пакета, возможны расхождения между описанным здесь и
фактическим видом символов. Надеемся, что смысл диграфов не потеряется,
несмотря на возможные недоразумения в примерах]

Имеется возможность определить собственные диграфы. Например,
>
        :digraph a" ä
<
Этой командой устанавливается, что при вводе CTRL-K a", будет вставлен символ
ä. Сам символ можно задать и через его код, указанный как десятичное число
>
        :digraph a" 228
<
Более подробно о диграфах читайте здесь: |диграфы|.
    Другой способ вставки спецсимволов — использование раскладок клавиатуры.
Подробнее об этом читайте в параграфе |45.5|.

==============================================================================
*24.10* Команды режима команд

Режим вставки предоставляет достаточно ограниченный набор команд, а в режиме
команд можно сделать гораздо больше. Для использования одной из команд режима
команд, как правило, выходят из режима вставки по нажатию клавиши <ESC>,
выполняют команду режима команд, и затем выполняют переключение программы в
режим вставки посредством команды `i` или `a`.
    Есть и более простой способ выполнить команду режима команд не покидая
режим вставки, — это CTRL-O {команда}. Например, для удаления текста от
позиции курсора до конца строки
>
        CTRL-O D
<
Этим способом возможно выполнить только одну команду режима команд за раз, но
можно указать регистровую или числовую приставку команды. Вот более сложный
пример
>
        CTRL-O "g3dw
<
По этой команде будет выполнено удаление трёх слов в регистр "g.

==============================================================================

Следующая глава: |usr_25.txt|  Редактирование форматированного текста
Авторские права: см. |авторские_права_на_документацию|  

vim:tw=78:ts=8:noet:ft=help:norl:
