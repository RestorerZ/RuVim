*usr_25.txt*	       для Vim version 8.2	      редакция от 28 мар 2016

                  РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ ПО РЕДАКТОРУ VIM
                              автор Брам Муленар

                    Редактирование форматированного текста


Текст редко бывает набран так, что одно предложение занимает целую строку. И
эта глава посвящена таким приёмам форматирования текста, как разбивка на
предложения и прочим правилам оформления, при которых текст соответствует
параметрам страницы. А также описаны такие полезные возможности, как
редактирование таблиц и однострочных абзацев, которые реализованы в редакторе
Vim.

|25.1|  Разбивка на строки
|25.2|  Выравнивание текста
|25.3|  Отступы и табуляция
|25.4|  Работа с длинными строками
|25.5|  Редактирование таблиц

 Следующая глава: |usr_26.txt|  Выполнение повторяющихся операций
Предыдущая глава: |usr_24.txt|  Приёмы упрощающие ввод текста
      Содержание: |usr_toc.txt|

==============================================================================
*25.1*  Разбивка на строки

По умолчанию в редакторе не выполняется автоматическая разбивка строк. Другими
словами, для разбивки строк и установки символа перевода строки необходимо
нажать клавишу <ENTER>. Это особенность полезна при написании программ, когда
сам программист определяет где заканчивается одна строка, и где начинается
другая. Но при создании документации, почти наверняка необходимо, чтобы текст
автоматически разбивался на строки по ширине примерно в 70 символов. И в
редакторе Vim имеется достаточно богатый функционал, облегчающий работу с
форматированным текстом.
    Если установить значение параметра 'textwidth' отличное от нуля, то будет
выполняться автоматическая разбивка строк, длина которых превышает значение
этого параметра и в конце таких строк будет добавляться символ перевода
строки. Предположим, что необходимо набрать узкую колонку, шириной в 30
символов. Прежде всего, отдайте редактору следующую команду >

	:set textwidth=30

Теперь начните набор текста (в примере также показана линейка):

                 1         2         3
        12345678901234567890123456789012345
        Мы полюбили друг друга на ново ~

Когда будет набрана буква «г», то строка станет длиннее, чем 30 символов.
Специальный механизм, реализованный в редакторе, выполнит вставку символа
перевода строки и текст примет следующий вид:

                 1         2         3
        12345678901234567890123456789012345
        Мы полюбили друг друга на ~
        новог ~

Продолжив набор, можно будет получить весь абзац такого вида:

                 1         2         3
        12345678901234567890123456789012345
        Мы полюбили друг друга на ~
        новогоднем балу. Виталик был ~
        Дедом Морозом и очень мне ~
        понравился в этом образе. В  ~
        жизни же он оказался совсем не ~
        весёлым человеком, и я с ~
        нетерпением жду следующий ~
        Новый Год. ~

Теперь не требуется самостоятельно разбивать строки — в программе это делается
автоматически.

        Примечание.
	С установленным параметром 'wrap' длинные строки будут разбиваться по
	границе окна, но символ перевода строки в этих местах устанавливаться
	не будет и, соответственно, эти символы перевода не будут сохраняться
	при записи в файл. Иными словами в редакторе Vim устанавливается
	«мягкий» перевод строки, используемый только при отображении текста на
	экране.


ИЗМЕНЕНИЕ ФОРМАТИРОВАНИЯ

В редакторе Vim разбивка строк не будут автоматически переформатирована, если
будет добавлено или удалено несколько слов в строке. Если в приведённом
примере удалить из первой строки слова «друг друга», то получится слишком
короткая строка:

                 1         2         3
        12345678901234567890123456789012345
        Мы полюбили на ~
        новогоднем балу. Виталик был ~
        Дедом Морозом и очень мне ~
        понравился в этом образе. В  ~
        жизни же он оказался совсем не ~
        весёлым человеком, и я с ~
        нетерпением жду следующий ~
        Новый Год. ~

Чтобы снова оформить абзац как полагается, используйте команду-оператор `gq`.
Попробуем использовать для этого визуальное выделение.
   Установите курсор на первой строке и наберите
>
        v7jgq
<
Здесь по команде `v` редактор переключается в визуальный режим, по команде
`7j` курсор перемещается в конец абзаца, а затем используется оператор `gq`,
который применяется к выделенной области.
Результат выглядит так:

                 1         2         3
        12345678901234567890123456789012345
        Мы полюбили на новогоднем ~
        балу. Виталик был Дедом ~
        Морозом и очень мне понравился ~
        в этом образе. В жизни же он ~
        оказался совсем не весёлым ~
        человеком, и я с нетерпением ~
        жду следующий Новый Год. ~

Примечание. Имеется возможность выполнять автоматическое форматирование
определённых типов разметки текста, см. |автоформатирование|.

Поскольку `gq` является оператором, то можно пользоваться одним из трёх
способов выбора фрагмента текста, с которым он будет работать: визуальный
режим, перемещение курсора или текстовый объект.
    Тех же самых результатов можно было бы достичь и командой `gq7j`. Это
требует меньше нажатий клавиш, но необходимо знать, на сколько именно строк
нужно переместить курсор. Более полезная, в данном случае, команда
перемещения `}`. По этой команде курсор будет перемещён в конец абзаца. Иными
словами, по команде `gq}` будет выполнено форматирование текста от текущей
позиции курсора до конца текущего абзаца.
    Для использования с оператором `gq` очень полезен также текстовый объект
«абзац». Попробуйте ввести команду
>
        gqap
<
Здесь `ap` это «a-paragraph» («абзац»). По указанной команде выполняется
форматирование текста во всём текущем абзаце. Абзацы в тексте разделяются
пустыми строками.
    Если текст в файле правильно разбит на абзацы, то можно переформатировать
весь файл по команде
>
        gggqG
<
Здесь по команде `gg` курсор будет перемещён к первой строке, а по команде
`gqG` выполняется форматирование до последней строки.
Внимание! В случае если абзацы не разделены пустыми строками, они будут
объединены в один абзац. В пустой строке, разделяющей абзацы, не должно быть
никаких символов, в том числе символов табуляции и пробелов.

В редакторе Vim можно также изменять формат не только у простого текста.
Подробнее об этом смотрите |fo-таблица|. Также см. справку по параметру
'joinspaces', значение которого позволяет настраивать количество пробелов,
добавляемых после точки.
    Для форматирования также можно использовать внешнюю программу, что может
быть полезным, если встроенные средства редактора Vim не позволяют правильно
отформатировать текст. См. справку по параметру 'formatprg'.

==============================================================================
*25.2*  Выравнивание текста

Для выравнивания диапазона строк по центру, используйте команду
>
        :{диапазон}center [ширина]
<
В качестве {диапазона} задаётся обычный для командной строки диапазон строк.
Аргумент [ширина] является необязательным параметром, указывающим на ширину
строки, которую следует использовать для форматирования, по умолчанию она
равна значению параметра 'textwidth'. (Если значение параметра 'textwidth'
равно 0, то [ширина] принимается равной 80 символов).
   Например,
>
        :1,8center 40
<
приводит к следующему результату:

       Мы полюбили друг друга на ~
      новогоднем балу. Виталик был ~
       Дедом Морозом и очень мне ~
      понравился в этом образе. В ~
     жизни же он оказался совсем не ~
        весёлым человеком, и я с ~
       нетерпением жду следующий ~
               Новый Год. ~


ВЫРАВНИВАНИЕ ПО ПРАВОМУ КРАЮ

По команде ":right" выполняется выравнивание текста по правому краю. Например,
>
        :1,8right 30
<
в нашем случае приводит к такому результату:

             Мы полюбили друг друга на ~
          новогоднем балу. Виталик был ~
             Дедом Морозом и очень мне ~
           понравился в этом образе. В ~
        жизни же он оказался совсем не ~
              весёлым человеком, и я с ~
             нетерпением жду следующий ~
                            Новый Год. ~


ВЫРАВНИВАНИЕ ПО ЛЕВОМУ КРАЮ

Кроме того, имеется также команда
>
        :{диапазон}left [поле]
<
В отличие от команд ":center" и ":right", аргументом этой команды является не
длина строки, а левое поле. Если поле не указывать, то текст будет помещён в
самой левой колонке окна, иными словами, значение поля по умолчанию
принимается равным 0. Если поле, допустим, равняется 5, то текст будет
размещён с отступом в пять пробельных символов. Например, введём такие
команды:
>
        :1left 5

        :2,8left
<
В результате получим следующее:

             Мы полюбили друг друга на ~
        новогоднем балу. Виталик был ~
        Дедом Морозом и очень мне ~
        понравился в этом образе. В ~
        жизни же он оказался совсем не ~
        весёлым человеком, и я с ~
        нетерпением жду следующий ~
        Новый Год. ~


ПОЛНАЯ ВЫКЛЮЧКА ТЕКСТА

В редакторе Vim нет встроенных средств для выполнения полной выключки текста
(т. е. выравнивания границ текста слева и справа). Однако существует неплохой
внешний модуль, который отлично справляется с этой задачей. Для подключения
этого модуля надо выполнить команду
>
        :packadd justify
<
Или добавьте такую команду в используемый файл |vimrc|
>
        packadd! justify
<
В этом командном файле задаётся новая команда для визуального режима — `_j`.
Для выравнивания текста по обеим границам, требуется выделить текст в
визуальном режиме и выполнить команду `_j`.
    Более подробно об этом макросе можно посмотреть в самом командном файле.
Выполните команду `gf` на названии файла 
$VIMRUNTIME/pack/dist/opt/justify/plugin/justify.vim.

Альтернативным вариантом может быть использование внешней команды-фильтра,
например
>
        :%!fmt
<
==============================================================================
*25.3*  Отступы и табуляция

Отступы могут быть использованы для обособления текста. Например, все примеры
в данном руководстве размещены с отступами в 8 символов или один символ
табуляции. Как правило при обычном наборе текста требуется нажимать клавишу
табуляции в начале каждой строки. Взгляните на следующий текст:

        первая строка ~
        вторая строка ~

Для ввода этого текста были выполнены следующие действия: нажатие клавиши
<TAB>, затем печать строки текста, нажатие клавиши <ENTER>, табуляция, набор
следующей строки текста и т. д.
    Установка параметра 'autoindent' позволяет вставлять отступы автоматически
>
        :set autoindent
<
Каждая новая строка при этом будет вводится с тем же отступом, что и
предыдущая. В приведённом выше примере, нажатие клавиши табуляции после
нажатия клавиши <ENTER> больше не потребуется.


УВЕЛИЧЕНИЕ ОТСТУПА

Для увеличения отступа, используйте оператор `>` (знак больше). Чтобы
увеличить отступ для текущей строки, используйте команду `>>`.
    Количество пробелов, добавляемых в начало строки, определяется значением
параметра 'shiftwidth', по умолчанию его значение равно 8. Для того чтобы
по команде `>>` вставлялись отступы по четыре пробела, введите команду
>
        :set shiftwidth=4
<
Применив команду `>>` ко второй строке текста из примера, получим:

        первая строка ~
            вторая строка ~

По команде `4>>` будет увеличен отступ у четырёх строк сразу.


ПОЗИЦИЯ ТАБУЛЯЦИИ

Если необходимо сделать отступы кратными четырём символам, то для этого надо
установить значение параметра 'shiftwidth' равным 4. Но это будет работать
только для команды-оператора `>`, а нажатие клавиши табуляции по-прежнему
будет приводить к установке отступа шириной в восемь символов. Чтобы изменить
это, используйте параметр 'softtabstop'
>
        :set softtabstop=4
<
Теперь нажатие на клавишу <TAB> будет приводить к вставке четырёх пробелов.
Если в предыдущей позиции уже было четыре пробела, то будет вставлен один
символ табуляции, что позволяет сделать размер файла на семь байт меньше. Если
требуется, чтобы все символы табуляции всегда заменялись пробелами, то
установите параметр 'expandtab'.

        Примечание.
	Можно также установить значение параметра 'tabstop' равным 4, но если
	позднее будут редактировать этот файл со значением параметра 'tabstop'
	равным 8, то файл будет выглядеть не так, как ожидается. Кроме того,
	отступы будут выглядеть неправильно в других программах и при печати.
	Поэтому, рекомендуется всегда устанавливать значение параметра
	'tabstop' равным 8, поскольку это значение является стандартным.


ИЗМЕНЕНИЕ ТАБУЛЯЦИИ

Предположим, что редактируется файл, в котором применялся параметра 'tabstop'
со значением равным 3, а в редакторе используется стандартное значение этого
параметра — 8, и поэтому файл выглядит безобразно. Можно было бы исправить
положение, временно установив значение параметра 'tabstop' равным 3, но это
пришлось бы делать каждый раз, когда придётся редактировать этот файл. В
редакторе Vim можно изменить значение позиции табуляции, используемое в этом
файле. Прежде всего, установите значение 'tabstop' так, чтобы отступы
выглядели правильно, а затем воспользуйтесь командой ":retab". Пример.
>
        :set tabstop=3
        :retab 8
<
По команде ":retab" изменяется значение 'tabstop' на 8 и попутно меняется
форматирование текста соответствующим образом. Будут заменены все пробельные
символы с использованием необходимого сочетания символов табуляции и пробелов.
После выполнения этой операции можно сохранить файл, чтобы при редактировании
в следующий раз все отступы были на месте.
    Внимание! При использовании команды ":retab" возможна ситуация, когда в
исходных текстах программ пробельные символы будут изменены в строковых
константах. Поэтому, вместо настоящего пробела в строковых константах лучше
использовать метасимвол "\t".

==============================================================================
*25.4*  Работа с длинными строками

Иногда приходится редактировать файлы, в которых строки длиннее, чем
количество колонок в окне. Когда это происходит, то в редакторе Vim может быть
настроен перенос строк так, чтобы они полностью умещались в окне.
    Если сброшен параметр 'wrap', то перенос строк выполняться не будет и
окончания длинных строк будут скрыты за правой границей окна.
    При перемещении курсора к символу, который не виден на экране, будет
происходить прокрутка текст по горизонтали. Это похоже на перемещение окна,
через которое просматривается текст, в необходимом направлении.
    По умолчанию в редакторе Vim не показывается горизонтальная полоса
прокрутки в графическом интерфейсе. Для включения горизонтальной полосы
прокрутки в графическом интерфейсе, используйте команду
>
        :set guioptions+=b
<
Теперь на экране отображается горизонтальная полоса прокрутки.

Если полоса прокрутки отсутствует, или неудобно ей пользоваться, то для
прокрутки текста по горизонтали можно использовать такие команды:

        zh              прокрутка вправо;
        4zh             прокрутка на четыре символа вправо;
        zH              прокрутка вправо на половину ширины окна;
        ze              прокрутка вправо до положения курсора;
        zl              прокрутка влево;
        4zl             прокрутка на четыре символа влево;
        zL              прокрутка влево на половину ширины окна;
        zs              прокрутка влево до положения курсора.

При этом курсор будет оставаться в той же самой позиции рабочей области
редактора Vim, но текст под курсором будет прокручиваться по мере
необходимости. Попытаемся показать, как это работает на примере. Курсор
находится на букве «ч» слова «часть». Надпись «текущее окно» над строкой
указывает на текст, который виден в окне в данный момент, а надписи «окно» под
текстом — на текст, который будет виден в окне после выполнения
соответствующей команды, указанной слева.

                              |<--  текущее окно  -->|
                длинная строка текста, часть которой отображается в окне ~
        ze        |<--     окно      -->|
        zH         |<--      окно     -->|
        4zh               |<--      окно      -->|
        zh                   |<--      окно      -->|
        zl                     |<--      окно      -->|
        4zl                       |<--      окно      -->|
        zL                              |<--      окно      -->|
        zs                             |<--      окно      -->|


ПЕРЕМЕЩЕНИЕ КУРСОРА ПРИ ОТКЛЮЧЁННОМ ПЕРЕНОСЕ СТРОК

Прокручивая текст по горизонтали при сброшенном параметре 'wrap', можно
использовать следующие команды для перемещения курсора к одному из символов
отображаемых в окне:

        g0              к первому видимому символу в текущей строке;
        g^              к первому видимому непробельному символу в текущей
                           строке;
        gm              к середине отображаемой части строки;
	gM		к середине текста текущей строки;
        g$              к последнему видимому символу в текущей строке.

При использовании этих команд, текст, расположенный слева и справа от видимого
в окне, игнорируется. Эти команды не вызывают прокрутки текста:

              |<--      текущее окно      -->|
       длинная    строка текста, часть которой отображается в окне ~
              g0  g^     gm          gM      g$  


ПЕРЕНОС ПО СЛОВАМ               *edit-no-break* *редактирование-без_переносов*

Если подготавливается текст для использования в другой программе, то, скорее
всего, необходимо, чтобы абзацы не содержали лишних разрывов строк. При
использовании параметра 'nowrap' нельзя видеть предложения целиком, а при
установленном параметре 'wrap' слова будут разрываться, что осложняет работу
над текстом.
    Хорошим решением при редактировании такого текста будет установка
параметра 'linebreak'. В этом случае при отображении текста слова будет
переноситься в подходящих местах, например, на пробелах, а текст в самом файле
останется без изменений.
   Без установленного параметра 'linebreak' текст в окне может выглядеть так:

        +---------------------------------+
        |исподлобья глянул на Фёдора и зве|
        |зданул его по больному уху. Фёдор|
        |, не утерпев, ответил ударом в по|
        |ддыхало. Максим, превозмогая боль|
        |, продолжил урок --- дал Фёдору в|
        +---------------------------------+

После выполнения команды
>
        :set linebreak
<
текст будет выглядеть следующим образом:

        +---------------------------------+
        |исподлобья глянул на Фёдора и    |
        |звезданул его по больному уху.   |
        |Фёдор, не утерпев, ответил ударом|
        |в поддыхало. Максим, превозмогая |
        |боль, продолжил урок --- дал     |
        +---------------------------------+

Связанные параметры:
В значении параметра 'breakat' указываются символы, на которых возможен перенос
строки.
В значении параметра 'showbreak' определяются символы, которые должны
отображаться в начале разорванной длинной строки.
Чтобы в абзацах длинные строки не разбивались, установите значение параметра
'textwidth' равным нулю.


ПЕРЕМЕЩЕНИЕ ТОЛЬКО ПО ВИДИМЫМ СТРОКАМ

По командам `j` и `k` курсор перемещается к следующей и предыдущей строке. При
перемещении по длинным строкам это может привести к перемещению на пол-экрана
за один раз.
    Для перемещения на одну строку, отображаемую на экране, вверх или вниз
можно использовать команды `gj` и `gk`. Если строка не переносилась, то эти
команды работают точно так же, как и команды `j` и `k`. Различие проявляется
на строках, которые были перенесены, в этом случае по этим командам курсор
перемещается по вертикали на одну экранную строку, вместо перемещения к
следующей или предыдущей строке текста.
    Возможно, что этими командами будет удобнее пользоваться при назначении их
на клавиши перемещения курсора через следующие клавиатурные составные команды:
>
        :map <Up> gk
        :map <Down> gj
<

УДАЛЕНИЕ СИМВОЛА ПЕРЕВОДА СТРОКИ ВНУТРИ АБЗАЦА	    	*edit-paragraph-join*
					    *редактирование-объединённый_абзац*

Если требуется импортировать текст в MS Word или другую подобную программу, то
необходимо сделать каждый абзац текста одной строкой. Если абзацы в тексте
разделены пустыми строками, то можно использовать для этой операции такую
команду
>
        :g/./,/^$/join
<
Если это выглядит сложным, то давайте разберём эту команду по частям:

        :g/./           По команде ":global" ищутся все строки, которые
                        содержат хотя бы один символ.
             ,/^$/      Устанавливается диапазон, начинающийся от текущей
                        (непустой) строки до следующей пустой строки.
                  join  По команде ":join" объединяются указанные в диапазоне
                        строки в одну строку.

Посмотрим, что будет с текстом, состоящим из семи строк, разбитых в 30-ой
колонке символом перевода строки, к которому применили эту команду:

        +----------------------------------+
        |Протокол IPX/SPX является быстрым |
        |маршрутизируемым протоколом для   |
        |небольших сетей, но у него есть   |
        |недостаток --- он разработан      |
        |фирмой Novell...                  |
        |                                  |
        |"Секреты Windows NT 4.0 Server"   |
        +----------------------------------+

В итоге получилось две строки:

        +----------------------------------+
        |Протокол IPX/SPX является быстрым |
        |маршрутизируемым протоколом для не|
        |больших сетей, но у него есть недо|
        |статок --- он разработан фирмой No|
        |vell...                           |
        |"Секреты Windows NT 4.0 Server"   |
        +----------------------------------+

Примечание. Эта команда не будет работать, если разделяющая абзацы строка не
пустая, даже если она состоит из одних пробелов или символов табуляции.
Команда, которая работает со строками содержащими пробельные символы в
качестве разделителей абзаца, выглядит так: >
>
        :g/\S/,/^\s*$/join

В конце файла должна находиться пустая строка или строка с пробельными
символами, иначе последний абзац обработан не будет.

==============================================================================
*25.5*  Редактирование таблиц

Допустим, что редактируется таблица с четырьмя столбцами:

        nice table        test 1        test 2      test 3 ~
        input A           0.534 ~
        input B           0.913 ~

Необходимо вставить числа в четвёртый столбец. Для этого можно переместить
курсор во вторую строку, ввести команду `A`, затем требуемое количество
пробелов и необходимый текст в столбце.
    Для подобных случаев существует специальный параметр
>
        set virtualedit=all
<
Теперь можно установить курсор в необходимую позицию, даже если перед ней
отсутствуют пробелы и редактирование таблиц с такими «виртуальными пробелами»
намного облегчается.
    Переместите курсор в необходимую позицию, введя команду поиска заголовка
последнего столбца
>
        /test 3
<
Теперь нажав клавишу "j", окажетесь в позиции, где нужно ввести значение для
строки «input A». Введите «0.693»:

        nice table        test 1     test 2      test 3 ~
        input A           0.534                  0.693 ~
        input B           0.913 ~

В редакторе будет выполнено автоматическое заполнение пространства перед
вставленным текстом, требуемым количеством пробелов. Для заполнения следующей
строки в этом столбце введите команду `Bj`. По команде `B` курсор перемещается
в начало слова, по команде `j` курсор опускается на одну строку вниз.

        Примечание.
	В этом режиме курсор можно установить в любое место рабочей области, в
	том числе и за окончание строки. Однако вставка пробелов в строку
	будет только в том случае, если будет добавлен в этой позиции
	какой-либо текст.


КОПИРОВАНИЕ СТОЛБЦОВ

Теперь требуется добавить столбец, который должен быть копией последнего
столбца, но размещён перед столбцом «test 1». Эта операция выполняется в семь
шагов:
1. Переместите курсор в левый верхний угол столбца, например с помощью
    команды поиска `/test 3`.
2. Переключите редактор в режим визуального блока командой CTRL-V.
3. Переместите курсор на две строки вниз командой `2j`. Курсор находится на
    месте «виртуального пробела»: строка «input B» столбец «test 3».
4. Переместите курсор вправо, чтобы выделить весь столбец целиком, включая
    необходимое пространство между столбцами. Например, можно ввести для этой
    цели команду `9l`.
5. Скопируйте выделенный блок командой `y`.
6. Переместите курсор к столбцу «test 1», где должен быть вставлен новый
    столбец.
7. Нажмите клавишу "P".

Вот что должно получиться в результате:

        nice table        test 3    test 1     test 2      test 3 ~
        input A           0.693     0.534                  0.693 ~
        input B                     0.913 ~

Обратите внимание, что весь столбец «test 1» был сдвинут вправо, включая ту
строку, в которой в столбце «test 3» не было текста.

Чтобы завершить режим виртуального редактирования, используйте команду
>
        :set virtualedit=
<

РЕЖИМ ВИРТУАЛЬНОЙ ЗАМЕНЫ

Сложность при использовании 'virtualedit' заключается в том, что этот режим
«ощущается» по-иному. Невозможно распознать табуляцию и пробелы в конце строки
при перемещении курсора. Но можно использовать и другой метод — режим
виртуальной замены.
    Предположим, что в таблице есть строка, в которой содержатся кроме обычных
символов и символы табуляции. Воспользуйтесь командой `rx` на месте первого
символа табуляции. Пример.

        inp     0.693   0.534   0.693 ~

               |
           rx  |
               V

        inpx0.693   0.534       0.693 ~

Как видите, структура таблицы оказалась нарушена. Чтобы этого избежать,
используйте команду `gr`. Пример.

        inp     0.693   0.534   0.693 ~

               |
          grx  |
               V

        inpx    0.693   0.534   0.693 ~

По команде `gr` вместе с новым символом будет подставлены символы пробела и
табуляции, чтобы заполнить всё требуемое пространство занимаемое предыдущими
символами. В действительности, символ табуляции заменяется на символ «x» и
затем добавляется необходимое количество пробелов, чтобы текст после символа
табуляции оставался на своём месте. В данном случае будет вставлен символ
табуляции.
    Если потребуется заменить несколько символов, то можно использовать
команду `R` для переключения в режим замены (см. параграф |04.9|). Но опять
сталкиваемся с той же проблемой — структура таблицы нарушается и заменяются не
те символы. Пример.

        inp     0       0.534   0.693 ~

                |
         R0.786 |
                V

        inp     0.78634 0.693 ~

При исполнении команды `gR` будет активирован режим виртуальной замены, в
котором сохраняется структура текста. Пример.

        inp     0       0.534   0.693 ~

                |
        gR0.786 |
                V

        inp     0.786   0.534   0.693 ~
==============================================================================

Следующая глава: |usr_26.txt|  Выполнение повторяющихся операций
Авторские права: см. |авторские_права_на_документацию|

vim:tw=78:ts=8:noet:ft=help:norl:
